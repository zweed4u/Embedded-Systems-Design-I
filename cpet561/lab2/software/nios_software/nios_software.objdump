
nios_software.elf:     file format elf32-littlenios2
nios_software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000822c

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002604 memsz 0x00002604 flags r-x
    LOAD off    0x00003624 vaddr 0x0000a624 paddr 0x0000bc88 align 2**12
         filesz 0x00001664 memsz 0x00001664 flags rw-
    LOAD off    0x000052ec vaddr 0x0000d2ec paddr 0x0000d2ec align 2**12
         filesz 0x00000000 memsz 0x00000130 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000023c0  0000822c  0000822c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  0000a5ec  0000a5ec  000035ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001664  0000a624  0000bc88  00003624  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  0000d2ec  0000d2ec  000052ec  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000d41c  0000d41c  00004c88  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004c88  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005b8  00000000  00000000  00004cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000754f  00000000  00000000  00005268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002969  00000000  00000000  0000c7b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002971  00000000  00000000  0000f120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ac0  00000000  00000000  00011a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001bf6  00000000  00000000  00012554  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000817  00000000  00000000  0001414a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00014964  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000128  00000000  00000000  00014978  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000166b0  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000166b3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000166bf  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000166c0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000166c1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000166c5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000166c9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000166cd  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000166d8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000166e3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000166ee  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000041  00000000  00000000  000166f9  2**0
                  CONTENTS, READONLY
 29 .jdi          000044f6  00000000  00000000  0001673a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00044393  00000000  00000000  0001ac30  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
0000822c l    d  .text	00000000 .text
0000a5ec l    d  .rodata	00000000 .rodata
0000a624 l    d  .rwdata	00000000 .rwdata
0000d2ec l    d  .bss	00000000 .bss
0000d41c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_software_bsp//obj/HAL/src/crt0.o
00008264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 interrupt_main.c
0000d2f0 l     O .bss	00000001 sSwitchValue
0000d2f4 l     O .bss	00000004 sRunningSum
0000d2f8 l     O .bss	00000004 sKey1Pressed
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00008630 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000878c l     F .text	00000038 alt_dev_reg
0000a624 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00008a68 l     F .text	00000204 altera_avalon_jtag_uart_irq
00008c6c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000093cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009510 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000953c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000097a0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000098f8 l     F .text	00000050 alt_get_errno
00009948 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000b82c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000d30c g     O .bss	00000004 alt_instruction_exception_handler
00008714 g     F .text	00000078 alt_main
0000d31c g     O .bss	00000100 alt_irq
0000bc88 g       *ABS*	00000000 __flash_rwdata_start
00009db8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000d318 g     O .bss	00000004 errno
0000d304 g     O .bss	00000004 alt_argv
00013c50 g       *ABS*	00000000 _gp
0000b6ac g     O .rwdata	00000180 alt_fd_list
00009dd8 g     F .text	00000090 alt_find_dev
0000a118 g     F .text	00000138 memcpy
00009880 g     F .text	00000078 alt_io_redirect
0000a5ec g       *ABS*	00000000 __DTOR_END__
00009704 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00008e68 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000bc70 g     O .rwdata	00000004 alt_max_fd
0000bc80 g     O .rwdata	00000004 _global_impure_ptr
0000d41c g       *ABS*	00000000 __bss_end
00008540 g     F .text	000000f0 alt_iic_isr_register
00009cb4 g     F .text	00000104 alt_tick
000084f4 g     F .text	0000004c alt_ic_irq_enabled
00009c1c g     F .text	00000098 alt_alarm_stop
0000d2fc g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d0 alt_irq_handler
0000b684 g     O .rwdata	00000028 alt_dev_null
000094f4 g     F .text	0000001c alt_dcache_flush_all
0000bc88 g       *ABS*	00000000 __ram_rwdata_end
0000bc68 g     O .rwdata	00000008 alt_dev_list
0000a624 g       *ABS*	00000000 __ram_rodata_end
0000d41c g       *ABS*	00000000 end
000089a4 g     F .text	000000c4 altera_avalon_jtag_uart_init
000081cc g     F .exceptions	00000060 alt_instruction_exception_entry
0000a5ec g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009074 g     F .text	00000218 altera_avalon_jtag_uart_write
0000a3fc g     F .text	00000194 __call_exitprocs
0000822c g     F .text	0000003c _start
0000d310 g     O .bss	00000004 _alt_tick_rate
0000d314 g     O .bss	00000004 _alt_nticks
000087f8 g     F .text	00000048 alt_sys_init
0000a2e8 g     F .text	00000114 __register_exitproc
00008d14 g     F .text	00000068 altera_avalon_jtag_uart_close
0000a590 g     F .text	00000028 .hidden __mulsi3
0000a624 g       *ABS*	00000000 __ram_rwdata_start
0000a5ec g       *ABS*	00000000 __ram_rodata_start
00008840 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009f7c g     F .text	000000d4 alt_get_fd
0000bc50 g     O .rwdata	00000004 switchesPtr
0000a09c g     F .text	0000007c memcmp
00008900 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000d41c g       *ABS*	00000000 __alt_stack_base
00008950 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00009e68 g     F .text	00000114 alt_find_file
0000958c g     F .text	000000a4 alt_dev_llist_insert
0000d2ec g       *ABS*	00000000 __bss_start
000082cc g     F .text	00000094 main
0000d308 g     O .bss	00000004 alt_envp
000088a0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000bc74 g     O .rwdata	00000004 alt_errno
0000a5ec g       *ABS*	00000000 __CTOR_END__
0000a5ec g       *ABS*	00000000 __flash_rodata_start
0000a5ec g       *ABS*	00000000 __DTOR_LIST__
000087c4 g     F .text	00000034 alt_irq_init
00009b9c g     F .text	00000080 alt_release_fd
0000a050 g     F .text	00000014 atexit
0000bc84 g     O .rwdata	00000004 _impure_ptr
0000d300 g     O .bss	00000004 alt_argc
0000968c g     F .text	0000005c _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000bc60 g     O .rwdata	00000008 alt_fs_list
0000bc58 g     O .rwdata	00000004 pushButtonPtr
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008360 g     F .text	00000050 alt_ic_isr_register
0000bc88 g       *ABS*	00000000 _edata
0000d41c g       *ABS*	00000000 _end
0000822c g       *ABS*	00000000 __ram_exceptions_end
00008d7c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00008450 g     F .text	000000a4 alt_ic_irq_disable
0000a064 g     F .text	00000038 exit
00008268 g     F .text	00000064 pushButtonIsr
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000d2ec g     O .bss	00000004 accumulator_val
0000a5b8 g     F .text	00000034 _exit
0000928c g     F .text	00000140 alt_alarm_start
0000a250 g     F .text	00000098 strlen
00009a3c g     F .text	00000160 open
000096e8 g     F .text	0000001c alt_icache_flush_all
0000bc5c g     O .rwdata	00000004 alt_priority_mask
000083b0 g     F .text	000000a0 alt_ic_irq_enable
0000bc54 g     O .rwdata	00000004 accumulatorPtr
0000bc78 g     O .rwdata	00000008 alt_alarm_list
00009630 g     F .text	0000005c _do_ctors
0000941c g     F .text	000000d8 close
00008694 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608b14 	ori	at,at,33324
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081cc0 	call	81cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10b4c704 	addi	r2,r2,-11492
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10b4c704 	addi	r2,r2,-11492
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	21000104 	addi	r4,r4,4
    8168:	1105883a 	add	r2,r2,r4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff44dc>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff44d0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	e037883a 	mov	sp,fp
    81bc:	dfc00117 	ldw	ra,4(sp)
    81c0:	df000017 	ldw	fp,0(sp)
    81c4:	dec00204 	addi	sp,sp,8
    81c8:	f800283a 	ret

000081cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81cc:	defffb04 	addi	sp,sp,-20
    81d0:	dfc00415 	stw	ra,16(sp)
    81d4:	df000315 	stw	fp,12(sp)
    81d8:	df000304 	addi	fp,sp,12
    81dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e0:	00bfffc4 	movi	r2,-1
    81e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81ec:	d0a5af17 	ldw	r2,-26948(gp)
    81f0:	10000726 	beq	r2,zero,8210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f4:	d0a5af17 	ldw	r2,-26948(gp)
    81f8:	e0fffd17 	ldw	r3,-12(fp)
    81fc:	1809883a 	mov	r4,r3
    8200:	e17fff17 	ldw	r5,-4(fp)
    8204:	e1bffe17 	ldw	r6,-8(fp)
    8208:	103ee83a 	callr	r2
    820c:	00000206 	br	8218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8214:	0005883a 	mov	r2,zero
}
    8218:	e037883a 	mov	sp,fp
    821c:	dfc00117 	ldw	ra,4(sp)
    8220:	df000017 	ldw	fp,0(sp)
    8224:	dec00204 	addi	sp,sp,8
    8228:	f800283a 	ret

Disassembly of section .text:

0000822c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    822c:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8238:	d68f1414 	ori	gp,gp,15440
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    823c:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8240:	10b4bb14 	ori	r2,r2,53996

    movhi r3, %hi(__bss_end)
    8244:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8248:	18f50714 	ori	r3,r3,54300

    beq r2, r3, 1f
    824c:	10c00326 	beq	r2,r3,825c <_start+0x30>

0:
    stw zero, (r2)
    8250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8258:	10fffd36 	bltu	r2,r3,8250 <_gp+0xffff4600>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    825c:	00086940 	call	8694 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8260:	00087140 	call	8714 <alt_main>

00008264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8264:	003fff06 	br	8264 <_gp+0xffff4614>

00008268 <pushButtonIsr>:
static alt_u32 sKey1Pressed = 0;

volatile alt_u32* pushButtonPtr = (alt_u32*)(I_TRIGGER_BASE);

void pushButtonIsr(void *context)
{
    8268:	defffd04 	addi	sp,sp,-12
    826c:	df000215 	stw	fp,8(sp)
    8270:	df000204 	addi	fp,sp,8
    8274:	e13fff15 	stw	r4,-4(fp)
  alt_u32 reg_value   = 0;
    8278:	e03ffe15 	stw	zero,-8(fp)
  // reset key pressed flags
  sKey1Pressed = 0;
    827c:	d025aa15 	stw	zero,-26968(gp)


  // read the Edge Capture register
  reg_value = *(pushButtonPtr + PIO_EDGE_CAP_REG_OFFSET);
    8280:	d0a00217 	ldw	r2,-32760(gp)
    8284:	10800317 	ldw	r2,12(r2)
    8288:	e0bffe15 	stw	r2,-8(fp)

  // determine which push button was pressed
  // assume more than one could be pressed at the same time
  if (KEY1_BIT_MASK == (reg_value & KEY1_BIT_MASK))
    828c:	e0bffe17 	ldw	r2,-8(fp)
    8290:	1080004c 	andi	r2,r2,1
    8294:	10000526 	beq	r2,zero,82ac <pushButtonIsr+0x44>
  {
    // read the switches
	sSwitchValue = (alt_u8)*switchesPtr;
    8298:	d0a00017 	ldw	r2,-32768(gp)
    829c:	10800017 	ldw	r2,0(r2)
    82a0:	d0a5a805 	stb	r2,-26976(gp)
    sKey1Pressed = 1;
    82a4:	00800044 	movi	r2,1
    82a8:	d0a5aa15 	stw	r2,-26968(gp)
  } /* if */


  // clear the interrupt bits set by writing back value read
  *(pushButtonPtr + PIO_EDGE_CAP_REG_OFFSET) = reg_value;
    82ac:	d0a00217 	ldw	r2,-32760(gp)
    82b0:	10800304 	addi	r2,r2,12
    82b4:	e0fffe17 	ldw	r3,-8(fp)
    82b8:	10c00015 	stw	r3,0(r2)

} /* pushButtonIsr */
    82bc:	e037883a 	mov	sp,fp
    82c0:	df000017 	ldw	fp,0(sp)
    82c4:	dec00104 	addi	sp,sp,4
    82c8:	f800283a 	ret

000082cc <main>:

int main(void)
{
    82cc:	defffd04 	addi	sp,sp,-12
    82d0:	dfc00215 	stw	ra,8(sp)
    82d4:	df000115 	stw	fp,4(sp)
    82d8:	df000104 	addi	fp,sp,4

  // accumulator starts with 0
  *accumulatorPtr = 0;
    82dc:	d0a00117 	ldw	r2,-32764(gp)
    82e0:	10000015 	stw	zero,0(r2)

  // register the Interrupt Service Handler
  alt_ic_isr_register(I_TRIGGER_IRQ_INTERRUPT_CONTROLLER_ID, I_TRIGGER_IRQ,
    82e4:	d8000015 	stw	zero,0(sp)
    82e8:	0009883a 	mov	r4,zero
    82ec:	01400044 	movi	r5,1
    82f0:	01800074 	movhi	r6,1
    82f4:	31a09a04 	addi	r6,r6,-32152
    82f8:	000f883a 	mov	r7,zero
    82fc:	00083600 	call	8360 <alt_ic_isr_register>

  // ------------------------------------------------------------------
  // clear edge capture register of pushButtonPtr and then unmask
  // interrupt for KEY1_BIT_MASK
  // ------------------------------------------------------------------
  *(pushButtonPtr + PIO_EDGE_CAP_REG_OFFSET) = (KEY1_BIT_MASK);
    8300:	d0a00217 	ldw	r2,-32760(gp)
    8304:	10800304 	addi	r2,r2,12
    8308:	00c00044 	movi	r3,1
    830c:	10c00015 	stw	r3,0(r2)
  *(pushButtonPtr + PIO_INT_MASK_REG_OFFSET) = (KEY1_BIT_MASK);
    8310:	d0a00217 	ldw	r2,-32760(gp)
    8314:	10800204 	addi	r2,r2,8
    8318:	00c00044 	movi	r3,1
    831c:	10c00015 	stw	r3,0(r2)

  // loop forever
  while (1)
  {
    if (sKey1Pressed)
    8320:	d0a5aa17 	ldw	r2,-26968(gp)
    8324:	10000a26 	beq	r2,zero,8350 <main+0x84>
    {
      sRunningSum += sSwitchValue;
    8328:	d0a5a803 	ldbu	r2,-26976(gp)
    832c:	10c03fcc 	andi	r3,r2,255
    8330:	d0a5a917 	ldw	r2,-26972(gp)
    8334:	1885883a 	add	r2,r3,r2
    8338:	d0a5a915 	stw	r2,-26972(gp)
      *(accumulatorPtr) = sRunningSum;
    833c:	d0a00117 	ldw	r2,-32764(gp)
    8340:	d0e5a917 	ldw	r3,-26972(gp)
    8344:	10c00015 	stw	r3,0(r2)
      sKey1Pressed = 0;
    8348:	d025aa15 	stw	zero,-26968(gp)
    834c:	00000306 	br	835c <main+0x90>
    } /* if KEY1_BIT_MASK pressed */
    else
    {
    	accumulator_val = *(switchesPtr + PIO_DATA_REG_OFFSET);
    8350:	d0a00017 	ldw	r2,-32768(gp)
    8354:	10800017 	ldw	r2,0(r2)
    8358:	d0a5a715 	stw	r2,-26980(gp)
    } /* else */
  } /* while */
    835c:	003ff006 	br	8320 <_gp+0xffff46d0>

00008360 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8360:	defff904 	addi	sp,sp,-28
    8364:	dfc00615 	stw	ra,24(sp)
    8368:	df000515 	stw	fp,20(sp)
    836c:	df000504 	addi	fp,sp,20
    8370:	e13ffc15 	stw	r4,-16(fp)
    8374:	e17ffd15 	stw	r5,-12(fp)
    8378:	e1bffe15 	stw	r6,-8(fp)
    837c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    8380:	e0800217 	ldw	r2,8(fp)
    8384:	d8800015 	stw	r2,0(sp)
    8388:	e13ffc17 	ldw	r4,-16(fp)
    838c:	e17ffd17 	ldw	r5,-12(fp)
    8390:	e1bffe17 	ldw	r6,-8(fp)
    8394:	e1ffff17 	ldw	r7,-4(fp)
    8398:	00085400 	call	8540 <alt_iic_isr_register>
}  
    839c:	e037883a 	mov	sp,fp
    83a0:	dfc00117 	ldw	ra,4(sp)
    83a4:	df000017 	ldw	fp,0(sp)
    83a8:	dec00204 	addi	sp,sp,8
    83ac:	f800283a 	ret

000083b0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    83b0:	defff904 	addi	sp,sp,-28
    83b4:	df000615 	stw	fp,24(sp)
    83b8:	df000604 	addi	fp,sp,24
    83bc:	e13ffe15 	stw	r4,-8(fp)
    83c0:	e17fff15 	stw	r5,-4(fp)
    83c4:	e0bfff17 	ldw	r2,-4(fp)
    83c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    83cc:	0005303a 	rdctl	r2,status
    83d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    83d4:	e0fffb17 	ldw	r3,-20(fp)
    83d8:	00bfff84 	movi	r2,-2
    83dc:	1884703a 	and	r2,r3,r2
    83e0:	1001703a 	wrctl	status,r2
  
  return context;
    83e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    83e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    83ec:	e0bffa17 	ldw	r2,-24(fp)
    83f0:	00c00044 	movi	r3,1
    83f4:	1884983a 	sll	r2,r3,r2
    83f8:	1007883a 	mov	r3,r2
    83fc:	00800074 	movhi	r2,1
    8400:	10b4bf04 	addi	r2,r2,-11524
    8404:	10800017 	ldw	r2,0(r2)
    8408:	1886b03a 	or	r3,r3,r2
    840c:	00800074 	movhi	r2,1
    8410:	10b4bf04 	addi	r2,r2,-11524
    8414:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8418:	00800074 	movhi	r2,1
    841c:	10b4bf04 	addi	r2,r2,-11524
    8420:	10800017 	ldw	r2,0(r2)
    8424:	100170fa 	wrctl	ienable,r2
    8428:	e0bffc17 	ldw	r2,-16(fp)
    842c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8430:	e0bffd17 	ldw	r2,-12(fp)
    8434:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    8438:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    843c:	0001883a 	nop
}
    8440:	e037883a 	mov	sp,fp
    8444:	df000017 	ldw	fp,0(sp)
    8448:	dec00104 	addi	sp,sp,4
    844c:	f800283a 	ret

00008450 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    8450:	defff904 	addi	sp,sp,-28
    8454:	df000615 	stw	fp,24(sp)
    8458:	df000604 	addi	fp,sp,24
    845c:	e13ffe15 	stw	r4,-8(fp)
    8460:	e17fff15 	stw	r5,-4(fp)
    8464:	e0bfff17 	ldw	r2,-4(fp)
    8468:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    846c:	0005303a 	rdctl	r2,status
    8470:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8474:	e0fffb17 	ldw	r3,-20(fp)
    8478:	00bfff84 	movi	r2,-2
    847c:	1884703a 	and	r2,r3,r2
    8480:	1001703a 	wrctl	status,r2
  
  return context;
    8484:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8488:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    848c:	e0bffa17 	ldw	r2,-24(fp)
    8490:	00c00044 	movi	r3,1
    8494:	1884983a 	sll	r2,r3,r2
    8498:	0084303a 	nor	r2,zero,r2
    849c:	1007883a 	mov	r3,r2
    84a0:	00800074 	movhi	r2,1
    84a4:	10b4bf04 	addi	r2,r2,-11524
    84a8:	10800017 	ldw	r2,0(r2)
    84ac:	1886703a 	and	r3,r3,r2
    84b0:	00800074 	movhi	r2,1
    84b4:	10b4bf04 	addi	r2,r2,-11524
    84b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    84bc:	00800074 	movhi	r2,1
    84c0:	10b4bf04 	addi	r2,r2,-11524
    84c4:	10800017 	ldw	r2,0(r2)
    84c8:	100170fa 	wrctl	ienable,r2
    84cc:	e0bffc17 	ldw	r2,-16(fp)
    84d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    84d4:	e0bffd17 	ldw	r2,-12(fp)
    84d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    84dc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    84e0:	0001883a 	nop
}
    84e4:	e037883a 	mov	sp,fp
    84e8:	df000017 	ldw	fp,0(sp)
    84ec:	dec00104 	addi	sp,sp,4
    84f0:	f800283a 	ret

000084f4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    84f4:	defffc04 	addi	sp,sp,-16
    84f8:	df000315 	stw	fp,12(sp)
    84fc:	df000304 	addi	fp,sp,12
    8500:	e13ffe15 	stw	r4,-8(fp)
    8504:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    8508:	000530fa 	rdctl	r2,ienable
    850c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    8510:	e0bfff17 	ldw	r2,-4(fp)
    8514:	00c00044 	movi	r3,1
    8518:	1884983a 	sll	r2,r3,r2
    851c:	1007883a 	mov	r3,r2
    8520:	e0bffd17 	ldw	r2,-12(fp)
    8524:	1884703a 	and	r2,r3,r2
    8528:	1004c03a 	cmpne	r2,r2,zero
    852c:	10803fcc 	andi	r2,r2,255
}
    8530:	e037883a 	mov	sp,fp
    8534:	df000017 	ldw	fp,0(sp)
    8538:	dec00104 	addi	sp,sp,4
    853c:	f800283a 	ret

00008540 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8540:	defff504 	addi	sp,sp,-44
    8544:	dfc00a15 	stw	ra,40(sp)
    8548:	df000915 	stw	fp,36(sp)
    854c:	df000904 	addi	fp,sp,36
    8550:	e13ffc15 	stw	r4,-16(fp)
    8554:	e17ffd15 	stw	r5,-12(fp)
    8558:	e1bffe15 	stw	r6,-8(fp)
    855c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    8560:	00bffa84 	movi	r2,-22
    8564:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    8568:	e0bffd17 	ldw	r2,-12(fp)
    856c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    8570:	e0bff817 	ldw	r2,-32(fp)
    8574:	10800808 	cmpgei	r2,r2,32
    8578:	1000271e 	bne	r2,zero,8618 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    857c:	0005303a 	rdctl	r2,status
    8580:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8584:	e0fffa17 	ldw	r3,-24(fp)
    8588:	00bfff84 	movi	r2,-2
    858c:	1884703a 	and	r2,r3,r2
    8590:	1001703a 	wrctl	status,r2
  
  return context;
    8594:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    8598:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    859c:	00800074 	movhi	r2,1
    85a0:	10b4c704 	addi	r2,r2,-11492
    85a4:	e0fff817 	ldw	r3,-32(fp)
    85a8:	180690fa 	slli	r3,r3,3
    85ac:	10c5883a 	add	r2,r2,r3
    85b0:	e0fffe17 	ldw	r3,-8(fp)
    85b4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    85b8:	00800074 	movhi	r2,1
    85bc:	10b4c704 	addi	r2,r2,-11492
    85c0:	e0fff817 	ldw	r3,-32(fp)
    85c4:	180690fa 	slli	r3,r3,3
    85c8:	18c00104 	addi	r3,r3,4
    85cc:	10c5883a 	add	r2,r2,r3
    85d0:	e0ffff17 	ldw	r3,-4(fp)
    85d4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    85d8:	e0bffe17 	ldw	r2,-8(fp)
    85dc:	10000526 	beq	r2,zero,85f4 <alt_iic_isr_register+0xb4>
    85e0:	e0bff817 	ldw	r2,-32(fp)
    85e4:	e13ffc17 	ldw	r4,-16(fp)
    85e8:	100b883a 	mov	r5,r2
    85ec:	00083b00 	call	83b0 <alt_ic_irq_enable>
    85f0:	00000406 	br	8604 <alt_iic_isr_register+0xc4>
    85f4:	e0bff817 	ldw	r2,-32(fp)
    85f8:	e13ffc17 	ldw	r4,-16(fp)
    85fc:	100b883a 	mov	r5,r2
    8600:	00084500 	call	8450 <alt_ic_irq_disable>
    8604:	e0bff715 	stw	r2,-36(fp)
    8608:	e0bff917 	ldw	r2,-28(fp)
    860c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8610:	e0bffb17 	ldw	r2,-20(fp)
    8614:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    8618:	e0bff717 	ldw	r2,-36(fp)
}
    861c:	e037883a 	mov	sp,fp
    8620:	dfc00117 	ldw	ra,4(sp)
    8624:	df000017 	ldw	fp,0(sp)
    8628:	dec00204 	addi	sp,sp,8
    862c:	f800283a 	ret

00008630 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8630:	defffc04 	addi	sp,sp,-16
    8634:	df000315 	stw	fp,12(sp)
    8638:	df000304 	addi	fp,sp,12
    863c:	e13ffd15 	stw	r4,-12(fp)
    8640:	e17ffe15 	stw	r5,-8(fp)
    8644:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8648:	e0fffe17 	ldw	r3,-8(fp)
    864c:	e0bffd17 	ldw	r2,-12(fp)
    8650:	18800c26 	beq	r3,r2,8684 <alt_load_section+0x54>
  {
    while( to != end )
    8654:	00000806 	br	8678 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8658:	e0bffe17 	ldw	r2,-8(fp)
    865c:	10c00104 	addi	r3,r2,4
    8660:	e0fffe15 	stw	r3,-8(fp)
    8664:	e0fffd17 	ldw	r3,-12(fp)
    8668:	19000104 	addi	r4,r3,4
    866c:	e13ffd15 	stw	r4,-12(fp)
    8670:	18c00017 	ldw	r3,0(r3)
    8674:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8678:	e0fffe17 	ldw	r3,-8(fp)
    867c:	e0bfff17 	ldw	r2,-4(fp)
    8680:	18bff51e 	bne	r3,r2,8658 <_gp+0xffff4a08>
    {
      *to++ = *from++;
    }
  }
}
    8684:	e037883a 	mov	sp,fp
    8688:	df000017 	ldw	fp,0(sp)
    868c:	dec00104 	addi	sp,sp,4
    8690:	f800283a 	ret

00008694 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8694:	defffe04 	addi	sp,sp,-8
    8698:	dfc00115 	stw	ra,4(sp)
    869c:	df000015 	stw	fp,0(sp)
    86a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    86a4:	01000074 	movhi	r4,1
    86a8:	212f2204 	addi	r4,r4,-17272
    86ac:	01400074 	movhi	r5,1
    86b0:	29698904 	addi	r5,r5,-23004
    86b4:	01800074 	movhi	r6,1
    86b8:	31af2204 	addi	r6,r6,-17272
    86bc:	00086300 	call	8630 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    86c0:	01000074 	movhi	r4,1
    86c4:	21200804 	addi	r4,r4,-32736
    86c8:	01400074 	movhi	r5,1
    86cc:	29600804 	addi	r5,r5,-32736
    86d0:	01800074 	movhi	r6,1
    86d4:	31a08b04 	addi	r6,r6,-32212
    86d8:	00086300 	call	8630 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    86dc:	01000074 	movhi	r4,1
    86e0:	21297b04 	addi	r4,r4,-23060
    86e4:	01400074 	movhi	r5,1
    86e8:	29697b04 	addi	r5,r5,-23060
    86ec:	01800074 	movhi	r6,1
    86f0:	31a98904 	addi	r6,r6,-23004
    86f4:	00086300 	call	8630 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    86f8:	00094f40 	call	94f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    86fc:	00096e80 	call	96e8 <alt_icache_flush_all>
}
    8700:	e037883a 	mov	sp,fp
    8704:	dfc00117 	ldw	ra,4(sp)
    8708:	df000017 	ldw	fp,0(sp)
    870c:	dec00204 	addi	sp,sp,8
    8710:	f800283a 	ret

00008714 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8714:	defffd04 	addi	sp,sp,-12
    8718:	dfc00215 	stw	ra,8(sp)
    871c:	df000115 	stw	fp,4(sp)
    8720:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8724:	0009883a 	mov	r4,zero
    8728:	00087c40 	call	87c4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    872c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8730:	00087f80 	call	87f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8734:	01000074 	movhi	r4,1
    8738:	21297b04 	addi	r4,r4,-23060
    873c:	01400074 	movhi	r5,1
    8740:	29697b04 	addi	r5,r5,-23060
    8744:	01800074 	movhi	r6,1
    8748:	31a97b04 	addi	r6,r6,-23060
    874c:	00098800 	call	9880 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8750:	00096300 	call	9630 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8754:	01000074 	movhi	r4,1
    8758:	2125a304 	addi	r4,r4,-26996
    875c:	000a0500 	call	a050 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8760:	d125ac17 	ldw	r4,-26960(gp)
    8764:	d0e5ad17 	ldw	r3,-26956(gp)
    8768:	d0a5ae17 	ldw	r2,-26952(gp)
    876c:	180b883a 	mov	r5,r3
    8770:	100d883a 	mov	r6,r2
    8774:	00082cc0 	call	82cc <main>
    8778:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    877c:	01000044 	movi	r4,1
    8780:	000941c0 	call	941c <close>
  exit (result);
    8784:	e13fff17 	ldw	r4,-4(fp)
    8788:	000a0640 	call	a064 <exit>

0000878c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    878c:	defffd04 	addi	sp,sp,-12
    8790:	dfc00215 	stw	ra,8(sp)
    8794:	df000115 	stw	fp,4(sp)
    8798:	df000104 	addi	fp,sp,4
    879c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    87a0:	e13fff17 	ldw	r4,-4(fp)
    87a4:	01400074 	movhi	r5,1
    87a8:	296f1a04 	addi	r5,r5,-17304
    87ac:	000958c0 	call	958c <alt_dev_llist_insert>
}
    87b0:	e037883a 	mov	sp,fp
    87b4:	dfc00117 	ldw	ra,4(sp)
    87b8:	df000017 	ldw	fp,0(sp)
    87bc:	dec00204 	addi	sp,sp,8
    87c0:	f800283a 	ret

000087c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    87c4:	defffd04 	addi	sp,sp,-12
    87c8:	dfc00215 	stw	ra,8(sp)
    87cc:	df000115 	stw	fp,4(sp)
    87d0:	df000104 	addi	fp,sp,4
    87d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    87d8:	0009db80 	call	9db8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    87dc:	00800044 	movi	r2,1
    87e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    87e4:	e037883a 	mov	sp,fp
    87e8:	dfc00117 	ldw	ra,4(sp)
    87ec:	df000017 	ldw	fp,0(sp)
    87f0:	dec00204 	addi	sp,sp,8
    87f4:	f800283a 	ret

000087f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    87f8:	defffe04 	addi	sp,sp,-8
    87fc:	dfc00115 	stw	ra,4(sp)
    8800:	df000015 	stw	fp,0(sp)
    8804:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    8808:	01000074 	movhi	r4,1
    880c:	21299304 	addi	r4,r4,-22964
    8810:	000b883a 	mov	r5,zero
    8814:	000d883a 	mov	r6,zero
    8818:	00089a40 	call	89a4 <altera_avalon_jtag_uart_init>
    881c:	01000074 	movhi	r4,1
    8820:	21298904 	addi	r4,r4,-23004
    8824:	000878c0 	call	878c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    8828:	0001883a 	nop
}
    882c:	e037883a 	mov	sp,fp
    8830:	dfc00117 	ldw	ra,4(sp)
    8834:	df000017 	ldw	fp,0(sp)
    8838:	dec00204 	addi	sp,sp,8
    883c:	f800283a 	ret

00008840 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8840:	defffa04 	addi	sp,sp,-24
    8844:	dfc00515 	stw	ra,20(sp)
    8848:	df000415 	stw	fp,16(sp)
    884c:	df000404 	addi	fp,sp,16
    8850:	e13ffd15 	stw	r4,-12(fp)
    8854:	e17ffe15 	stw	r5,-8(fp)
    8858:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    885c:	e0bffd17 	ldw	r2,-12(fp)
    8860:	10800017 	ldw	r2,0(r2)
    8864:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8868:	e0bffc17 	ldw	r2,-16(fp)
    886c:	10c00a04 	addi	r3,r2,40
    8870:	e0bffd17 	ldw	r2,-12(fp)
    8874:	10800217 	ldw	r2,8(r2)
    8878:	1809883a 	mov	r4,r3
    887c:	e17ffe17 	ldw	r5,-8(fp)
    8880:	e1bfff17 	ldw	r6,-4(fp)
    8884:	100f883a 	mov	r7,r2
    8888:	0008e680 	call	8e68 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    888c:	e037883a 	mov	sp,fp
    8890:	dfc00117 	ldw	ra,4(sp)
    8894:	df000017 	ldw	fp,0(sp)
    8898:	dec00204 	addi	sp,sp,8
    889c:	f800283a 	ret

000088a0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    88a0:	defffa04 	addi	sp,sp,-24
    88a4:	dfc00515 	stw	ra,20(sp)
    88a8:	df000415 	stw	fp,16(sp)
    88ac:	df000404 	addi	fp,sp,16
    88b0:	e13ffd15 	stw	r4,-12(fp)
    88b4:	e17ffe15 	stw	r5,-8(fp)
    88b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    88bc:	e0bffd17 	ldw	r2,-12(fp)
    88c0:	10800017 	ldw	r2,0(r2)
    88c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    88c8:	e0bffc17 	ldw	r2,-16(fp)
    88cc:	10c00a04 	addi	r3,r2,40
    88d0:	e0bffd17 	ldw	r2,-12(fp)
    88d4:	10800217 	ldw	r2,8(r2)
    88d8:	1809883a 	mov	r4,r3
    88dc:	e17ffe17 	ldw	r5,-8(fp)
    88e0:	e1bfff17 	ldw	r6,-4(fp)
    88e4:	100f883a 	mov	r7,r2
    88e8:	00090740 	call	9074 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    88ec:	e037883a 	mov	sp,fp
    88f0:	dfc00117 	ldw	ra,4(sp)
    88f4:	df000017 	ldw	fp,0(sp)
    88f8:	dec00204 	addi	sp,sp,8
    88fc:	f800283a 	ret

00008900 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    8900:	defffc04 	addi	sp,sp,-16
    8904:	dfc00315 	stw	ra,12(sp)
    8908:	df000215 	stw	fp,8(sp)
    890c:	df000204 	addi	fp,sp,8
    8910:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8914:	e0bfff17 	ldw	r2,-4(fp)
    8918:	10800017 	ldw	r2,0(r2)
    891c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    8920:	e0bffe17 	ldw	r2,-8(fp)
    8924:	10c00a04 	addi	r3,r2,40
    8928:	e0bfff17 	ldw	r2,-4(fp)
    892c:	10800217 	ldw	r2,8(r2)
    8930:	1809883a 	mov	r4,r3
    8934:	100b883a 	mov	r5,r2
    8938:	0008d140 	call	8d14 <altera_avalon_jtag_uart_close>
}
    893c:	e037883a 	mov	sp,fp
    8940:	dfc00117 	ldw	ra,4(sp)
    8944:	df000017 	ldw	fp,0(sp)
    8948:	dec00204 	addi	sp,sp,8
    894c:	f800283a 	ret

00008950 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    8950:	defffa04 	addi	sp,sp,-24
    8954:	dfc00515 	stw	ra,20(sp)
    8958:	df000415 	stw	fp,16(sp)
    895c:	df000404 	addi	fp,sp,16
    8960:	e13ffd15 	stw	r4,-12(fp)
    8964:	e17ffe15 	stw	r5,-8(fp)
    8968:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    896c:	e0bffd17 	ldw	r2,-12(fp)
    8970:	10800017 	ldw	r2,0(r2)
    8974:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    8978:	e0bffc17 	ldw	r2,-16(fp)
    897c:	10800a04 	addi	r2,r2,40
    8980:	1009883a 	mov	r4,r2
    8984:	e17ffe17 	ldw	r5,-8(fp)
    8988:	e1bfff17 	ldw	r6,-4(fp)
    898c:	0008d7c0 	call	8d7c <altera_avalon_jtag_uart_ioctl>
}
    8990:	e037883a 	mov	sp,fp
    8994:	dfc00117 	ldw	ra,4(sp)
    8998:	df000017 	ldw	fp,0(sp)
    899c:	dec00204 	addi	sp,sp,8
    89a0:	f800283a 	ret

000089a4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    89a4:	defffa04 	addi	sp,sp,-24
    89a8:	dfc00515 	stw	ra,20(sp)
    89ac:	df000415 	stw	fp,16(sp)
    89b0:	df000404 	addi	fp,sp,16
    89b4:	e13ffd15 	stw	r4,-12(fp)
    89b8:	e17ffe15 	stw	r5,-8(fp)
    89bc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    89c0:	e0bffd17 	ldw	r2,-12(fp)
    89c4:	00c00044 	movi	r3,1
    89c8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    89cc:	e0bffd17 	ldw	r2,-12(fp)
    89d0:	10800017 	ldw	r2,0(r2)
    89d4:	10800104 	addi	r2,r2,4
    89d8:	1007883a 	mov	r3,r2
    89dc:	e0bffd17 	ldw	r2,-12(fp)
    89e0:	10800817 	ldw	r2,32(r2)
    89e4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    89e8:	e0fffe17 	ldw	r3,-8(fp)
    89ec:	e0bfff17 	ldw	r2,-4(fp)
    89f0:	d8000015 	stw	zero,0(sp)
    89f4:	1809883a 	mov	r4,r3
    89f8:	100b883a 	mov	r5,r2
    89fc:	01800074 	movhi	r6,1
    8a00:	31a29a04 	addi	r6,r6,-30104
    8a04:	e1fffd17 	ldw	r7,-12(fp)
    8a08:	00083600 	call	8360 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    8a0c:	e0bffd17 	ldw	r2,-12(fp)
    8a10:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    8a14:	e0bffd17 	ldw	r2,-12(fp)
    8a18:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    8a1c:	00800074 	movhi	r2,1
    8a20:	10b4c404 	addi	r2,r2,-11504
    8a24:	10800017 	ldw	r2,0(r2)
    8a28:	1809883a 	mov	r4,r3
    8a2c:	100b883a 	mov	r5,r2
    8a30:	01800074 	movhi	r6,1
    8a34:	31a31b04 	addi	r6,r6,-29588
    8a38:	e1fffd17 	ldw	r7,-12(fp)
    8a3c:	000928c0 	call	928c <alt_alarm_start>
    8a40:	1000040e 	bge	r2,zero,8a54 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    8a44:	e0fffd17 	ldw	r3,-12(fp)
    8a48:	00a00034 	movhi	r2,32768
    8a4c:	10bfffc4 	addi	r2,r2,-1
    8a50:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    8a54:	e037883a 	mov	sp,fp
    8a58:	dfc00117 	ldw	ra,4(sp)
    8a5c:	df000017 	ldw	fp,0(sp)
    8a60:	dec00204 	addi	sp,sp,8
    8a64:	f800283a 	ret

00008a68 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    8a68:	defff804 	addi	sp,sp,-32
    8a6c:	df000715 	stw	fp,28(sp)
    8a70:	df000704 	addi	fp,sp,28
    8a74:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    8a78:	e0bfff17 	ldw	r2,-4(fp)
    8a7c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    8a80:	e0bffb17 	ldw	r2,-20(fp)
    8a84:	10800017 	ldw	r2,0(r2)
    8a88:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8a8c:	e0bffc17 	ldw	r2,-16(fp)
    8a90:	10800104 	addi	r2,r2,4
    8a94:	10800037 	ldwio	r2,0(r2)
    8a98:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    8a9c:	e0bffd17 	ldw	r2,-12(fp)
    8aa0:	1080c00c 	andi	r2,r2,768
    8aa4:	1000011e 	bne	r2,zero,8aac <altera_avalon_jtag_uart_irq+0x44>
      break;
    8aa8:	00006c06 	br	8c5c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    8aac:	e0bffd17 	ldw	r2,-12(fp)
    8ab0:	1080400c 	andi	r2,r2,256
    8ab4:	10003426 	beq	r2,zero,8b88 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    8ab8:	00800074 	movhi	r2,1
    8abc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8ac0:	e0bffb17 	ldw	r2,-20(fp)
    8ac4:	10800a17 	ldw	r2,40(r2)
    8ac8:	10800044 	addi	r2,r2,1
    8acc:	1081ffcc 	andi	r2,r2,2047
    8ad0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    8ad4:	e0bffb17 	ldw	r2,-20(fp)
    8ad8:	10c00b17 	ldw	r3,44(r2)
    8adc:	e0bffe17 	ldw	r2,-8(fp)
    8ae0:	1880011e 	bne	r3,r2,8ae8 <altera_avalon_jtag_uart_irq+0x80>
          break;
    8ae4:	00001606 	br	8b40 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8ae8:	e0bffc17 	ldw	r2,-16(fp)
    8aec:	10800037 	ldwio	r2,0(r2)
    8af0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    8af4:	e0bff917 	ldw	r2,-28(fp)
    8af8:	10a0000c 	andi	r2,r2,32768
    8afc:	1000011e 	bne	r2,zero,8b04 <altera_avalon_jtag_uart_irq+0x9c>
          break;
    8b00:	00000f06 	br	8b40 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8b04:	e0bffb17 	ldw	r2,-20(fp)
    8b08:	10800a17 	ldw	r2,40(r2)
    8b0c:	e0fff917 	ldw	r3,-28(fp)
    8b10:	1809883a 	mov	r4,r3
    8b14:	e0fffb17 	ldw	r3,-20(fp)
    8b18:	1885883a 	add	r2,r3,r2
    8b1c:	10800e04 	addi	r2,r2,56
    8b20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8b24:	e0bffb17 	ldw	r2,-20(fp)
    8b28:	10800a17 	ldw	r2,40(r2)
    8b2c:	10800044 	addi	r2,r2,1
    8b30:	10c1ffcc 	andi	r3,r2,2047
    8b34:	e0bffb17 	ldw	r2,-20(fp)
    8b38:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    8b3c:	003fe006 	br	8ac0 <_gp+0xffff4e70>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    8b40:	e0bff917 	ldw	r2,-28(fp)
    8b44:	10bfffec 	andhi	r2,r2,65535
    8b48:	10000f26 	beq	r2,zero,8b88 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8b4c:	e0bffb17 	ldw	r2,-20(fp)
    8b50:	10c00817 	ldw	r3,32(r2)
    8b54:	00bfff84 	movi	r2,-2
    8b58:	1886703a 	and	r3,r3,r2
    8b5c:	e0bffb17 	ldw	r2,-20(fp)
    8b60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    8b64:	e0bffc17 	ldw	r2,-16(fp)
    8b68:	10800104 	addi	r2,r2,4
    8b6c:	1007883a 	mov	r3,r2
    8b70:	e0bffb17 	ldw	r2,-20(fp)
    8b74:	10800817 	ldw	r2,32(r2)
    8b78:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8b7c:	e0bffc17 	ldw	r2,-16(fp)
    8b80:	10800104 	addi	r2,r2,4
    8b84:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    8b88:	e0bffd17 	ldw	r2,-12(fp)
    8b8c:	1080800c 	andi	r2,r2,512
    8b90:	10003126 	beq	r2,zero,8c58 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    8b94:	e0bffd17 	ldw	r2,-12(fp)
    8b98:	1004d43a 	srli	r2,r2,16
    8b9c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    8ba0:	00001406 	br	8bf4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    8ba4:	e0bffc17 	ldw	r2,-16(fp)
    8ba8:	e0fffb17 	ldw	r3,-20(fp)
    8bac:	18c00d17 	ldw	r3,52(r3)
    8bb0:	e13ffb17 	ldw	r4,-20(fp)
    8bb4:	20c7883a 	add	r3,r4,r3
    8bb8:	18c20e04 	addi	r3,r3,2104
    8bbc:	18c00003 	ldbu	r3,0(r3)
    8bc0:	18c03fcc 	andi	r3,r3,255
    8bc4:	18c0201c 	xori	r3,r3,128
    8bc8:	18ffe004 	addi	r3,r3,-128
    8bcc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8bd0:	e0bffb17 	ldw	r2,-20(fp)
    8bd4:	10800d17 	ldw	r2,52(r2)
    8bd8:	10800044 	addi	r2,r2,1
    8bdc:	10c1ffcc 	andi	r3,r2,2047
    8be0:	e0bffb17 	ldw	r2,-20(fp)
    8be4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    8be8:	e0bffa17 	ldw	r2,-24(fp)
    8bec:	10bfffc4 	addi	r2,r2,-1
    8bf0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    8bf4:	e0bffa17 	ldw	r2,-24(fp)
    8bf8:	10000526 	beq	r2,zero,8c10 <altera_avalon_jtag_uart_irq+0x1a8>
    8bfc:	e0bffb17 	ldw	r2,-20(fp)
    8c00:	10c00d17 	ldw	r3,52(r2)
    8c04:	e0bffb17 	ldw	r2,-20(fp)
    8c08:	10800c17 	ldw	r2,48(r2)
    8c0c:	18bfe51e 	bne	r3,r2,8ba4 <_gp+0xffff4f54>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    8c10:	e0bffa17 	ldw	r2,-24(fp)
    8c14:	10001026 	beq	r2,zero,8c58 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    8c18:	e0bffb17 	ldw	r2,-20(fp)
    8c1c:	10c00817 	ldw	r3,32(r2)
    8c20:	00bfff44 	movi	r2,-3
    8c24:	1886703a 	and	r3,r3,r2
    8c28:	e0bffb17 	ldw	r2,-20(fp)
    8c2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8c30:	e0bffb17 	ldw	r2,-20(fp)
    8c34:	10800017 	ldw	r2,0(r2)
    8c38:	10800104 	addi	r2,r2,4
    8c3c:	1007883a 	mov	r3,r2
    8c40:	e0bffb17 	ldw	r2,-20(fp)
    8c44:	10800817 	ldw	r2,32(r2)
    8c48:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8c4c:	e0bffc17 	ldw	r2,-16(fp)
    8c50:	10800104 	addi	r2,r2,4
    8c54:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    8c58:	003f8c06 	br	8a8c <_gp+0xffff4e3c>
}
    8c5c:	e037883a 	mov	sp,fp
    8c60:	df000017 	ldw	fp,0(sp)
    8c64:	dec00104 	addi	sp,sp,4
    8c68:	f800283a 	ret

00008c6c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    8c6c:	defff804 	addi	sp,sp,-32
    8c70:	df000715 	stw	fp,28(sp)
    8c74:	df000704 	addi	fp,sp,28
    8c78:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    8c7c:	e0bffb17 	ldw	r2,-20(fp)
    8c80:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    8c84:	e0bff917 	ldw	r2,-28(fp)
    8c88:	10800017 	ldw	r2,0(r2)
    8c8c:	10800104 	addi	r2,r2,4
    8c90:	10800037 	ldwio	r2,0(r2)
    8c94:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    8c98:	e0bffa17 	ldw	r2,-24(fp)
    8c9c:	1081000c 	andi	r2,r2,1024
    8ca0:	10000b26 	beq	r2,zero,8cd0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    8ca4:	e0bff917 	ldw	r2,-28(fp)
    8ca8:	10800017 	ldw	r2,0(r2)
    8cac:	10800104 	addi	r2,r2,4
    8cb0:	1007883a 	mov	r3,r2
    8cb4:	e0bff917 	ldw	r2,-28(fp)
    8cb8:	10800817 	ldw	r2,32(r2)
    8cbc:	10810014 	ori	r2,r2,1024
    8cc0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    8cc4:	e0bff917 	ldw	r2,-28(fp)
    8cc8:	10000915 	stw	zero,36(r2)
    8ccc:	00000a06 	br	8cf8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    8cd0:	e0bff917 	ldw	r2,-28(fp)
    8cd4:	10c00917 	ldw	r3,36(r2)
    8cd8:	00a00034 	movhi	r2,32768
    8cdc:	10bfff04 	addi	r2,r2,-4
    8ce0:	10c00536 	bltu	r2,r3,8cf8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    8ce4:	e0bff917 	ldw	r2,-28(fp)
    8ce8:	10800917 	ldw	r2,36(r2)
    8cec:	10c00044 	addi	r3,r2,1
    8cf0:	e0bff917 	ldw	r2,-28(fp)
    8cf4:	10c00915 	stw	r3,36(r2)
    8cf8:	00800074 	movhi	r2,1
    8cfc:	10b4c404 	addi	r2,r2,-11504
    8d00:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    8d04:	e037883a 	mov	sp,fp
    8d08:	df000017 	ldw	fp,0(sp)
    8d0c:	dec00104 	addi	sp,sp,4
    8d10:	f800283a 	ret

00008d14 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    8d14:	defffd04 	addi	sp,sp,-12
    8d18:	df000215 	stw	fp,8(sp)
    8d1c:	df000204 	addi	fp,sp,8
    8d20:	e13ffe15 	stw	r4,-8(fp)
    8d24:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8d28:	00000506 	br	8d40 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    8d2c:	e0bfff17 	ldw	r2,-4(fp)
    8d30:	1090000c 	andi	r2,r2,16384
    8d34:	10000226 	beq	r2,zero,8d40 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    8d38:	00bffd44 	movi	r2,-11
    8d3c:	00000b06 	br	8d6c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8d40:	e0bffe17 	ldw	r2,-8(fp)
    8d44:	10c00d17 	ldw	r3,52(r2)
    8d48:	e0bffe17 	ldw	r2,-8(fp)
    8d4c:	10800c17 	ldw	r2,48(r2)
    8d50:	18800526 	beq	r3,r2,8d68 <altera_avalon_jtag_uart_close+0x54>
    8d54:	e0bffe17 	ldw	r2,-8(fp)
    8d58:	10c00917 	ldw	r3,36(r2)
    8d5c:	e0bffe17 	ldw	r2,-8(fp)
    8d60:	10800117 	ldw	r2,4(r2)
    8d64:	18bff136 	bltu	r3,r2,8d2c <_gp+0xffff50dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    8d68:	0005883a 	mov	r2,zero
}
    8d6c:	e037883a 	mov	sp,fp
    8d70:	df000017 	ldw	fp,0(sp)
    8d74:	dec00104 	addi	sp,sp,4
    8d78:	f800283a 	ret

00008d7c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    8d7c:	defffa04 	addi	sp,sp,-24
    8d80:	df000515 	stw	fp,20(sp)
    8d84:	df000504 	addi	fp,sp,20
    8d88:	e13ffd15 	stw	r4,-12(fp)
    8d8c:	e17ffe15 	stw	r5,-8(fp)
    8d90:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    8d94:	00bff9c4 	movi	r2,-25
    8d98:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    8d9c:	e0bffe17 	ldw	r2,-8(fp)
    8da0:	10da8060 	cmpeqi	r3,r2,27137
    8da4:	1800031e 	bne	r3,zero,8db4 <altera_avalon_jtag_uart_ioctl+0x38>
    8da8:	109a80a0 	cmpeqi	r2,r2,27138
    8dac:	1000191e 	bne	r2,zero,8e14 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    8db0:	00002806 	br	8e54 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    8db4:	e0bffd17 	ldw	r2,-12(fp)
    8db8:	10c00117 	ldw	r3,4(r2)
    8dbc:	00a00034 	movhi	r2,32768
    8dc0:	10bfffc4 	addi	r2,r2,-1
    8dc4:	18801226 	beq	r3,r2,8e10 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    8dc8:	e0bfff17 	ldw	r2,-4(fp)
    8dcc:	10800017 	ldw	r2,0(r2)
    8dd0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    8dd4:	e0bffc17 	ldw	r2,-16(fp)
    8dd8:	10800090 	cmplti	r2,r2,2
    8ddc:	1000061e 	bne	r2,zero,8df8 <altera_avalon_jtag_uart_ioctl+0x7c>
    8de0:	e0fffc17 	ldw	r3,-16(fp)
    8de4:	00a00034 	movhi	r2,32768
    8de8:	10bfffc4 	addi	r2,r2,-1
    8dec:	18800226 	beq	r3,r2,8df8 <altera_avalon_jtag_uart_ioctl+0x7c>
    8df0:	e0bffc17 	ldw	r2,-16(fp)
    8df4:	00000206 	br	8e00 <altera_avalon_jtag_uart_ioctl+0x84>
    8df8:	00a00034 	movhi	r2,32768
    8dfc:	10bfff84 	addi	r2,r2,-2
    8e00:	e0fffd17 	ldw	r3,-12(fp)
    8e04:	18800115 	stw	r2,4(r3)
      rc = 0;
    8e08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    8e0c:	00001106 	br	8e54 <altera_avalon_jtag_uart_ioctl+0xd8>
    8e10:	00001006 	br	8e54 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    8e14:	e0bffd17 	ldw	r2,-12(fp)
    8e18:	10c00117 	ldw	r3,4(r2)
    8e1c:	00a00034 	movhi	r2,32768
    8e20:	10bfffc4 	addi	r2,r2,-1
    8e24:	18800a26 	beq	r3,r2,8e50 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    8e28:	e0bffd17 	ldw	r2,-12(fp)
    8e2c:	10c00917 	ldw	r3,36(r2)
    8e30:	e0bffd17 	ldw	r2,-12(fp)
    8e34:	10800117 	ldw	r2,4(r2)
    8e38:	1885803a 	cmpltu	r2,r3,r2
    8e3c:	10c03fcc 	andi	r3,r2,255
    8e40:	e0bfff17 	ldw	r2,-4(fp)
    8e44:	10c00015 	stw	r3,0(r2)
      rc = 0;
    8e48:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    8e4c:	00000006 	br	8e50 <altera_avalon_jtag_uart_ioctl+0xd4>
    8e50:	0001883a 	nop

  default:
    break;
  }

  return rc;
    8e54:	e0bffb17 	ldw	r2,-20(fp)
}
    8e58:	e037883a 	mov	sp,fp
    8e5c:	df000017 	ldw	fp,0(sp)
    8e60:	dec00104 	addi	sp,sp,4
    8e64:	f800283a 	ret

00008e68 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    8e68:	defff304 	addi	sp,sp,-52
    8e6c:	dfc00c15 	stw	ra,48(sp)
    8e70:	df000b15 	stw	fp,44(sp)
    8e74:	df000b04 	addi	fp,sp,44
    8e78:	e13ffc15 	stw	r4,-16(fp)
    8e7c:	e17ffd15 	stw	r5,-12(fp)
    8e80:	e1bffe15 	stw	r6,-8(fp)
    8e84:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    8e88:	e0bffd17 	ldw	r2,-12(fp)
    8e8c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8e90:	00004906 	br	8fb8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    8e94:	e0bffc17 	ldw	r2,-16(fp)
    8e98:	10800a17 	ldw	r2,40(r2)
    8e9c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    8ea0:	e0bffc17 	ldw	r2,-16(fp)
    8ea4:	10800b17 	ldw	r2,44(r2)
    8ea8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    8eac:	e0fff717 	ldw	r3,-36(fp)
    8eb0:	e0bff817 	ldw	r2,-32(fp)
    8eb4:	18800536 	bltu	r3,r2,8ecc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    8eb8:	e0fff717 	ldw	r3,-36(fp)
    8ebc:	e0bff817 	ldw	r2,-32(fp)
    8ec0:	1885c83a 	sub	r2,r3,r2
    8ec4:	e0bff615 	stw	r2,-40(fp)
    8ec8:	00000406 	br	8edc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    8ecc:	00c20004 	movi	r3,2048
    8ed0:	e0bff817 	ldw	r2,-32(fp)
    8ed4:	1885c83a 	sub	r2,r3,r2
    8ed8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    8edc:	e0bff617 	ldw	r2,-40(fp)
    8ee0:	1000011e 	bne	r2,zero,8ee8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    8ee4:	00001d06 	br	8f5c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    8ee8:	e0fffe17 	ldw	r3,-8(fp)
    8eec:	e0bff617 	ldw	r2,-40(fp)
    8ef0:	1880022e 	bgeu	r3,r2,8efc <altera_avalon_jtag_uart_read+0x94>
        n = space;
    8ef4:	e0bffe17 	ldw	r2,-8(fp)
    8ef8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    8efc:	e0bff817 	ldw	r2,-32(fp)
    8f00:	10800e04 	addi	r2,r2,56
    8f04:	e0fffc17 	ldw	r3,-16(fp)
    8f08:	1885883a 	add	r2,r3,r2
    8f0c:	e13ff517 	ldw	r4,-44(fp)
    8f10:	100b883a 	mov	r5,r2
    8f14:	e1bff617 	ldw	r6,-40(fp)
    8f18:	000a1180 	call	a118 <memcpy>
      ptr   += n;
    8f1c:	e0fff517 	ldw	r3,-44(fp)
    8f20:	e0bff617 	ldw	r2,-40(fp)
    8f24:	1885883a 	add	r2,r3,r2
    8f28:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    8f2c:	e0fffe17 	ldw	r3,-8(fp)
    8f30:	e0bff617 	ldw	r2,-40(fp)
    8f34:	1885c83a 	sub	r2,r3,r2
    8f38:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8f3c:	e0fff817 	ldw	r3,-32(fp)
    8f40:	e0bff617 	ldw	r2,-40(fp)
    8f44:	1885883a 	add	r2,r3,r2
    8f48:	10c1ffcc 	andi	r3,r2,2047
    8f4c:	e0bffc17 	ldw	r2,-16(fp)
    8f50:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    8f54:	e0bffe17 	ldw	r2,-8(fp)
    8f58:	00bfce16 	blt	zero,r2,8e94 <_gp+0xffff5244>

    /* If we read any data then return it */
    if (ptr != buffer)
    8f5c:	e0fff517 	ldw	r3,-44(fp)
    8f60:	e0bffd17 	ldw	r2,-12(fp)
    8f64:	18800126 	beq	r3,r2,8f6c <altera_avalon_jtag_uart_read+0x104>
      break;
    8f68:	00001506 	br	8fc0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    8f6c:	e0bfff17 	ldw	r2,-4(fp)
    8f70:	1090000c 	andi	r2,r2,16384
    8f74:	10000126 	beq	r2,zero,8f7c <altera_avalon_jtag_uart_read+0x114>
      break;
    8f78:	00001106 	br	8fc0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    8f7c:	0001883a 	nop
    8f80:	e0bffc17 	ldw	r2,-16(fp)
    8f84:	10c00a17 	ldw	r3,40(r2)
    8f88:	e0bff717 	ldw	r2,-36(fp)
    8f8c:	1880051e 	bne	r3,r2,8fa4 <altera_avalon_jtag_uart_read+0x13c>
    8f90:	e0bffc17 	ldw	r2,-16(fp)
    8f94:	10c00917 	ldw	r3,36(r2)
    8f98:	e0bffc17 	ldw	r2,-16(fp)
    8f9c:	10800117 	ldw	r2,4(r2)
    8fa0:	18bff736 	bltu	r3,r2,8f80 <_gp+0xffff5330>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    8fa4:	e0bffc17 	ldw	r2,-16(fp)
    8fa8:	10c00a17 	ldw	r3,40(r2)
    8fac:	e0bff717 	ldw	r2,-36(fp)
    8fb0:	1880011e 	bne	r3,r2,8fb8 <altera_avalon_jtag_uart_read+0x150>
      break;
    8fb4:	00000206 	br	8fc0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8fb8:	e0bffe17 	ldw	r2,-8(fp)
    8fbc:	00bfb516 	blt	zero,r2,8e94 <_gp+0xffff5244>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    8fc0:	e0fff517 	ldw	r3,-44(fp)
    8fc4:	e0bffd17 	ldw	r2,-12(fp)
    8fc8:	18801826 	beq	r3,r2,902c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8fcc:	0005303a 	rdctl	r2,status
    8fd0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8fd4:	e0fffa17 	ldw	r3,-24(fp)
    8fd8:	00bfff84 	movi	r2,-2
    8fdc:	1884703a 	and	r2,r3,r2
    8fe0:	1001703a 	wrctl	status,r2
  
  return context;
    8fe4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    8fe8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8fec:	e0bffc17 	ldw	r2,-16(fp)
    8ff0:	10800817 	ldw	r2,32(r2)
    8ff4:	10c00054 	ori	r3,r2,1
    8ff8:	e0bffc17 	ldw	r2,-16(fp)
    8ffc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    9000:	e0bffc17 	ldw	r2,-16(fp)
    9004:	10800017 	ldw	r2,0(r2)
    9008:	10800104 	addi	r2,r2,4
    900c:	1007883a 	mov	r3,r2
    9010:	e0bffc17 	ldw	r2,-16(fp)
    9014:	10800817 	ldw	r2,32(r2)
    9018:	18800035 	stwio	r2,0(r3)
    901c:	e0bff917 	ldw	r2,-28(fp)
    9020:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9024:	e0bffb17 	ldw	r2,-20(fp)
    9028:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    902c:	e0fff517 	ldw	r3,-44(fp)
    9030:	e0bffd17 	ldw	r2,-12(fp)
    9034:	18800426 	beq	r3,r2,9048 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
    9038:	e0fff517 	ldw	r3,-44(fp)
    903c:	e0bffd17 	ldw	r2,-12(fp)
    9040:	1885c83a 	sub	r2,r3,r2
    9044:	00000606 	br	9060 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
    9048:	e0bfff17 	ldw	r2,-4(fp)
    904c:	1090000c 	andi	r2,r2,16384
    9050:	10000226 	beq	r2,zero,905c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
    9054:	00bffd44 	movi	r2,-11
    9058:	00000106 	br	9060 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
    905c:	00bffec4 	movi	r2,-5
}
    9060:	e037883a 	mov	sp,fp
    9064:	dfc00117 	ldw	ra,4(sp)
    9068:	df000017 	ldw	fp,0(sp)
    906c:	dec00204 	addi	sp,sp,8
    9070:	f800283a 	ret

00009074 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9074:	defff304 	addi	sp,sp,-52
    9078:	dfc00c15 	stw	ra,48(sp)
    907c:	df000b15 	stw	fp,44(sp)
    9080:	df000b04 	addi	fp,sp,44
    9084:	e13ffc15 	stw	r4,-16(fp)
    9088:	e17ffd15 	stw	r5,-12(fp)
    908c:	e1bffe15 	stw	r6,-8(fp)
    9090:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    9094:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    9098:	e0bffd17 	ldw	r2,-12(fp)
    909c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    90a0:	00003806 	br	9184 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    90a4:	e0bffc17 	ldw	r2,-16(fp)
    90a8:	10800c17 	ldw	r2,48(r2)
    90ac:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    90b0:	e0bffc17 	ldw	r2,-16(fp)
    90b4:	10800d17 	ldw	r2,52(r2)
    90b8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    90bc:	e0fff817 	ldw	r3,-32(fp)
    90c0:	e0bff517 	ldw	r2,-44(fp)
    90c4:	1880062e 	bgeu	r3,r2,90e0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    90c8:	e0fff517 	ldw	r3,-44(fp)
    90cc:	e0bff817 	ldw	r2,-32(fp)
    90d0:	1885c83a 	sub	r2,r3,r2
    90d4:	10bfffc4 	addi	r2,r2,-1
    90d8:	e0bff615 	stw	r2,-40(fp)
    90dc:	00000b06 	br	910c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    90e0:	e0bff517 	ldw	r2,-44(fp)
    90e4:	10000526 	beq	r2,zero,90fc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    90e8:	00c20004 	movi	r3,2048
    90ec:	e0bff817 	ldw	r2,-32(fp)
    90f0:	1885c83a 	sub	r2,r3,r2
    90f4:	e0bff615 	stw	r2,-40(fp)
    90f8:	00000406 	br	910c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    90fc:	00c1ffc4 	movi	r3,2047
    9100:	e0bff817 	ldw	r2,-32(fp)
    9104:	1885c83a 	sub	r2,r3,r2
    9108:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    910c:	e0bff617 	ldw	r2,-40(fp)
    9110:	1000011e 	bne	r2,zero,9118 <altera_avalon_jtag_uart_write+0xa4>
        break;
    9114:	00001d06 	br	918c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
    9118:	e0fffe17 	ldw	r3,-8(fp)
    911c:	e0bff617 	ldw	r2,-40(fp)
    9120:	1880022e 	bgeu	r3,r2,912c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    9124:	e0bffe17 	ldw	r2,-8(fp)
    9128:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    912c:	e0bff817 	ldw	r2,-32(fp)
    9130:	10820e04 	addi	r2,r2,2104
    9134:	e0fffc17 	ldw	r3,-16(fp)
    9138:	1885883a 	add	r2,r3,r2
    913c:	1009883a 	mov	r4,r2
    9140:	e17ffd17 	ldw	r5,-12(fp)
    9144:	e1bff617 	ldw	r6,-40(fp)
    9148:	000a1180 	call	a118 <memcpy>
      ptr   += n;
    914c:	e0fffd17 	ldw	r3,-12(fp)
    9150:	e0bff617 	ldw	r2,-40(fp)
    9154:	1885883a 	add	r2,r3,r2
    9158:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    915c:	e0fffe17 	ldw	r3,-8(fp)
    9160:	e0bff617 	ldw	r2,-40(fp)
    9164:	1885c83a 	sub	r2,r3,r2
    9168:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    916c:	e0fff817 	ldw	r3,-32(fp)
    9170:	e0bff617 	ldw	r2,-40(fp)
    9174:	1885883a 	add	r2,r3,r2
    9178:	10c1ffcc 	andi	r3,r2,2047
    917c:	e0bffc17 	ldw	r2,-16(fp)
    9180:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    9184:	e0bffe17 	ldw	r2,-8(fp)
    9188:	00bfc616 	blt	zero,r2,90a4 <_gp+0xffff5454>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    918c:	0005303a 	rdctl	r2,status
    9190:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9194:	e0fffa17 	ldw	r3,-24(fp)
    9198:	00bfff84 	movi	r2,-2
    919c:	1884703a 	and	r2,r3,r2
    91a0:	1001703a 	wrctl	status,r2
  
  return context;
    91a4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    91a8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    91ac:	e0bffc17 	ldw	r2,-16(fp)
    91b0:	10800817 	ldw	r2,32(r2)
    91b4:	10c00094 	ori	r3,r2,2
    91b8:	e0bffc17 	ldw	r2,-16(fp)
    91bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    91c0:	e0bffc17 	ldw	r2,-16(fp)
    91c4:	10800017 	ldw	r2,0(r2)
    91c8:	10800104 	addi	r2,r2,4
    91cc:	1007883a 	mov	r3,r2
    91d0:	e0bffc17 	ldw	r2,-16(fp)
    91d4:	10800817 	ldw	r2,32(r2)
    91d8:	18800035 	stwio	r2,0(r3)
    91dc:	e0bff917 	ldw	r2,-28(fp)
    91e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    91e4:	e0bffb17 	ldw	r2,-20(fp)
    91e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    91ec:	e0bffe17 	ldw	r2,-8(fp)
    91f0:	0080120e 	bge	zero,r2,923c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    91f4:	e0bfff17 	ldw	r2,-4(fp)
    91f8:	1090000c 	andi	r2,r2,16384
    91fc:	10000126 	beq	r2,zero,9204 <altera_avalon_jtag_uart_write+0x190>
        break;
    9200:	00001006 	br	9244 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    9204:	0001883a 	nop
    9208:	e0bffc17 	ldw	r2,-16(fp)
    920c:	10c00d17 	ldw	r3,52(r2)
    9210:	e0bff517 	ldw	r2,-44(fp)
    9214:	1880051e 	bne	r3,r2,922c <altera_avalon_jtag_uart_write+0x1b8>
    9218:	e0bffc17 	ldw	r2,-16(fp)
    921c:	10c00917 	ldw	r3,36(r2)
    9220:	e0bffc17 	ldw	r2,-16(fp)
    9224:	10800117 	ldw	r2,4(r2)
    9228:	18bff736 	bltu	r3,r2,9208 <_gp+0xffff55b8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    922c:	e0bffc17 	ldw	r2,-16(fp)
    9230:	10800917 	ldw	r2,36(r2)
    9234:	10000126 	beq	r2,zero,923c <altera_avalon_jtag_uart_write+0x1c8>
         break;
    9238:	00000206 	br	9244 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    923c:	e0bffe17 	ldw	r2,-8(fp)
    9240:	00bf9716 	blt	zero,r2,90a0 <_gp+0xffff5450>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    9244:	e0fffd17 	ldw	r3,-12(fp)
    9248:	e0bff717 	ldw	r2,-36(fp)
    924c:	18800426 	beq	r3,r2,9260 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    9250:	e0fffd17 	ldw	r3,-12(fp)
    9254:	e0bff717 	ldw	r2,-36(fp)
    9258:	1885c83a 	sub	r2,r3,r2
    925c:	00000606 	br	9278 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    9260:	e0bfff17 	ldw	r2,-4(fp)
    9264:	1090000c 	andi	r2,r2,16384
    9268:	10000226 	beq	r2,zero,9274 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    926c:	00bffd44 	movi	r2,-11
    9270:	00000106 	br	9278 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    9274:	00bffec4 	movi	r2,-5
}
    9278:	e037883a 	mov	sp,fp
    927c:	dfc00117 	ldw	ra,4(sp)
    9280:	df000017 	ldw	fp,0(sp)
    9284:	dec00204 	addi	sp,sp,8
    9288:	f800283a 	ret

0000928c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    928c:	defff504 	addi	sp,sp,-44
    9290:	df000a15 	stw	fp,40(sp)
    9294:	df000a04 	addi	fp,sp,40
    9298:	e13ffc15 	stw	r4,-16(fp)
    929c:	e17ffd15 	stw	r5,-12(fp)
    92a0:	e1bffe15 	stw	r6,-8(fp)
    92a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    92a8:	e03ff615 	stw	zero,-40(fp)
    92ac:	00800074 	movhi	r2,1
    92b0:	10b4c404 	addi	r2,r2,-11504
    92b4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    92b8:	10003f26 	beq	r2,zero,93b8 <alt_alarm_start+0x12c>
  {
    if (alarm)
    92bc:	e0bffc17 	ldw	r2,-16(fp)
    92c0:	10003b26 	beq	r2,zero,93b0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    92c4:	e0bffc17 	ldw	r2,-16(fp)
    92c8:	e0fffe17 	ldw	r3,-8(fp)
    92cc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    92d0:	e0bffc17 	ldw	r2,-16(fp)
    92d4:	e0ffff17 	ldw	r3,-4(fp)
    92d8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    92dc:	0005303a 	rdctl	r2,status
    92e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    92e4:	e0fff817 	ldw	r3,-32(fp)
    92e8:	00bfff84 	movi	r2,-2
    92ec:	1884703a 	and	r2,r3,r2
    92f0:	1001703a 	wrctl	status,r2
  
  return context;
    92f4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    92f8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    92fc:	00800074 	movhi	r2,1
    9300:	10b4c504 	addi	r2,r2,-11500
    9304:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    9308:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    930c:	e0fffd17 	ldw	r3,-12(fp)
    9310:	e0bff617 	ldw	r2,-40(fp)
    9314:	1885883a 	add	r2,r3,r2
    9318:	10c00044 	addi	r3,r2,1
    931c:	e0bffc17 	ldw	r2,-16(fp)
    9320:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    9324:	e0bffc17 	ldw	r2,-16(fp)
    9328:	10c00217 	ldw	r3,8(r2)
    932c:	e0bff617 	ldw	r2,-40(fp)
    9330:	1880042e 	bgeu	r3,r2,9344 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    9334:	e0bffc17 	ldw	r2,-16(fp)
    9338:	00c00044 	movi	r3,1
    933c:	10c00405 	stb	r3,16(r2)
    9340:	00000206 	br	934c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    9344:	e0bffc17 	ldw	r2,-16(fp)
    9348:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    934c:	e0fffc17 	ldw	r3,-16(fp)
    9350:	00800074 	movhi	r2,1
    9354:	10af1e04 	addi	r2,r2,-17288
    9358:	e0bff915 	stw	r2,-28(fp)
    935c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9360:	e0bffa17 	ldw	r2,-24(fp)
    9364:	e0fff917 	ldw	r3,-28(fp)
    9368:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    936c:	e0bff917 	ldw	r2,-28(fp)
    9370:	10c00017 	ldw	r3,0(r2)
    9374:	e0bffa17 	ldw	r2,-24(fp)
    9378:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    937c:	e0bff917 	ldw	r2,-28(fp)
    9380:	10800017 	ldw	r2,0(r2)
    9384:	e0fffa17 	ldw	r3,-24(fp)
    9388:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    938c:	e0bff917 	ldw	r2,-28(fp)
    9390:	e0fffa17 	ldw	r3,-24(fp)
    9394:	10c00015 	stw	r3,0(r2)
    9398:	e0bff717 	ldw	r2,-36(fp)
    939c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    93a0:	e0bffb17 	ldw	r2,-20(fp)
    93a4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    93a8:	0005883a 	mov	r2,zero
    93ac:	00000306 	br	93bc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    93b0:	00bffa84 	movi	r2,-22
    93b4:	00000106 	br	93bc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    93b8:	00bfde84 	movi	r2,-134
  }
}
    93bc:	e037883a 	mov	sp,fp
    93c0:	df000017 	ldw	fp,0(sp)
    93c4:	dec00104 	addi	sp,sp,4
    93c8:	f800283a 	ret

000093cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    93cc:	defffe04 	addi	sp,sp,-8
    93d0:	dfc00115 	stw	ra,4(sp)
    93d4:	df000015 	stw	fp,0(sp)
    93d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    93dc:	00800074 	movhi	r2,1
    93e0:	10af1d04 	addi	r2,r2,-17292
    93e4:	10800017 	ldw	r2,0(r2)
    93e8:	10000526 	beq	r2,zero,9400 <alt_get_errno+0x34>
    93ec:	00800074 	movhi	r2,1
    93f0:	10af1d04 	addi	r2,r2,-17292
    93f4:	10800017 	ldw	r2,0(r2)
    93f8:	103ee83a 	callr	r2
    93fc:	00000206 	br	9408 <alt_get_errno+0x3c>
    9400:	00800074 	movhi	r2,1
    9404:	10b4c604 	addi	r2,r2,-11496
}
    9408:	e037883a 	mov	sp,fp
    940c:	dfc00117 	ldw	ra,4(sp)
    9410:	df000017 	ldw	fp,0(sp)
    9414:	dec00204 	addi	sp,sp,8
    9418:	f800283a 	ret

0000941c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    941c:	defffb04 	addi	sp,sp,-20
    9420:	dfc00415 	stw	ra,16(sp)
    9424:	df000315 	stw	fp,12(sp)
    9428:	df000304 	addi	fp,sp,12
    942c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9430:	e0bfff17 	ldw	r2,-4(fp)
    9434:	10000816 	blt	r2,zero,9458 <close+0x3c>
    9438:	e13fff17 	ldw	r4,-4(fp)
    943c:	01400304 	movi	r5,12
    9440:	000a5900 	call	a590 <__mulsi3>
    9444:	1007883a 	mov	r3,r2
    9448:	00800074 	movhi	r2,1
    944c:	10adab04 	addi	r2,r2,-18772
    9450:	1885883a 	add	r2,r3,r2
    9454:	00000106 	br	945c <close+0x40>
    9458:	0005883a 	mov	r2,zero
    945c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9460:	e0bffd17 	ldw	r2,-12(fp)
    9464:	10001926 	beq	r2,zero,94cc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9468:	e0bffd17 	ldw	r2,-12(fp)
    946c:	10800017 	ldw	r2,0(r2)
    9470:	10800417 	ldw	r2,16(r2)
    9474:	10000626 	beq	r2,zero,9490 <close+0x74>
    9478:	e0bffd17 	ldw	r2,-12(fp)
    947c:	10800017 	ldw	r2,0(r2)
    9480:	10800417 	ldw	r2,16(r2)
    9484:	e13ffd17 	ldw	r4,-12(fp)
    9488:	103ee83a 	callr	r2
    948c:	00000106 	br	9494 <close+0x78>
    9490:	0005883a 	mov	r2,zero
    9494:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9498:	e13fff17 	ldw	r4,-4(fp)
    949c:	0009b9c0 	call	9b9c <alt_release_fd>
    if (rval < 0)
    94a0:	e0bffe17 	ldw	r2,-8(fp)
    94a4:	1000070e 	bge	r2,zero,94c4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    94a8:	00093cc0 	call	93cc <alt_get_errno>
    94ac:	1007883a 	mov	r3,r2
    94b0:	e0bffe17 	ldw	r2,-8(fp)
    94b4:	0085c83a 	sub	r2,zero,r2
    94b8:	18800015 	stw	r2,0(r3)
      return -1;
    94bc:	00bfffc4 	movi	r2,-1
    94c0:	00000706 	br	94e0 <close+0xc4>
    }
    return 0;
    94c4:	0005883a 	mov	r2,zero
    94c8:	00000506 	br	94e0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    94cc:	00093cc0 	call	93cc <alt_get_errno>
    94d0:	1007883a 	mov	r3,r2
    94d4:	00801444 	movi	r2,81
    94d8:	18800015 	stw	r2,0(r3)
    return -1;
    94dc:	00bfffc4 	movi	r2,-1
  }
}
    94e0:	e037883a 	mov	sp,fp
    94e4:	dfc00117 	ldw	ra,4(sp)
    94e8:	df000017 	ldw	fp,0(sp)
    94ec:	dec00204 	addi	sp,sp,8
    94f0:	f800283a 	ret

000094f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    94f4:	deffff04 	addi	sp,sp,-4
    94f8:	df000015 	stw	fp,0(sp)
    94fc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9500:	e037883a 	mov	sp,fp
    9504:	df000017 	ldw	fp,0(sp)
    9508:	dec00104 	addi	sp,sp,4
    950c:	f800283a 	ret

00009510 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9510:	defffc04 	addi	sp,sp,-16
    9514:	df000315 	stw	fp,12(sp)
    9518:	df000304 	addi	fp,sp,12
    951c:	e13ffd15 	stw	r4,-12(fp)
    9520:	e17ffe15 	stw	r5,-8(fp)
    9524:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9528:	e0bfff17 	ldw	r2,-4(fp)
}
    952c:	e037883a 	mov	sp,fp
    9530:	df000017 	ldw	fp,0(sp)
    9534:	dec00104 	addi	sp,sp,4
    9538:	f800283a 	ret

0000953c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    953c:	defffe04 	addi	sp,sp,-8
    9540:	dfc00115 	stw	ra,4(sp)
    9544:	df000015 	stw	fp,0(sp)
    9548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    954c:	00800074 	movhi	r2,1
    9550:	10af1d04 	addi	r2,r2,-17292
    9554:	10800017 	ldw	r2,0(r2)
    9558:	10000526 	beq	r2,zero,9570 <alt_get_errno+0x34>
    955c:	00800074 	movhi	r2,1
    9560:	10af1d04 	addi	r2,r2,-17292
    9564:	10800017 	ldw	r2,0(r2)
    9568:	103ee83a 	callr	r2
    956c:	00000206 	br	9578 <alt_get_errno+0x3c>
    9570:	00800074 	movhi	r2,1
    9574:	10b4c604 	addi	r2,r2,-11496
}
    9578:	e037883a 	mov	sp,fp
    957c:	dfc00117 	ldw	ra,4(sp)
    9580:	df000017 	ldw	fp,0(sp)
    9584:	dec00204 	addi	sp,sp,8
    9588:	f800283a 	ret

0000958c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    958c:	defffa04 	addi	sp,sp,-24
    9590:	dfc00515 	stw	ra,20(sp)
    9594:	df000415 	stw	fp,16(sp)
    9598:	df000404 	addi	fp,sp,16
    959c:	e13ffe15 	stw	r4,-8(fp)
    95a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    95a4:	e0bffe17 	ldw	r2,-8(fp)
    95a8:	10000326 	beq	r2,zero,95b8 <alt_dev_llist_insert+0x2c>
    95ac:	e0bffe17 	ldw	r2,-8(fp)
    95b0:	10800217 	ldw	r2,8(r2)
    95b4:	1000061e 	bne	r2,zero,95d0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    95b8:	000953c0 	call	953c <alt_get_errno>
    95bc:	1007883a 	mov	r3,r2
    95c0:	00800584 	movi	r2,22
    95c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    95c8:	00bffa84 	movi	r2,-22
    95cc:	00001306 	br	961c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    95d0:	e0bffe17 	ldw	r2,-8(fp)
    95d4:	e0ffff17 	ldw	r3,-4(fp)
    95d8:	e0fffc15 	stw	r3,-16(fp)
    95dc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    95e0:	e0bffd17 	ldw	r2,-12(fp)
    95e4:	e0fffc17 	ldw	r3,-16(fp)
    95e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    95ec:	e0bffc17 	ldw	r2,-16(fp)
    95f0:	10c00017 	ldw	r3,0(r2)
    95f4:	e0bffd17 	ldw	r2,-12(fp)
    95f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    95fc:	e0bffc17 	ldw	r2,-16(fp)
    9600:	10800017 	ldw	r2,0(r2)
    9604:	e0fffd17 	ldw	r3,-12(fp)
    9608:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    960c:	e0bffc17 	ldw	r2,-16(fp)
    9610:	e0fffd17 	ldw	r3,-12(fp)
    9614:	10c00015 	stw	r3,0(r2)

  return 0;  
    9618:	0005883a 	mov	r2,zero
}
    961c:	e037883a 	mov	sp,fp
    9620:	dfc00117 	ldw	ra,4(sp)
    9624:	df000017 	ldw	fp,0(sp)
    9628:	dec00204 	addi	sp,sp,8
    962c:	f800283a 	ret

00009630 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9630:	defffd04 	addi	sp,sp,-12
    9634:	dfc00215 	stw	ra,8(sp)
    9638:	df000115 	stw	fp,4(sp)
    963c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9640:	00800074 	movhi	r2,1
    9644:	10a97a04 	addi	r2,r2,-23064
    9648:	e0bfff15 	stw	r2,-4(fp)
    964c:	00000606 	br	9668 <_do_ctors+0x38>
        (*ctor) (); 
    9650:	e0bfff17 	ldw	r2,-4(fp)
    9654:	10800017 	ldw	r2,0(r2)
    9658:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    965c:	e0bfff17 	ldw	r2,-4(fp)
    9660:	10bfff04 	addi	r2,r2,-4
    9664:	e0bfff15 	stw	r2,-4(fp)
    9668:	e0ffff17 	ldw	r3,-4(fp)
    966c:	00800074 	movhi	r2,1
    9670:	10a97b04 	addi	r2,r2,-23060
    9674:	18bff62e 	bgeu	r3,r2,9650 <_gp+0xffff5a00>
        (*ctor) (); 
}
    9678:	e037883a 	mov	sp,fp
    967c:	dfc00117 	ldw	ra,4(sp)
    9680:	df000017 	ldw	fp,0(sp)
    9684:	dec00204 	addi	sp,sp,8
    9688:	f800283a 	ret

0000968c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    968c:	defffd04 	addi	sp,sp,-12
    9690:	dfc00215 	stw	ra,8(sp)
    9694:	df000115 	stw	fp,4(sp)
    9698:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    969c:	00800074 	movhi	r2,1
    96a0:	10a97a04 	addi	r2,r2,-23064
    96a4:	e0bfff15 	stw	r2,-4(fp)
    96a8:	00000606 	br	96c4 <_do_dtors+0x38>
        (*dtor) (); 
    96ac:	e0bfff17 	ldw	r2,-4(fp)
    96b0:	10800017 	ldw	r2,0(r2)
    96b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    96b8:	e0bfff17 	ldw	r2,-4(fp)
    96bc:	10bfff04 	addi	r2,r2,-4
    96c0:	e0bfff15 	stw	r2,-4(fp)
    96c4:	e0ffff17 	ldw	r3,-4(fp)
    96c8:	00800074 	movhi	r2,1
    96cc:	10a97b04 	addi	r2,r2,-23060
    96d0:	18bff62e 	bgeu	r3,r2,96ac <_gp+0xffff5a5c>
        (*dtor) (); 
}
    96d4:	e037883a 	mov	sp,fp
    96d8:	dfc00117 	ldw	ra,4(sp)
    96dc:	df000017 	ldw	fp,0(sp)
    96e0:	dec00204 	addi	sp,sp,8
    96e4:	f800283a 	ret

000096e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    96e8:	deffff04 	addi	sp,sp,-4
    96ec:	df000015 	stw	fp,0(sp)
    96f0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    96f4:	e037883a 	mov	sp,fp
    96f8:	df000017 	ldw	fp,0(sp)
    96fc:	dec00104 	addi	sp,sp,4
    9700:	f800283a 	ret

00009704 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    9704:	defffe04 	addi	sp,sp,-8
    9708:	df000115 	stw	fp,4(sp)
    970c:	df000104 	addi	fp,sp,4
    9710:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    9714:	e0bfff17 	ldw	r2,-4(fp)
    9718:	10bffe84 	addi	r2,r2,-6
    971c:	10c00428 	cmpgeui	r3,r2,16
    9720:	18001a1e 	bne	r3,zero,978c <alt_exception_cause_generated_bad_addr+0x88>
    9724:	100690ba 	slli	r3,r2,2
    9728:	00800074 	movhi	r2,1
    972c:	10a5cf04 	addi	r2,r2,-26820
    9730:	1885883a 	add	r2,r3,r2
    9734:	10800017 	ldw	r2,0(r2)
    9738:	1000683a 	jmp	r2
    973c:	0000977c 	xorhi	zero,zero,605
    9740:	0000977c 	xorhi	zero,zero,605
    9744:	0000978c 	andi	zero,zero,606
    9748:	0000978c 	andi	zero,zero,606
    974c:	0000978c 	andi	zero,zero,606
    9750:	0000977c 	xorhi	zero,zero,605
    9754:	00009784 	movi	zero,606
    9758:	0000978c 	andi	zero,zero,606
    975c:	0000977c 	xorhi	zero,zero,605
    9760:	0000977c 	xorhi	zero,zero,605
    9764:	0000978c 	andi	zero,zero,606
    9768:	0000977c 	xorhi	zero,zero,605
    976c:	00009784 	movi	zero,606
    9770:	0000978c 	andi	zero,zero,606
    9774:	0000978c 	andi	zero,zero,606
    9778:	0000977c 	xorhi	zero,zero,605
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    977c:	00800044 	movi	r2,1
    9780:	00000306 	br	9790 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    9784:	0005883a 	mov	r2,zero
    9788:	00000106 	br	9790 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    978c:	0005883a 	mov	r2,zero
  }
}
    9790:	e037883a 	mov	sp,fp
    9794:	df000017 	ldw	fp,0(sp)
    9798:	dec00104 	addi	sp,sp,4
    979c:	f800283a 	ret

000097a0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    97a0:	defff804 	addi	sp,sp,-32
    97a4:	dfc00715 	stw	ra,28(sp)
    97a8:	df000615 	stw	fp,24(sp)
    97ac:	dc000515 	stw	r16,20(sp)
    97b0:	df000604 	addi	fp,sp,24
    97b4:	e13ffb15 	stw	r4,-20(fp)
    97b8:	e17ffc15 	stw	r5,-16(fp)
    97bc:	e1bffd15 	stw	r6,-12(fp)
    97c0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    97c4:	e13ffc17 	ldw	r4,-16(fp)
    97c8:	e17ffd17 	ldw	r5,-12(fp)
    97cc:	e1bffe17 	ldw	r6,-8(fp)
    97d0:	0009a3c0 	call	9a3c <open>
    97d4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    97d8:	e0bffa17 	ldw	r2,-24(fp)
    97dc:	10002216 	blt	r2,zero,9868 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    97e0:	04000074 	movhi	r16,1
    97e4:	842dab04 	addi	r16,r16,-18772
    97e8:	e0bffa17 	ldw	r2,-24(fp)
    97ec:	1009883a 	mov	r4,r2
    97f0:	01400304 	movi	r5,12
    97f4:	000a5900 	call	a590 <__mulsi3>
    97f8:	8085883a 	add	r2,r16,r2
    97fc:	10c00017 	ldw	r3,0(r2)
    9800:	e0bffb17 	ldw	r2,-20(fp)
    9804:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9808:	04000074 	movhi	r16,1
    980c:	842dab04 	addi	r16,r16,-18772
    9810:	e0bffa17 	ldw	r2,-24(fp)
    9814:	1009883a 	mov	r4,r2
    9818:	01400304 	movi	r5,12
    981c:	000a5900 	call	a590 <__mulsi3>
    9820:	10800104 	addi	r2,r2,4
    9824:	8085883a 	add	r2,r16,r2
    9828:	10c00017 	ldw	r3,0(r2)
    982c:	e0bffb17 	ldw	r2,-20(fp)
    9830:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9834:	04000074 	movhi	r16,1
    9838:	842dab04 	addi	r16,r16,-18772
    983c:	e0bffa17 	ldw	r2,-24(fp)
    9840:	1009883a 	mov	r4,r2
    9844:	01400304 	movi	r5,12
    9848:	000a5900 	call	a590 <__mulsi3>
    984c:	10800204 	addi	r2,r2,8
    9850:	8085883a 	add	r2,r16,r2
    9854:	10c00017 	ldw	r3,0(r2)
    9858:	e0bffb17 	ldw	r2,-20(fp)
    985c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9860:	e13ffa17 	ldw	r4,-24(fp)
    9864:	0009b9c0 	call	9b9c <alt_release_fd>
  }
} 
    9868:	e6ffff04 	addi	sp,fp,-4
    986c:	dfc00217 	ldw	ra,8(sp)
    9870:	df000117 	ldw	fp,4(sp)
    9874:	dc000017 	ldw	r16,0(sp)
    9878:	dec00304 	addi	sp,sp,12
    987c:	f800283a 	ret

00009880 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9880:	defffb04 	addi	sp,sp,-20
    9884:	dfc00415 	stw	ra,16(sp)
    9888:	df000315 	stw	fp,12(sp)
    988c:	df000304 	addi	fp,sp,12
    9890:	e13ffd15 	stw	r4,-12(fp)
    9894:	e17ffe15 	stw	r5,-8(fp)
    9898:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    989c:	01000074 	movhi	r4,1
    98a0:	212dae04 	addi	r4,r4,-18760
    98a4:	e17ffd17 	ldw	r5,-12(fp)
    98a8:	01800044 	movi	r6,1
    98ac:	01c07fc4 	movi	r7,511
    98b0:	00097a00 	call	97a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    98b4:	01000074 	movhi	r4,1
    98b8:	212dab04 	addi	r4,r4,-18772
    98bc:	e17ffe17 	ldw	r5,-8(fp)
    98c0:	000d883a 	mov	r6,zero
    98c4:	01c07fc4 	movi	r7,511
    98c8:	00097a00 	call	97a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    98cc:	01000074 	movhi	r4,1
    98d0:	212db104 	addi	r4,r4,-18748
    98d4:	e17fff17 	ldw	r5,-4(fp)
    98d8:	01800044 	movi	r6,1
    98dc:	01c07fc4 	movi	r7,511
    98e0:	00097a00 	call	97a0 <alt_open_fd>
}  
    98e4:	e037883a 	mov	sp,fp
    98e8:	dfc00117 	ldw	ra,4(sp)
    98ec:	df000017 	ldw	fp,0(sp)
    98f0:	dec00204 	addi	sp,sp,8
    98f4:	f800283a 	ret

000098f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    98f8:	defffe04 	addi	sp,sp,-8
    98fc:	dfc00115 	stw	ra,4(sp)
    9900:	df000015 	stw	fp,0(sp)
    9904:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9908:	00800074 	movhi	r2,1
    990c:	10af1d04 	addi	r2,r2,-17292
    9910:	10800017 	ldw	r2,0(r2)
    9914:	10000526 	beq	r2,zero,992c <alt_get_errno+0x34>
    9918:	00800074 	movhi	r2,1
    991c:	10af1d04 	addi	r2,r2,-17292
    9920:	10800017 	ldw	r2,0(r2)
    9924:	103ee83a 	callr	r2
    9928:	00000206 	br	9934 <alt_get_errno+0x3c>
    992c:	00800074 	movhi	r2,1
    9930:	10b4c604 	addi	r2,r2,-11496
}
    9934:	e037883a 	mov	sp,fp
    9938:	dfc00117 	ldw	ra,4(sp)
    993c:	df000017 	ldw	fp,0(sp)
    9940:	dec00204 	addi	sp,sp,8
    9944:	f800283a 	ret

00009948 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9948:	defffb04 	addi	sp,sp,-20
    994c:	dfc00415 	stw	ra,16(sp)
    9950:	df000315 	stw	fp,12(sp)
    9954:	dc000215 	stw	r16,8(sp)
    9958:	df000304 	addi	fp,sp,12
    995c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9960:	e0bffe17 	ldw	r2,-8(fp)
    9964:	10800217 	ldw	r2,8(r2)
    9968:	10d00034 	orhi	r3,r2,16384
    996c:	e0bffe17 	ldw	r2,-8(fp)
    9970:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9974:	e03ffd15 	stw	zero,-12(fp)
    9978:	00002306 	br	9a08 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    997c:	04000074 	movhi	r16,1
    9980:	842dab04 	addi	r16,r16,-18772
    9984:	e0bffd17 	ldw	r2,-12(fp)
    9988:	1009883a 	mov	r4,r2
    998c:	01400304 	movi	r5,12
    9990:	000a5900 	call	a590 <__mulsi3>
    9994:	8085883a 	add	r2,r16,r2
    9998:	10c00017 	ldw	r3,0(r2)
    999c:	e0bffe17 	ldw	r2,-8(fp)
    99a0:	10800017 	ldw	r2,0(r2)
    99a4:	1880151e 	bne	r3,r2,99fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    99a8:	04000074 	movhi	r16,1
    99ac:	842dab04 	addi	r16,r16,-18772
    99b0:	e0bffd17 	ldw	r2,-12(fp)
    99b4:	1009883a 	mov	r4,r2
    99b8:	01400304 	movi	r5,12
    99bc:	000a5900 	call	a590 <__mulsi3>
    99c0:	10800204 	addi	r2,r2,8
    99c4:	8085883a 	add	r2,r16,r2
    99c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    99cc:	10000b0e 	bge	r2,zero,99fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    99d0:	e13ffd17 	ldw	r4,-12(fp)
    99d4:	01400304 	movi	r5,12
    99d8:	000a5900 	call	a590 <__mulsi3>
    99dc:	1007883a 	mov	r3,r2
    99e0:	00800074 	movhi	r2,1
    99e4:	10adab04 	addi	r2,r2,-18772
    99e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    99ec:	e0bffe17 	ldw	r2,-8(fp)
    99f0:	18800226 	beq	r3,r2,99fc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    99f4:	00bffcc4 	movi	r2,-13
    99f8:	00000a06 	br	9a24 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    99fc:	e0bffd17 	ldw	r2,-12(fp)
    9a00:	10800044 	addi	r2,r2,1
    9a04:	e0bffd15 	stw	r2,-12(fp)
    9a08:	00800074 	movhi	r2,1
    9a0c:	10af1c04 	addi	r2,r2,-17296
    9a10:	10800017 	ldw	r2,0(r2)
    9a14:	1007883a 	mov	r3,r2
    9a18:	e0bffd17 	ldw	r2,-12(fp)
    9a1c:	18bfd72e 	bgeu	r3,r2,997c <_gp+0xffff5d2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9a20:	0005883a 	mov	r2,zero
}
    9a24:	e6ffff04 	addi	sp,fp,-4
    9a28:	dfc00217 	ldw	ra,8(sp)
    9a2c:	df000117 	ldw	fp,4(sp)
    9a30:	dc000017 	ldw	r16,0(sp)
    9a34:	dec00304 	addi	sp,sp,12
    9a38:	f800283a 	ret

00009a3c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9a3c:	defff604 	addi	sp,sp,-40
    9a40:	dfc00915 	stw	ra,36(sp)
    9a44:	df000815 	stw	fp,32(sp)
    9a48:	df000804 	addi	fp,sp,32
    9a4c:	e13ffd15 	stw	r4,-12(fp)
    9a50:	e17ffe15 	stw	r5,-8(fp)
    9a54:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9a58:	00bfffc4 	movi	r2,-1
    9a5c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9a60:	00bffb44 	movi	r2,-19
    9a64:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9a68:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9a6c:	e13ffd17 	ldw	r4,-12(fp)
    9a70:	01400074 	movhi	r5,1
    9a74:	296f1a04 	addi	r5,r5,-17304
    9a78:	0009dd80 	call	9dd8 <alt_find_dev>
    9a7c:	e0bff815 	stw	r2,-32(fp)
    9a80:	e0bff817 	ldw	r2,-32(fp)
    9a84:	1000051e 	bne	r2,zero,9a9c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9a88:	e13ffd17 	ldw	r4,-12(fp)
    9a8c:	0009e680 	call	9e68 <alt_find_file>
    9a90:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9a94:	00800044 	movi	r2,1
    9a98:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9a9c:	e0bff817 	ldw	r2,-32(fp)
    9aa0:	10002b26 	beq	r2,zero,9b50 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9aa4:	e13ff817 	ldw	r4,-32(fp)
    9aa8:	0009f7c0 	call	9f7c <alt_get_fd>
    9aac:	e0bff915 	stw	r2,-28(fp)
    9ab0:	e0bff917 	ldw	r2,-28(fp)
    9ab4:	1000030e 	bge	r2,zero,9ac4 <open+0x88>
    {
      status = index;
    9ab8:	e0bff917 	ldw	r2,-28(fp)
    9abc:	e0bffa15 	stw	r2,-24(fp)
    9ac0:	00002506 	br	9b58 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    9ac4:	e13ff917 	ldw	r4,-28(fp)
    9ac8:	01400304 	movi	r5,12
    9acc:	000a5900 	call	a590 <__mulsi3>
    9ad0:	1007883a 	mov	r3,r2
    9ad4:	00800074 	movhi	r2,1
    9ad8:	10adab04 	addi	r2,r2,-18772
    9adc:	1885883a 	add	r2,r3,r2
    9ae0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9ae4:	e0fffe17 	ldw	r3,-8(fp)
    9ae8:	00900034 	movhi	r2,16384
    9aec:	10bfffc4 	addi	r2,r2,-1
    9af0:	1886703a 	and	r3,r3,r2
    9af4:	e0bffc17 	ldw	r2,-16(fp)
    9af8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9afc:	e0bffb17 	ldw	r2,-20(fp)
    9b00:	1000051e 	bne	r2,zero,9b18 <open+0xdc>
    9b04:	e13ffc17 	ldw	r4,-16(fp)
    9b08:	00099480 	call	9948 <alt_file_locked>
    9b0c:	e0bffa15 	stw	r2,-24(fp)
    9b10:	e0bffa17 	ldw	r2,-24(fp)
    9b14:	10001016 	blt	r2,zero,9b58 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9b18:	e0bff817 	ldw	r2,-32(fp)
    9b1c:	10800317 	ldw	r2,12(r2)
    9b20:	10000826 	beq	r2,zero,9b44 <open+0x108>
    9b24:	e0bff817 	ldw	r2,-32(fp)
    9b28:	10800317 	ldw	r2,12(r2)
    9b2c:	e13ffc17 	ldw	r4,-16(fp)
    9b30:	e17ffd17 	ldw	r5,-12(fp)
    9b34:	e1bffe17 	ldw	r6,-8(fp)
    9b38:	e1ffff17 	ldw	r7,-4(fp)
    9b3c:	103ee83a 	callr	r2
    9b40:	00000106 	br	9b48 <open+0x10c>
    9b44:	0005883a 	mov	r2,zero
    9b48:	e0bffa15 	stw	r2,-24(fp)
    9b4c:	00000206 	br	9b58 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9b50:	00bffb44 	movi	r2,-19
    9b54:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9b58:	e0bffa17 	ldw	r2,-24(fp)
    9b5c:	1000090e 	bge	r2,zero,9b84 <open+0x148>
  {
    alt_release_fd (index);  
    9b60:	e13ff917 	ldw	r4,-28(fp)
    9b64:	0009b9c0 	call	9b9c <alt_release_fd>
    ALT_ERRNO = -status;
    9b68:	00098f80 	call	98f8 <alt_get_errno>
    9b6c:	1007883a 	mov	r3,r2
    9b70:	e0bffa17 	ldw	r2,-24(fp)
    9b74:	0085c83a 	sub	r2,zero,r2
    9b78:	18800015 	stw	r2,0(r3)
    return -1;
    9b7c:	00bfffc4 	movi	r2,-1
    9b80:	00000106 	br	9b88 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    9b84:	e0bff917 	ldw	r2,-28(fp)
}
    9b88:	e037883a 	mov	sp,fp
    9b8c:	dfc00117 	ldw	ra,4(sp)
    9b90:	df000017 	ldw	fp,0(sp)
    9b94:	dec00204 	addi	sp,sp,8
    9b98:	f800283a 	ret

00009b9c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9b9c:	defffc04 	addi	sp,sp,-16
    9ba0:	dfc00315 	stw	ra,12(sp)
    9ba4:	df000215 	stw	fp,8(sp)
    9ba8:	dc000115 	stw	r16,4(sp)
    9bac:	df000204 	addi	fp,sp,8
    9bb0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9bb4:	e0bffe17 	ldw	r2,-8(fp)
    9bb8:	108000d0 	cmplti	r2,r2,3
    9bbc:	1000111e 	bne	r2,zero,9c04 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    9bc0:	04000074 	movhi	r16,1
    9bc4:	842dab04 	addi	r16,r16,-18772
    9bc8:	e0bffe17 	ldw	r2,-8(fp)
    9bcc:	1009883a 	mov	r4,r2
    9bd0:	01400304 	movi	r5,12
    9bd4:	000a5900 	call	a590 <__mulsi3>
    9bd8:	10800204 	addi	r2,r2,8
    9bdc:	8085883a 	add	r2,r16,r2
    9be0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9be4:	04000074 	movhi	r16,1
    9be8:	842dab04 	addi	r16,r16,-18772
    9bec:	e0bffe17 	ldw	r2,-8(fp)
    9bf0:	1009883a 	mov	r4,r2
    9bf4:	01400304 	movi	r5,12
    9bf8:	000a5900 	call	a590 <__mulsi3>
    9bfc:	8085883a 	add	r2,r16,r2
    9c00:	10000015 	stw	zero,0(r2)
  }
}
    9c04:	e6ffff04 	addi	sp,fp,-4
    9c08:	dfc00217 	ldw	ra,8(sp)
    9c0c:	df000117 	ldw	fp,4(sp)
    9c10:	dc000017 	ldw	r16,0(sp)
    9c14:	dec00304 	addi	sp,sp,12
    9c18:	f800283a 	ret

00009c1c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    9c1c:	defffa04 	addi	sp,sp,-24
    9c20:	df000515 	stw	fp,20(sp)
    9c24:	df000504 	addi	fp,sp,20
    9c28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c2c:	0005303a 	rdctl	r2,status
    9c30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c34:	e0fffc17 	ldw	r3,-16(fp)
    9c38:	00bfff84 	movi	r2,-2
    9c3c:	1884703a 	and	r2,r3,r2
    9c40:	1001703a 	wrctl	status,r2
  
  return context;
    9c44:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    9c48:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    9c4c:	e0bfff17 	ldw	r2,-4(fp)
    9c50:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9c54:	e0bffd17 	ldw	r2,-12(fp)
    9c58:	10800017 	ldw	r2,0(r2)
    9c5c:	e0fffd17 	ldw	r3,-12(fp)
    9c60:	18c00117 	ldw	r3,4(r3)
    9c64:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    9c68:	e0bffd17 	ldw	r2,-12(fp)
    9c6c:	10800117 	ldw	r2,4(r2)
    9c70:	e0fffd17 	ldw	r3,-12(fp)
    9c74:	18c00017 	ldw	r3,0(r3)
    9c78:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    9c7c:	e0bffd17 	ldw	r2,-12(fp)
    9c80:	e0fffd17 	ldw	r3,-12(fp)
    9c84:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    9c88:	e0bffd17 	ldw	r2,-12(fp)
    9c8c:	e0fffd17 	ldw	r3,-12(fp)
    9c90:	10c00015 	stw	r3,0(r2)
    9c94:	e0bffb17 	ldw	r2,-20(fp)
    9c98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9c9c:	e0bffe17 	ldw	r2,-8(fp)
    9ca0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    9ca4:	e037883a 	mov	sp,fp
    9ca8:	df000017 	ldw	fp,0(sp)
    9cac:	dec00104 	addi	sp,sp,4
    9cb0:	f800283a 	ret

00009cb4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9cb4:	defffb04 	addi	sp,sp,-20
    9cb8:	dfc00415 	stw	ra,16(sp)
    9cbc:	df000315 	stw	fp,12(sp)
    9cc0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    9cc4:	d0a00a17 	ldw	r2,-32728(gp)
    9cc8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9ccc:	d0a5b117 	ldw	r2,-26940(gp)
    9cd0:	10800044 	addi	r2,r2,1
    9cd4:	d0a5b115 	stw	r2,-26940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9cd8:	00002e06 	br	9d94 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    9cdc:	e0bffd17 	ldw	r2,-12(fp)
    9ce0:	10800017 	ldw	r2,0(r2)
    9ce4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    9ce8:	e0bffd17 	ldw	r2,-12(fp)
    9cec:	10800403 	ldbu	r2,16(r2)
    9cf0:	10803fcc 	andi	r2,r2,255
    9cf4:	10000426 	beq	r2,zero,9d08 <alt_tick+0x54>
    9cf8:	d0a5b117 	ldw	r2,-26940(gp)
    9cfc:	1000021e 	bne	r2,zero,9d08 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    9d00:	e0bffd17 	ldw	r2,-12(fp)
    9d04:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    9d08:	e0bffd17 	ldw	r2,-12(fp)
    9d0c:	10800217 	ldw	r2,8(r2)
    9d10:	d0e5b117 	ldw	r3,-26940(gp)
    9d14:	18801d36 	bltu	r3,r2,9d8c <alt_tick+0xd8>
    9d18:	e0bffd17 	ldw	r2,-12(fp)
    9d1c:	10800403 	ldbu	r2,16(r2)
    9d20:	10803fcc 	andi	r2,r2,255
    9d24:	1000191e 	bne	r2,zero,9d8c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    9d28:	e0bffd17 	ldw	r2,-12(fp)
    9d2c:	10800317 	ldw	r2,12(r2)
    9d30:	e0fffd17 	ldw	r3,-12(fp)
    9d34:	18c00517 	ldw	r3,20(r3)
    9d38:	1809883a 	mov	r4,r3
    9d3c:	103ee83a 	callr	r2
    9d40:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    9d44:	e0bfff17 	ldw	r2,-4(fp)
    9d48:	1000031e 	bne	r2,zero,9d58 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    9d4c:	e13ffd17 	ldw	r4,-12(fp)
    9d50:	0009c1c0 	call	9c1c <alt_alarm_stop>
    9d54:	00000d06 	br	9d8c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    9d58:	e0bffd17 	ldw	r2,-12(fp)
    9d5c:	10c00217 	ldw	r3,8(r2)
    9d60:	e0bfff17 	ldw	r2,-4(fp)
    9d64:	1887883a 	add	r3,r3,r2
    9d68:	e0bffd17 	ldw	r2,-12(fp)
    9d6c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    9d70:	e0bffd17 	ldw	r2,-12(fp)
    9d74:	10c00217 	ldw	r3,8(r2)
    9d78:	d0a5b117 	ldw	r2,-26940(gp)
    9d7c:	1880032e 	bgeu	r3,r2,9d8c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    9d80:	e0bffd17 	ldw	r2,-12(fp)
    9d84:	00c00044 	movi	r3,1
    9d88:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    9d8c:	e0bffe17 	ldw	r2,-8(fp)
    9d90:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9d94:	e0fffd17 	ldw	r3,-12(fp)
    9d98:	d0a00a04 	addi	r2,gp,-32728
    9d9c:	18bfcf1e 	bne	r3,r2,9cdc <_gp+0xffff608c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    9da0:	0001883a 	nop
}
    9da4:	e037883a 	mov	sp,fp
    9da8:	dfc00117 	ldw	ra,4(sp)
    9dac:	df000017 	ldw	fp,0(sp)
    9db0:	dec00204 	addi	sp,sp,8
    9db4:	f800283a 	ret

00009db8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9db8:	deffff04 	addi	sp,sp,-4
    9dbc:	df000015 	stw	fp,0(sp)
    9dc0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9dc4:	000170fa 	wrctl	ienable,zero
}
    9dc8:	e037883a 	mov	sp,fp
    9dcc:	df000017 	ldw	fp,0(sp)
    9dd0:	dec00104 	addi	sp,sp,4
    9dd4:	f800283a 	ret

00009dd8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9dd8:	defffa04 	addi	sp,sp,-24
    9ddc:	dfc00515 	stw	ra,20(sp)
    9de0:	df000415 	stw	fp,16(sp)
    9de4:	df000404 	addi	fp,sp,16
    9de8:	e13ffe15 	stw	r4,-8(fp)
    9dec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9df0:	e0bfff17 	ldw	r2,-4(fp)
    9df4:	10800017 	ldw	r2,0(r2)
    9df8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9dfc:	e13ffe17 	ldw	r4,-8(fp)
    9e00:	000a2500 	call	a250 <strlen>
    9e04:	10800044 	addi	r2,r2,1
    9e08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e0c:	00000d06 	br	9e44 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9e10:	e0bffc17 	ldw	r2,-16(fp)
    9e14:	10c00217 	ldw	r3,8(r2)
    9e18:	e0bffd17 	ldw	r2,-12(fp)
    9e1c:	1809883a 	mov	r4,r3
    9e20:	e17ffe17 	ldw	r5,-8(fp)
    9e24:	100d883a 	mov	r6,r2
    9e28:	000a09c0 	call	a09c <memcmp>
    9e2c:	1000021e 	bne	r2,zero,9e38 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9e30:	e0bffc17 	ldw	r2,-16(fp)
    9e34:	00000706 	br	9e54 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9e38:	e0bffc17 	ldw	r2,-16(fp)
    9e3c:	10800017 	ldw	r2,0(r2)
    9e40:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9e44:	e0fffc17 	ldw	r3,-16(fp)
    9e48:	e0bfff17 	ldw	r2,-4(fp)
    9e4c:	18bff01e 	bne	r3,r2,9e10 <_gp+0xffff61c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9e50:	0005883a 	mov	r2,zero
}
    9e54:	e037883a 	mov	sp,fp
    9e58:	dfc00117 	ldw	ra,4(sp)
    9e5c:	df000017 	ldw	fp,0(sp)
    9e60:	dec00204 	addi	sp,sp,8
    9e64:	f800283a 	ret

00009e68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9e68:	defffb04 	addi	sp,sp,-20
    9e6c:	dfc00415 	stw	ra,16(sp)
    9e70:	df000315 	stw	fp,12(sp)
    9e74:	df000304 	addi	fp,sp,12
    9e78:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9e7c:	00800074 	movhi	r2,1
    9e80:	10af1804 	addi	r2,r2,-17312
    9e84:	10800017 	ldw	r2,0(r2)
    9e88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9e8c:	00003106 	br	9f54 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    9e90:	e0bffd17 	ldw	r2,-12(fp)
    9e94:	10800217 	ldw	r2,8(r2)
    9e98:	1009883a 	mov	r4,r2
    9e9c:	000a2500 	call	a250 <strlen>
    9ea0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9ea4:	e0bffd17 	ldw	r2,-12(fp)
    9ea8:	10c00217 	ldw	r3,8(r2)
    9eac:	e0bffe17 	ldw	r2,-8(fp)
    9eb0:	10bfffc4 	addi	r2,r2,-1
    9eb4:	1885883a 	add	r2,r3,r2
    9eb8:	10800003 	ldbu	r2,0(r2)
    9ebc:	10803fcc 	andi	r2,r2,255
    9ec0:	1080201c 	xori	r2,r2,128
    9ec4:	10bfe004 	addi	r2,r2,-128
    9ec8:	10800bd8 	cmpnei	r2,r2,47
    9ecc:	1000031e 	bne	r2,zero,9edc <alt_find_file+0x74>
    {
      len -= 1;
    9ed0:	e0bffe17 	ldw	r2,-8(fp)
    9ed4:	10bfffc4 	addi	r2,r2,-1
    9ed8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9edc:	e0bffe17 	ldw	r2,-8(fp)
    9ee0:	e0ffff17 	ldw	r3,-4(fp)
    9ee4:	1885883a 	add	r2,r3,r2
    9ee8:	10800003 	ldbu	r2,0(r2)
    9eec:	10803fcc 	andi	r2,r2,255
    9ef0:	1080201c 	xori	r2,r2,128
    9ef4:	10bfe004 	addi	r2,r2,-128
    9ef8:	10800be0 	cmpeqi	r2,r2,47
    9efc:	1000081e 	bne	r2,zero,9f20 <alt_find_file+0xb8>
    9f00:	e0bffe17 	ldw	r2,-8(fp)
    9f04:	e0ffff17 	ldw	r3,-4(fp)
    9f08:	1885883a 	add	r2,r3,r2
    9f0c:	10800003 	ldbu	r2,0(r2)
    9f10:	10803fcc 	andi	r2,r2,255
    9f14:	1080201c 	xori	r2,r2,128
    9f18:	10bfe004 	addi	r2,r2,-128
    9f1c:	10000a1e 	bne	r2,zero,9f48 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    9f20:	e0bffd17 	ldw	r2,-12(fp)
    9f24:	10c00217 	ldw	r3,8(r2)
    9f28:	e0bffe17 	ldw	r2,-8(fp)
    9f2c:	1809883a 	mov	r4,r3
    9f30:	e17fff17 	ldw	r5,-4(fp)
    9f34:	100d883a 	mov	r6,r2
    9f38:	000a09c0 	call	a09c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9f3c:	1000021e 	bne	r2,zero,9f48 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9f40:	e0bffd17 	ldw	r2,-12(fp)
    9f44:	00000806 	br	9f68 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    9f48:	e0bffd17 	ldw	r2,-12(fp)
    9f4c:	10800017 	ldw	r2,0(r2)
    9f50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9f54:	e0fffd17 	ldw	r3,-12(fp)
    9f58:	00800074 	movhi	r2,1
    9f5c:	10af1804 	addi	r2,r2,-17312
    9f60:	18bfcb1e 	bne	r3,r2,9e90 <_gp+0xffff6240>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9f64:	0005883a 	mov	r2,zero
}
    9f68:	e037883a 	mov	sp,fp
    9f6c:	dfc00117 	ldw	ra,4(sp)
    9f70:	df000017 	ldw	fp,0(sp)
    9f74:	dec00204 	addi	sp,sp,8
    9f78:	f800283a 	ret

00009f7c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9f7c:	defffa04 	addi	sp,sp,-24
    9f80:	dfc00515 	stw	ra,20(sp)
    9f84:	df000415 	stw	fp,16(sp)
    9f88:	dc000315 	stw	r16,12(sp)
    9f8c:	df000404 	addi	fp,sp,16
    9f90:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    9f94:	00bffa04 	movi	r2,-24
    9f98:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9f9c:	e03ffc15 	stw	zero,-16(fp)
    9fa0:	00002106 	br	a028 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    9fa4:	04000074 	movhi	r16,1
    9fa8:	842dab04 	addi	r16,r16,-18772
    9fac:	e0bffc17 	ldw	r2,-16(fp)
    9fb0:	1009883a 	mov	r4,r2
    9fb4:	01400304 	movi	r5,12
    9fb8:	000a5900 	call	a590 <__mulsi3>
    9fbc:	8085883a 	add	r2,r16,r2
    9fc0:	10800017 	ldw	r2,0(r2)
    9fc4:	1000151e 	bne	r2,zero,a01c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    9fc8:	04000074 	movhi	r16,1
    9fcc:	842dab04 	addi	r16,r16,-18772
    9fd0:	e0bffc17 	ldw	r2,-16(fp)
    9fd4:	1009883a 	mov	r4,r2
    9fd8:	01400304 	movi	r5,12
    9fdc:	000a5900 	call	a590 <__mulsi3>
    9fe0:	8085883a 	add	r2,r16,r2
    9fe4:	e0fffe17 	ldw	r3,-8(fp)
    9fe8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9fec:	00800074 	movhi	r2,1
    9ff0:	10af1c04 	addi	r2,r2,-17296
    9ff4:	10c00017 	ldw	r3,0(r2)
    9ff8:	e0bffc17 	ldw	r2,-16(fp)
    9ffc:	1880040e 	bge	r3,r2,a010 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    a000:	00800074 	movhi	r2,1
    a004:	10af1c04 	addi	r2,r2,-17296
    a008:	e0fffc17 	ldw	r3,-16(fp)
    a00c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    a010:	e0bffc17 	ldw	r2,-16(fp)
    a014:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a018:	00000606 	br	a034 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a01c:	e0bffc17 	ldw	r2,-16(fp)
    a020:	10800044 	addi	r2,r2,1
    a024:	e0bffc15 	stw	r2,-16(fp)
    a028:	e0bffc17 	ldw	r2,-16(fp)
    a02c:	10800810 	cmplti	r2,r2,32
    a030:	103fdc1e 	bne	r2,zero,9fa4 <_gp+0xffff6354>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a034:	e0bffd17 	ldw	r2,-12(fp)
}
    a038:	e6ffff04 	addi	sp,fp,-4
    a03c:	dfc00217 	ldw	ra,8(sp)
    a040:	df000117 	ldw	fp,4(sp)
    a044:	dc000017 	ldw	r16,0(sp)
    a048:	dec00304 	addi	sp,sp,12
    a04c:	f800283a 	ret

0000a050 <atexit>:
    a050:	200b883a 	mov	r5,r4
    a054:	000d883a 	mov	r6,zero
    a058:	0009883a 	mov	r4,zero
    a05c:	000f883a 	mov	r7,zero
    a060:	000a2e81 	jmpi	a2e8 <__register_exitproc>

0000a064 <exit>:
    a064:	defffe04 	addi	sp,sp,-8
    a068:	000b883a 	mov	r5,zero
    a06c:	dc000015 	stw	r16,0(sp)
    a070:	dfc00115 	stw	ra,4(sp)
    a074:	2021883a 	mov	r16,r4
    a078:	000a3fc0 	call	a3fc <__call_exitprocs>
    a07c:	00800074 	movhi	r2,1
    a080:	10af2004 	addi	r2,r2,-17280
    a084:	11000017 	ldw	r4,0(r2)
    a088:	20800f17 	ldw	r2,60(r4)
    a08c:	10000126 	beq	r2,zero,a094 <exit+0x30>
    a090:	103ee83a 	callr	r2
    a094:	8009883a 	mov	r4,r16
    a098:	000a5b80 	call	a5b8 <_exit>

0000a09c <memcmp>:
    a09c:	01c000c4 	movi	r7,3
    a0a0:	3980192e 	bgeu	r7,r6,a108 <memcmp+0x6c>
    a0a4:	2144b03a 	or	r2,r4,r5
    a0a8:	11c4703a 	and	r2,r2,r7
    a0ac:	10000f26 	beq	r2,zero,a0ec <memcmp+0x50>
    a0b0:	20800003 	ldbu	r2,0(r4)
    a0b4:	28c00003 	ldbu	r3,0(r5)
    a0b8:	10c0151e 	bne	r2,r3,a110 <memcmp+0x74>
    a0bc:	31bfff84 	addi	r6,r6,-2
    a0c0:	01ffffc4 	movi	r7,-1
    a0c4:	00000406 	br	a0d8 <memcmp+0x3c>
    a0c8:	20800003 	ldbu	r2,0(r4)
    a0cc:	28c00003 	ldbu	r3,0(r5)
    a0d0:	31bfffc4 	addi	r6,r6,-1
    a0d4:	10c00e1e 	bne	r2,r3,a110 <memcmp+0x74>
    a0d8:	21000044 	addi	r4,r4,1
    a0dc:	29400044 	addi	r5,r5,1
    a0e0:	31fff91e 	bne	r6,r7,a0c8 <_gp+0xffff6478>
    a0e4:	0005883a 	mov	r2,zero
    a0e8:	f800283a 	ret
    a0ec:	20c00017 	ldw	r3,0(r4)
    a0f0:	28800017 	ldw	r2,0(r5)
    a0f4:	1880041e 	bne	r3,r2,a108 <memcmp+0x6c>
    a0f8:	31bfff04 	addi	r6,r6,-4
    a0fc:	21000104 	addi	r4,r4,4
    a100:	29400104 	addi	r5,r5,4
    a104:	39bff936 	bltu	r7,r6,a0ec <_gp+0xffff649c>
    a108:	303fe91e 	bne	r6,zero,a0b0 <_gp+0xffff6460>
    a10c:	003ff506 	br	a0e4 <_gp+0xffff6494>
    a110:	10c5c83a 	sub	r2,r2,r3
    a114:	f800283a 	ret

0000a118 <memcpy>:
    a118:	deffff04 	addi	sp,sp,-4
    a11c:	dc000015 	stw	r16,0(sp)
    a120:	00c003c4 	movi	r3,15
    a124:	2005883a 	mov	r2,r4
    a128:	1980432e 	bgeu	r3,r6,a238 <memcpy+0x120>
    a12c:	2146b03a 	or	r3,r4,r5
    a130:	18c000cc 	andi	r3,r3,3
    a134:	1800421e 	bne	r3,zero,a240 <memcpy+0x128>
    a138:	343ffc04 	addi	r16,r6,-16
    a13c:	8020d13a 	srli	r16,r16,4
    a140:	28c00104 	addi	r3,r5,4
    a144:	23400104 	addi	r13,r4,4
    a148:	801e913a 	slli	r15,r16,4
    a14c:	2b000204 	addi	r12,r5,8
    a150:	22c00204 	addi	r11,r4,8
    a154:	7bc00504 	addi	r15,r15,20
    a158:	2a800304 	addi	r10,r5,12
    a15c:	22400304 	addi	r9,r4,12
    a160:	2bdf883a 	add	r15,r5,r15
    a164:	2811883a 	mov	r8,r5
    a168:	200f883a 	mov	r7,r4
    a16c:	41000017 	ldw	r4,0(r8)
    a170:	39c00404 	addi	r7,r7,16
    a174:	18c00404 	addi	r3,r3,16
    a178:	393ffc15 	stw	r4,-16(r7)
    a17c:	1bbffc17 	ldw	r14,-16(r3)
    a180:	6b400404 	addi	r13,r13,16
    a184:	5ac00404 	addi	r11,r11,16
    a188:	6bbffc15 	stw	r14,-16(r13)
    a18c:	63800017 	ldw	r14,0(r12)
    a190:	4a400404 	addi	r9,r9,16
    a194:	42000404 	addi	r8,r8,16
    a198:	5bbffc15 	stw	r14,-16(r11)
    a19c:	53800017 	ldw	r14,0(r10)
    a1a0:	63000404 	addi	r12,r12,16
    a1a4:	52800404 	addi	r10,r10,16
    a1a8:	4bbffc15 	stw	r14,-16(r9)
    a1ac:	1bffef1e 	bne	r3,r15,a16c <_gp+0xffff651c>
    a1b0:	81c00044 	addi	r7,r16,1
    a1b4:	380e913a 	slli	r7,r7,4
    a1b8:	310003cc 	andi	r4,r6,15
    a1bc:	02c000c4 	movi	r11,3
    a1c0:	11c7883a 	add	r3,r2,r7
    a1c4:	29cb883a 	add	r5,r5,r7
    a1c8:	59001f2e 	bgeu	r11,r4,a248 <memcpy+0x130>
    a1cc:	1813883a 	mov	r9,r3
    a1d0:	2811883a 	mov	r8,r5
    a1d4:	200f883a 	mov	r7,r4
    a1d8:	42800017 	ldw	r10,0(r8)
    a1dc:	4a400104 	addi	r9,r9,4
    a1e0:	39ffff04 	addi	r7,r7,-4
    a1e4:	4abfff15 	stw	r10,-4(r9)
    a1e8:	42000104 	addi	r8,r8,4
    a1ec:	59fffa36 	bltu	r11,r7,a1d8 <_gp+0xffff6588>
    a1f0:	213fff04 	addi	r4,r4,-4
    a1f4:	2008d0ba 	srli	r4,r4,2
    a1f8:	318000cc 	andi	r6,r6,3
    a1fc:	21000044 	addi	r4,r4,1
    a200:	2109883a 	add	r4,r4,r4
    a204:	2109883a 	add	r4,r4,r4
    a208:	1907883a 	add	r3,r3,r4
    a20c:	290b883a 	add	r5,r5,r4
    a210:	30000626 	beq	r6,zero,a22c <memcpy+0x114>
    a214:	198d883a 	add	r6,r3,r6
    a218:	29c00003 	ldbu	r7,0(r5)
    a21c:	18c00044 	addi	r3,r3,1
    a220:	29400044 	addi	r5,r5,1
    a224:	19ffffc5 	stb	r7,-1(r3)
    a228:	19bffb1e 	bne	r3,r6,a218 <_gp+0xffff65c8>
    a22c:	dc000017 	ldw	r16,0(sp)
    a230:	dec00104 	addi	sp,sp,4
    a234:	f800283a 	ret
    a238:	2007883a 	mov	r3,r4
    a23c:	003ff406 	br	a210 <_gp+0xffff65c0>
    a240:	2007883a 	mov	r3,r4
    a244:	003ff306 	br	a214 <_gp+0xffff65c4>
    a248:	200d883a 	mov	r6,r4
    a24c:	003ff006 	br	a210 <_gp+0xffff65c0>

0000a250 <strlen>:
    a250:	208000cc 	andi	r2,r4,3
    a254:	10002026 	beq	r2,zero,a2d8 <strlen+0x88>
    a258:	20800007 	ldb	r2,0(r4)
    a25c:	10002026 	beq	r2,zero,a2e0 <strlen+0x90>
    a260:	2005883a 	mov	r2,r4
    a264:	00000206 	br	a270 <strlen+0x20>
    a268:	10c00007 	ldb	r3,0(r2)
    a26c:	18001826 	beq	r3,zero,a2d0 <strlen+0x80>
    a270:	10800044 	addi	r2,r2,1
    a274:	10c000cc 	andi	r3,r2,3
    a278:	183ffb1e 	bne	r3,zero,a268 <_gp+0xffff6618>
    a27c:	10c00017 	ldw	r3,0(r2)
    a280:	01ffbff4 	movhi	r7,65279
    a284:	39ffbfc4 	addi	r7,r7,-257
    a288:	00ca303a 	nor	r5,zero,r3
    a28c:	01a02074 	movhi	r6,32897
    a290:	19c7883a 	add	r3,r3,r7
    a294:	31a02004 	addi	r6,r6,-32640
    a298:	1946703a 	and	r3,r3,r5
    a29c:	1986703a 	and	r3,r3,r6
    a2a0:	1800091e 	bne	r3,zero,a2c8 <strlen+0x78>
    a2a4:	10800104 	addi	r2,r2,4
    a2a8:	10c00017 	ldw	r3,0(r2)
    a2ac:	19cb883a 	add	r5,r3,r7
    a2b0:	00c6303a 	nor	r3,zero,r3
    a2b4:	28c6703a 	and	r3,r5,r3
    a2b8:	1986703a 	and	r3,r3,r6
    a2bc:	183ff926 	beq	r3,zero,a2a4 <_gp+0xffff6654>
    a2c0:	00000106 	br	a2c8 <strlen+0x78>
    a2c4:	10800044 	addi	r2,r2,1
    a2c8:	10c00007 	ldb	r3,0(r2)
    a2cc:	183ffd1e 	bne	r3,zero,a2c4 <_gp+0xffff6674>
    a2d0:	1105c83a 	sub	r2,r2,r4
    a2d4:	f800283a 	ret
    a2d8:	2005883a 	mov	r2,r4
    a2dc:	003fe706 	br	a27c <_gp+0xffff662c>
    a2e0:	0005883a 	mov	r2,zero
    a2e4:	f800283a 	ret

0000a2e8 <__register_exitproc>:
    a2e8:	00800074 	movhi	r2,1
    a2ec:	defffa04 	addi	sp,sp,-24
    a2f0:	10af2004 	addi	r2,r2,-17280
    a2f4:	dc000315 	stw	r16,12(sp)
    a2f8:	14000017 	ldw	r16,0(r2)
    a2fc:	dc400415 	stw	r17,16(sp)
    a300:	dfc00515 	stw	ra,20(sp)
    a304:	80805217 	ldw	r2,328(r16)
    a308:	2023883a 	mov	r17,r4
    a30c:	10003626 	beq	r2,zero,a3e8 <__register_exitproc+0x100>
    a310:	10c00117 	ldw	r3,4(r2)
    a314:	010007c4 	movi	r4,31
    a318:	20c00e16 	blt	r4,r3,a354 <__register_exitproc+0x6c>
    a31c:	1a400044 	addi	r9,r3,1
    a320:	8800211e 	bne	r17,zero,a3a8 <__register_exitproc+0xc0>
    a324:	18c00084 	addi	r3,r3,2
    a328:	18c7883a 	add	r3,r3,r3
    a32c:	18c7883a 	add	r3,r3,r3
    a330:	12400115 	stw	r9,4(r2)
    a334:	10c7883a 	add	r3,r2,r3
    a338:	19400015 	stw	r5,0(r3)
    a33c:	0005883a 	mov	r2,zero
    a340:	dfc00517 	ldw	ra,20(sp)
    a344:	dc400417 	ldw	r17,16(sp)
    a348:	dc000317 	ldw	r16,12(sp)
    a34c:	dec00604 	addi	sp,sp,24
    a350:	f800283a 	ret
    a354:	00800034 	movhi	r2,0
    a358:	10800004 	addi	r2,r2,0
    a35c:	10002526 	beq	r2,zero,a3f4 <__register_exitproc+0x10c>
    a360:	01006404 	movi	r4,400
    a364:	d9400015 	stw	r5,0(sp)
    a368:	d9800115 	stw	r6,4(sp)
    a36c:	d9c00215 	stw	r7,8(sp)
    a370:	00000000 	call	0 <__reset-0x8000>
    a374:	d9400017 	ldw	r5,0(sp)
    a378:	d9800117 	ldw	r6,4(sp)
    a37c:	d9c00217 	ldw	r7,8(sp)
    a380:	10001c26 	beq	r2,zero,a3f4 <__register_exitproc+0x10c>
    a384:	80c05217 	ldw	r3,328(r16)
    a388:	10000115 	stw	zero,4(r2)
    a38c:	02400044 	movi	r9,1
    a390:	10c00015 	stw	r3,0(r2)
    a394:	80805215 	stw	r2,328(r16)
    a398:	10006215 	stw	zero,392(r2)
    a39c:	10006315 	stw	zero,396(r2)
    a3a0:	0007883a 	mov	r3,zero
    a3a4:	883fdf26 	beq	r17,zero,a324 <_gp+0xffff66d4>
    a3a8:	18d1883a 	add	r8,r3,r3
    a3ac:	4211883a 	add	r8,r8,r8
    a3b0:	1211883a 	add	r8,r2,r8
    a3b4:	41802215 	stw	r6,136(r8)
    a3b8:	01000044 	movi	r4,1
    a3bc:	11806217 	ldw	r6,392(r2)
    a3c0:	20c8983a 	sll	r4,r4,r3
    a3c4:	310cb03a 	or	r6,r6,r4
    a3c8:	11806215 	stw	r6,392(r2)
    a3cc:	41c04215 	stw	r7,264(r8)
    a3d0:	01800084 	movi	r6,2
    a3d4:	89bfd31e 	bne	r17,r6,a324 <_gp+0xffff66d4>
    a3d8:	11806317 	ldw	r6,396(r2)
    a3dc:	3108b03a 	or	r4,r6,r4
    a3e0:	11006315 	stw	r4,396(r2)
    a3e4:	003fcf06 	br	a324 <_gp+0xffff66d4>
    a3e8:	80805304 	addi	r2,r16,332
    a3ec:	80805215 	stw	r2,328(r16)
    a3f0:	003fc706 	br	a310 <_gp+0xffff66c0>
    a3f4:	00bfffc4 	movi	r2,-1
    a3f8:	003fd106 	br	a340 <_gp+0xffff66f0>

0000a3fc <__call_exitprocs>:
    a3fc:	00800074 	movhi	r2,1
    a400:	10af2004 	addi	r2,r2,-17280
    a404:	10800017 	ldw	r2,0(r2)
    a408:	defff404 	addi	sp,sp,-48
    a40c:	dd800815 	stw	r22,32(sp)
    a410:	d8800015 	stw	r2,0(sp)
    a414:	10805204 	addi	r2,r2,328
    a418:	dd000615 	stw	r20,24(sp)
    a41c:	dc800415 	stw	r18,16(sp)
    a420:	dfc00b15 	stw	ra,44(sp)
    a424:	df000a15 	stw	fp,40(sp)
    a428:	ddc00915 	stw	r23,36(sp)
    a42c:	dd400715 	stw	r21,28(sp)
    a430:	dcc00515 	stw	r19,20(sp)
    a434:	dc400315 	stw	r17,12(sp)
    a438:	dc000215 	stw	r16,8(sp)
    a43c:	2025883a 	mov	r18,r4
    a440:	2829883a 	mov	r20,r5
    a444:	d8800115 	stw	r2,4(sp)
    a448:	05bfffc4 	movi	r22,-1
    a44c:	d8800017 	ldw	r2,0(sp)
    a450:	14c05217 	ldw	r19,328(r2)
    a454:	98001d26 	beq	r19,zero,a4cc <__call_exitprocs+0xd0>
    a458:	dd400117 	ldw	r21,4(sp)
    a45c:	98800117 	ldw	r2,4(r19)
    a460:	173fffc4 	addi	fp,r2,-1
    a464:	e0000d16 	blt	fp,zero,a49c <__call_exitprocs+0xa0>
    a468:	14000044 	addi	r16,r2,1
    a46c:	8421883a 	add	r16,r16,r16
    a470:	8421883a 	add	r16,r16,r16
    a474:	84402004 	addi	r17,r16,128
    a478:	9c63883a 	add	r17,r19,r17
    a47c:	9c21883a 	add	r16,r19,r16
    a480:	a0001e26 	beq	r20,zero,a4fc <__call_exitprocs+0x100>
    a484:	80804017 	ldw	r2,256(r16)
    a488:	15001c26 	beq	r2,r20,a4fc <__call_exitprocs+0x100>
    a48c:	e73fffc4 	addi	fp,fp,-1
    a490:	843fff04 	addi	r16,r16,-4
    a494:	8c7fff04 	addi	r17,r17,-4
    a498:	e5bff91e 	bne	fp,r22,a480 <_gp+0xffff6830>
    a49c:	00800034 	movhi	r2,0
    a4a0:	10800004 	addi	r2,r2,0
    a4a4:	10000926 	beq	r2,zero,a4cc <__call_exitprocs+0xd0>
    a4a8:	98800117 	ldw	r2,4(r19)
    a4ac:	1000311e 	bne	r2,zero,a574 <__call_exitprocs+0x178>
    a4b0:	98800017 	ldw	r2,0(r19)
    a4b4:	10003426 	beq	r2,zero,a588 <__call_exitprocs+0x18c>
    a4b8:	9809883a 	mov	r4,r19
    a4bc:	a8800015 	stw	r2,0(r21)
    a4c0:	00000000 	call	0 <__reset-0x8000>
    a4c4:	acc00017 	ldw	r19,0(r21)
    a4c8:	983fe41e 	bne	r19,zero,a45c <_gp+0xffff680c>
    a4cc:	dfc00b17 	ldw	ra,44(sp)
    a4d0:	df000a17 	ldw	fp,40(sp)
    a4d4:	ddc00917 	ldw	r23,36(sp)
    a4d8:	dd800817 	ldw	r22,32(sp)
    a4dc:	dd400717 	ldw	r21,28(sp)
    a4e0:	dd000617 	ldw	r20,24(sp)
    a4e4:	dcc00517 	ldw	r19,20(sp)
    a4e8:	dc800417 	ldw	r18,16(sp)
    a4ec:	dc400317 	ldw	r17,12(sp)
    a4f0:	dc000217 	ldw	r16,8(sp)
    a4f4:	dec00c04 	addi	sp,sp,48
    a4f8:	f800283a 	ret
    a4fc:	98800117 	ldw	r2,4(r19)
    a500:	80c00017 	ldw	r3,0(r16)
    a504:	10bfffc4 	addi	r2,r2,-1
    a508:	17001526 	beq	r2,fp,a560 <__call_exitprocs+0x164>
    a50c:	80000015 	stw	zero,0(r16)
    a510:	183fde26 	beq	r3,zero,a48c <_gp+0xffff683c>
    a514:	00800044 	movi	r2,1
    a518:	1708983a 	sll	r4,r2,fp
    a51c:	98806217 	ldw	r2,392(r19)
    a520:	9dc00117 	ldw	r23,4(r19)
    a524:	2084703a 	and	r2,r4,r2
    a528:	1000061e 	bne	r2,zero,a544 <__call_exitprocs+0x148>
    a52c:	183ee83a 	callr	r3
    a530:	98800117 	ldw	r2,4(r19)
    a534:	15ffc51e 	bne	r2,r23,a44c <_gp+0xffff67fc>
    a538:	a8800017 	ldw	r2,0(r21)
    a53c:	14ffd326 	beq	r2,r19,a48c <_gp+0xffff683c>
    a540:	003fc206 	br	a44c <_gp+0xffff67fc>
    a544:	98806317 	ldw	r2,396(r19)
    a548:	2084703a 	and	r2,r4,r2
    a54c:	1000061e 	bne	r2,zero,a568 <__call_exitprocs+0x16c>
    a550:	89400017 	ldw	r5,0(r17)
    a554:	9009883a 	mov	r4,r18
    a558:	183ee83a 	callr	r3
    a55c:	003ff406 	br	a530 <_gp+0xffff68e0>
    a560:	9f000115 	stw	fp,4(r19)
    a564:	003fea06 	br	a510 <_gp+0xffff68c0>
    a568:	89000017 	ldw	r4,0(r17)
    a56c:	183ee83a 	callr	r3
    a570:	003fef06 	br	a530 <_gp+0xffff68e0>
    a574:	98800017 	ldw	r2,0(r19)
    a578:	982b883a 	mov	r21,r19
    a57c:	1027883a 	mov	r19,r2
    a580:	983fb61e 	bne	r19,zero,a45c <_gp+0xffff680c>
    a584:	003fd106 	br	a4cc <_gp+0xffff687c>
    a588:	0005883a 	mov	r2,zero
    a58c:	003ffa06 	br	a578 <_gp+0xffff6928>

0000a590 <__mulsi3>:
    a590:	0005883a 	mov	r2,zero
    a594:	20000726 	beq	r4,zero,a5b4 <__mulsi3+0x24>
    a598:	20c0004c 	andi	r3,r4,1
    a59c:	2008d07a 	srli	r4,r4,1
    a5a0:	18000126 	beq	r3,zero,a5a8 <__mulsi3+0x18>
    a5a4:	1145883a 	add	r2,r2,r5
    a5a8:	294b883a 	add	r5,r5,r5
    a5ac:	203ffa1e 	bne	r4,zero,a598 <_gp+0xffff6948>
    a5b0:	f800283a 	ret
    a5b4:	f800283a 	ret

0000a5b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a5b8:	defffd04 	addi	sp,sp,-12
    a5bc:	df000215 	stw	fp,8(sp)
    a5c0:	df000204 	addi	fp,sp,8
    a5c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a5c8:	0001883a 	nop
    a5cc:	e0bfff17 	ldw	r2,-4(fp)
    a5d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a5d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a5d8:	10000226 	beq	r2,zero,a5e4 <_exit+0x2c>
    ALT_SIM_FAIL();
    a5dc:	002af070 	cmpltui	zero,zero,43969
    a5e0:	00000106 	br	a5e8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a5e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a5e8:	003fff06 	br	a5e8 <_gp+0xffff6998>
