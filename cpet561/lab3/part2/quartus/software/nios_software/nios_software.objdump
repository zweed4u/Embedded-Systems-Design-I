
nios_software.elf:     file format elf32-littlenios2
nios_software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0001022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00003674 memsz 0x00003674 flags r-x
    LOAD off    0x00004694 vaddr 0x00013694 paddr 0x00014cf4 align 2**12
         filesz 0x00001660 memsz 0x00001660 flags rw-
    LOAD off    0x00006354 vaddr 0x00016354 paddr 0x00016354 align 2**12
         filesz 0x00000000 memsz 0x00000144 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003330  0001022c  0001022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  0001355c  0001355c  0000455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001660  00013694  00014cf4  00004694  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000144  00016354  00016354  00006354  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00016498  00016498  00005cf4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005cf4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006b8  00000000  00000000  00005d18  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a105  00000000  00000000  000063d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000342a  00000000  00000000  000104d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003401  00000000  00000000  000138ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000e0c  00000000  00000000  00016d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000020b8  00000000  00000000  00017b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001e56  00000000  00000000  00019bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001ba1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002e8  00000000  00000000  0001ba30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001dc51  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001dc54  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001dc60  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001dc61  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001dc62  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001dc66  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001dc6a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001dc6e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001dc79  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001dc84  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001dc8f  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004f  00000000  00000000  0001dc9a  2**0
                  CONTENTS, READONLY
 29 .jdi          00004237  00000000  00000000  0001dce9  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000426db  00000000  00000000  00021f20  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
0001022c l    d  .text	00000000 .text
0001355c l    d  .rodata	00000000 .rodata
00013694 l    d  .rwdata	00000000 .rwdata
00016354 l    d  .bss	00000000 .bss
00016498 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_software_bsp//obj/HAL/src/crt0.o
00010264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 new_main.c
00016358 l     O .bss	00000004 sKey1Pressed
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010744 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
00013694 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00010fac l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000112a4 l     F .text	00000038 alt_dev_reg
00013ab8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00011580 l     F .text	00000204 altera_avalon_jtag_uart_irq
00011784 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00011ee4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012028 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00012054 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000122b8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00012410 l     F .text	00000050 alt_get_errno
00012460 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00016394 g     O .bss	00000004 alt_instruction_exception_handler
00011090 g     F .text	00000078 alt_main
00016398 g     O .bss	00000100 alt_irq
00014cf4 g       *ABS*	00000000 __flash_rwdata_start
0001093c g     F .text	00000058 _gettimeofday_r
00014cc4 g     O .rwdata	00000004 ledBase_ptr
00010394 g     F .text	00000070 writeByteToRAM
00012734 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00016368 g     O .bss	00000004 errno
0001052c g     F .text	000000bc ramTestByte
00016384 g     O .bss	00000004 alt_argv
0001ccc0 g       *ABS*	00000000 _gp
00014b40 g     O .rwdata	00000180 alt_fd_list
00012754 g     F .text	00000090 alt_find_dev
00012a94 g     F .text	00000138 memcpy
00012398 g     F .text	00000078 alt_io_redirect
0001355c g       *ABS*	00000000 __DTOR_END__
00016364 g     O .bss	00000004 ramBaseHalfWord_ptr
0001221c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00011980 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010860 g     F .text	00000008 .hidden __udivsi3
0001636c g     O .bss	00000008 alt_timezone
00014cec g     O .rwdata	00000004 alt_max_fd
00012f0c g     F .text	0000061c .hidden __umoddi3
00014cc8 g     O .rwdata	00000004 _global_impure_ptr
00016498 g       *ABS*	00000000 __bss_end
00010ebc g     F .text	000000f0 alt_iic_isr_register
000111a0 g     F .text	00000104 alt_tick
00010e70 g     F .text	0000004c alt_ic_irq_enabled
00011108 g     F .text	00000098 alt_alarm_stop
0001637c g     O .bss	00000004 alt_irq_active
000105e8 g     F .text	000000b4 ramTestHalfWord
000100fc g     F .exceptions	000000d0 alt_irq_handler
00014b18 g     O .rwdata	00000028 alt_dev_null
0001047c g     F .text	000000b0 ramConfidenceTest
0001200c g     F .text	0000001c alt_dcache_flush_all
00014cf4 g       *ABS*	00000000 __ram_rwdata_end
00014ce4 g     O .rwdata	00000008 alt_dev_list
00013694 g       *ABS*	00000000 __ram_rodata_end
00010868 g     F .text	00000008 .hidden __umodsi3
00016498 g       *ABS*	00000000 end
000114bc g     F .text	000000c4 altera_avalon_jtag_uart_init
000101cc g     F .exceptions	00000060 alt_instruction_exception_entry
0001355c g       *ABS*	00000000 __CTOR_LIST__
00018000 g       *ABS*	00000000 __alt_stack_pointer
00011b8c g     F .text	00000218 altera_avalon_jtag_uart_write
00012d78 g     F .text	00000194 __call_exitprocs
0001022c g     F .text	0000003c _start
0001638c g     O .bss	00000004 _alt_tick_rate
00010888 g     F .text	00000064 rand
000102c8 g     F .text	00000050 getRandomPattern
00016390 g     O .bss	00000004 _alt_nticks
00011310 g     F .text	00000048 alt_sys_init
00012c64 g     F .text	00000114 __register_exitproc
0001182c g     F .text	00000068 altera_avalon_jtag_uart_close
00010aa0 g     F .text	00000028 .hidden __mulsi3
00013694 g       *ABS*	00000000 __ram_rwdata_start
0001355c g       *ABS*	00000000 __ram_rodata_start
00011358 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000128f8 g     F .text	000000d4 alt_get_fd
00012a18 g     F .text	0000007c memcmp
00011418 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00016498 g       *ABS*	00000000 __alt_stack_base
00011468 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001635c g     O .bss	00000004 ramBase_ptr
000127e4 g     F .text	00000114 alt_find_file
00016360 g     O .bss	00000004 ramBaseByte_ptr
000120a4 g     F .text	000000a4 alt_dev_llist_insert
00010ac8 g     F .text	00000214 gettimeofday
00016354 g       *ABS*	00000000 __bss_start
0001069c g     F .text	000000a8 main
00016388 g     O .bss	00000004 alt_envp
000113b8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010870 g     F .text	00000018 srand
000108ec g     F .text	00000050 time
00014cf0 g     O .rwdata	00000004 alt_errno
000107b0 g     F .text	00000054 .hidden __divsi3
0001355c g       *ABS*	00000000 __CTOR_END__
0001355c g       *ABS*	00000000 __flash_rodata_start
0001355c g       *ABS*	00000000 __DTOR_LIST__
000112dc g     F .text	00000034 alt_irq_init
000126b4 g     F .text	00000080 alt_release_fd
00013594 g     O .rodata	00000100 .hidden __clz_tab
000129cc g     F .text	00000014 atexit
00014ccc g     O .rwdata	00000004 _impure_ptr
00016380 g     O .bss	00000004 alt_argc
000121a4 g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00014cdc g     O .rwdata	00000008 alt_fs_list
00014cc0 g     O .rwdata	00000004 pushButtonPtr
00016374 g     O .bss	00000008 alt_resettime
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010cdc g     F .text	00000050 alt_ic_isr_register
00014cf4 g       *ABS*	00000000 _edata
00016498 g       *ABS*	00000000 _end
0001022c g       *ABS*	00000000 __ram_exceptions_end
00011894 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00010dcc g     F .text	000000a4 alt_ic_irq_disable
000129e0 g     F .text	00000038 exit
00010268 g     F .text	00000060 pushButtonIsr
00010804 g     F .text	0000005c .hidden __modsi3
00018000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010318 g     F .text	0000007c writeToRAMOriginal
00010404 g     F .text	00000078 writeHalfWordToRAM
00013528 g     F .text	00000034 _exit
00011da4 g     F .text	00000140 alt_alarm_start
00010994 g     F .text	0000010c .hidden __muldi3
00012bcc g     F .text	00000098 strlen
00012554 g     F .text	00000160 open
00012200 g     F .text	0000001c alt_icache_flush_all
00016354 g     O .bss	00000004 randomNum
00014cd0 g     O .rwdata	00000004 alt_priority_mask
00010d2c g     F .text	000000a0 alt_ic_irq_enable
00014cd4 g     O .rwdata	00000008 alt_alarm_list
00012148 g     F .text	0000005c _do_ctors
00011f34 g     F .text	000000d8 close
00011010 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408b14 	ori	at,at,556
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101cc0 	call	101cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	00800074 	movhi	r2,1
   10140:	1098e604 	addi	r2,r2,25496
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	00800074 	movhi	r2,1
   10158:	1098e604 	addi	r2,r2,25496
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	21000104 	addi	r4,r4,4
   10168:	1105883a 	add	r2,r2,r4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff346c>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff3460>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	e037883a 	mov	sp,fp
   101bc:	dfc00117 	ldw	ra,4(sp)
   101c0:	df000017 	ldw	fp,0(sp)
   101c4:	dec00204 	addi	sp,sp,8
   101c8:	f800283a 	ret

000101cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101cc:	defffb04 	addi	sp,sp,-20
   101d0:	dfc00415 	stw	ra,16(sp)
   101d4:	df000315 	stw	fp,12(sp)
   101d8:	df000304 	addi	fp,sp,12
   101dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e0:	00bfffc4 	movi	r2,-1
   101e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101ec:	d0a5b517 	ldw	r2,-26924(gp)
   101f0:	10000726 	beq	r2,zero,10210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f4:	d0a5b517 	ldw	r2,-26924(gp)
   101f8:	e0fffd17 	ldw	r3,-12(fp)
   101fc:	1809883a 	mov	r4,r3
   10200:	e17fff17 	ldw	r5,-4(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	103ee83a 	callr	r2
   1020c:	00000206 	br	10218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10214:	0005883a 	mov	r2,zero
}
   10218:	e037883a 	mov	sp,fp
   1021c:	dfc00117 	ldw	ra,4(sp)
   10220:	df000017 	ldw	fp,0(sp)
   10224:	dec00204 	addi	sp,sp,8
   10228:	f800283a 	ret

Disassembly of section .text:

0001022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   1022c:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10230:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   10234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10238:	d6b33014 	ori	gp,gp,52416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   1023c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10240:	1098d514 	ori	r2,r2,25428

    movhi r3, %hi(__bss_end)
   10244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10248:	18d92614 	ori	r3,r3,25752

    beq r2, r3, 1f
   1024c:	10c00326 	beq	r2,r3,1025c <_start+0x30>

0:
    stw zero, (r2)
   10250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10258:	10fffd36 	bltu	r2,r3,10250 <_gp+0xffff3590>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   1025c:	00110100 	call	11010 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10260:	00110900 	call	11090 <alt_main>

00010264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10264:	003fff06 	br	10264 <_gp+0xffff35a4>

00010268 <pushButtonIsr>:
unsigned short *ramBaseHalfWord_ptr = (unsigned short *) INFERRED_RAM_BASE;   // Pointer to the base address of Inferred RAM

unsigned char *ledBase_ptr = (unsigned char *) LEDS_BASE;           // Pointer to LED base memory location

void pushButtonIsr(void *context)
{
   10268:	defffd04 	addi	sp,sp,-12
   1026c:	df000215 	stw	fp,8(sp)
   10270:	df000204 	addi	fp,sp,8
   10274:	e13fff15 	stw	r4,-4(fp)
  alt_u32 reg_value = 0;
   10278:	e03ffe15 	stw	zero,-8(fp)
  sKey1Pressed = 0;   // reset key pressed flags
   1027c:	d025a615 	stw	zero,-26984(gp)

  // read the Edge Capture register
  reg_value = *(pushButtonPtr + PIO_EDGE_CAP_REG_OFFSET);
   10280:	d0a00017 	ldw	r2,-32768(gp)
   10284:	10800317 	ldw	r2,12(r2)
   10288:	e0bffe15 	stw	r2,-8(fp)

  // determine which push button was pressed
  // assume more than one could be pressed at the same time
  if (KEY1_BIT_MASK == (reg_value & KEY1_BIT_MASK))
   1028c:	e0bffe17 	ldw	r2,-8(fp)
   10290:	1080004c 	andi	r2,r2,1
   10294:	10000426 	beq	r2,zero,102a8 <pushButtonIsr+0x40>
  {
    *ledBase_ptr = 0x0;  // Turn LEDs off
   10298:	d0a00117 	ldw	r2,-32764(gp)
   1029c:	10000005 	stb	zero,0(r2)
    sKey1Pressed = 1;
   102a0:	00800044 	movi	r2,1
   102a4:	d0a5a615 	stw	r2,-26984(gp)
  }

  // clear the interrupt bits set by writing back value read
  *(pushButtonPtr + PIO_EDGE_CAP_REG_OFFSET) = reg_value;
   102a8:	d0a00017 	ldw	r2,-32768(gp)
   102ac:	10800304 	addi	r2,r2,12
   102b0:	e0fffe17 	ldw	r3,-8(fp)
   102b4:	10c00015 	stw	r3,0(r2)
}
   102b8:	e037883a 	mov	sp,fp
   102bc:	df000017 	ldw	fp,0(sp)
   102c0:	dec00104 	addi	sp,sp,4
   102c4:	f800283a 	ret

000102c8 <getRandomPattern>:

/* Returns a random number using the epoch as seed. */
int getRandomPattern(int bound){
   102c8:	defffd04 	addi	sp,sp,-12
   102cc:	dfc00215 	stw	ra,8(sp)
   102d0:	df000115 	stw	fp,4(sp)
   102d4:	df000104 	addi	fp,sp,4
   102d8:	e13fff15 	stw	r4,-4(fp)
    randomNum = rand();
   102dc:	00108880 	call	10888 <rand>
   102e0:	d0a5a515 	stw	r2,-26988(gp)
    if (bound != 0){
   102e4:	e0bfff17 	ldw	r2,-4(fp)
   102e8:	10000526 	beq	r2,zero,10300 <getRandomPattern+0x38>
        randomNum = (randomNum % bound);
   102ec:	d0a5a517 	ldw	r2,-26988(gp)
   102f0:	1009883a 	mov	r4,r2
   102f4:	e17fff17 	ldw	r5,-4(fp)
   102f8:	00108040 	call	10804 <__modsi3>
   102fc:	d0a5a515 	stw	r2,-26988(gp)
    }
    return randomNum;
   10300:	d0a5a517 	ldw	r2,-26988(gp)
}
   10304:	e037883a 	mov	sp,fp
   10308:	dfc00117 	ldw	ra,4(sp)
   1030c:	df000017 	ldw	fp,0(sp)
   10310:	dec00204 	addi	sp,sp,8
   10314:	f800283a 	ret

00010318 <writeToRAMOriginal>:


/* Writes random values ram to macro defined address locations
 * Params: ramLocation_ptr - location of the RAM wanted to check.
 * ramSpan - Size of RAM wanted to write to. */
void writeToRAMOriginal(unsigned long *ramLocation_ptr, unsigned int ramSpan){
   10318:	defffb04 	addi	sp,sp,-20
   1031c:	dfc00415 	stw	ra,16(sp)
   10320:	df000315 	stw	fp,12(sp)
   10324:	df000304 	addi	fp,sp,12
   10328:	e13ffe15 	stw	r4,-8(fp)
   1032c:	e17fff15 	stw	r5,-4(fp)
    int i = 0;
   10330:	e03ffd15 	stw	zero,-12(fp)
    while (ramSpan){                        // While we still need to write more bytes
   10334:	00001006 	br	10378 <writeToRAMOriginal+0x60>
        getRandomPattern(0);                // Generate random number for randomNum variable
   10338:	0009883a 	mov	r4,zero
   1033c:	00102c80 	call	102c8 <getRandomPattern>
        *(ramLocation_ptr + i) = (unsigned long)randomNum; // +4 columns - write random number to next location
   10340:	e0bffd17 	ldw	r2,-12(fp)
   10344:	1085883a 	add	r2,r2,r2
   10348:	1085883a 	add	r2,r2,r2
   1034c:	1007883a 	mov	r3,r2
   10350:	e0bffe17 	ldw	r2,-8(fp)
   10354:	10c5883a 	add	r2,r2,r3
   10358:	d0e5a517 	ldw	r3,-26988(gp)
   1035c:	10c00015 	stw	r3,0(r2)
        i++;                                // Increment counter for mem address from base and array of pattern
   10360:	e0bffd17 	ldw	r2,-12(fp)
   10364:	10800044 	addi	r2,r2,1
   10368:	e0bffd15 	stw	r2,-12(fp)
        ramSpan--;                          // Decrement bytes for how many more to write to
   1036c:	e0bfff17 	ldw	r2,-4(fp)
   10370:	10bfffc4 	addi	r2,r2,-1
   10374:	e0bfff15 	stw	r2,-4(fp)
/* Writes random values ram to macro defined address locations
 * Params: ramLocation_ptr - location of the RAM wanted to check.
 * ramSpan - Size of RAM wanted to write to. */
void writeToRAMOriginal(unsigned long *ramLocation_ptr, unsigned int ramSpan){
    int i = 0;
    while (ramSpan){                        // While we still need to write more bytes
   10378:	e0bfff17 	ldw	r2,-4(fp)
   1037c:	103fee1e 	bne	r2,zero,10338 <_gp+0xffff3678>
        getRandomPattern(0);                // Generate random number for randomNum variable
        *(ramLocation_ptr + i) = (unsigned long)randomNum; // +4 columns - write random number to next location
        i++;                                // Increment counter for mem address from base and array of pattern
        ramSpan--;                          // Decrement bytes for how many more to write to
    }
}
   10380:	e037883a 	mov	sp,fp
   10384:	dfc00117 	ldw	ra,4(sp)
   10388:	df000017 	ldw	fp,0(sp)
   1038c:	dec00204 	addi	sp,sp,8
   10390:	f800283a 	ret

00010394 <writeByteToRAM>:

void writeByteToRAM(char *ramLocation_ptr, unsigned int ramSpan){ // 8bits, 1byte, 0x00 -> 0xFF
   10394:	defffb04 	addi	sp,sp,-20
   10398:	dfc00415 	stw	ra,16(sp)
   1039c:	df000315 	stw	fp,12(sp)
   103a0:	df000304 	addi	fp,sp,12
   103a4:	e13ffe15 	stw	r4,-8(fp)
   103a8:	e17fff15 	stw	r5,-4(fp)
    int i = 0;
   103ac:	e03ffd15 	stw	zero,-12(fp)
    while (ramSpan){                        // While we still need to write more bytes
   103b0:	00000d06 	br	103e8 <writeByteToRAM+0x54>
        getRandomPattern(255);              // Generate random number for randomNum variable
   103b4:	01003fc4 	movi	r4,255
   103b8:	00102c80 	call	102c8 <getRandomPattern>
        *(ramLocation_ptr + i) = (char)randomNum; // +4 columns - write random number to next location
   103bc:	e0bffd17 	ldw	r2,-12(fp)
   103c0:	e0fffe17 	ldw	r3,-8(fp)
   103c4:	1885883a 	add	r2,r3,r2
   103c8:	d0e5a517 	ldw	r3,-26988(gp)
   103cc:	10c00005 	stb	r3,0(r2)
        i++;                                // Increment counter for mem address from base and array of pattern
   103d0:	e0bffd17 	ldw	r2,-12(fp)
   103d4:	10800044 	addi	r2,r2,1
   103d8:	e0bffd15 	stw	r2,-12(fp)
        ramSpan--;                          // Decrement bytes for how many more to write to
   103dc:	e0bfff17 	ldw	r2,-4(fp)
   103e0:	10bfffc4 	addi	r2,r2,-1
   103e4:	e0bfff15 	stw	r2,-4(fp)
    }
}

void writeByteToRAM(char *ramLocation_ptr, unsigned int ramSpan){ // 8bits, 1byte, 0x00 -> 0xFF
    int i = 0;
    while (ramSpan){                        // While we still need to write more bytes
   103e8:	e0bfff17 	ldw	r2,-4(fp)
   103ec:	103ff11e 	bne	r2,zero,103b4 <_gp+0xffff36f4>
        getRandomPattern(255);              // Generate random number for randomNum variable
        *(ramLocation_ptr + i) = (char)randomNum; // +4 columns - write random number to next location
        i++;                                // Increment counter for mem address from base and array of pattern
        ramSpan--;                          // Decrement bytes for how many more to write to
    }
}
   103f0:	e037883a 	mov	sp,fp
   103f4:	dfc00117 	ldw	ra,4(sp)
   103f8:	df000017 	ldw	fp,0(sp)
   103fc:	dec00204 	addi	sp,sp,8
   10400:	f800283a 	ret

00010404 <writeHalfWordToRAM>:

void writeHalfWordToRAM(unsigned short *ramLocation_ptr, unsigned int ramSpan){ // 16bits, 2bytes, 0x0000 -> 0xFFFF
   10404:	defffb04 	addi	sp,sp,-20
   10408:	dfc00415 	stw	ra,16(sp)
   1040c:	df000315 	stw	fp,12(sp)
   10410:	df000304 	addi	fp,sp,12
   10414:	e13ffe15 	stw	r4,-8(fp)
   10418:	e17fff15 	stw	r5,-4(fp)
    int i = 0;
   1041c:	e03ffd15 	stw	zero,-12(fp)
    while (ramSpan){                        // While we still need to write more bytes
   10420:	00000f06 	br	10460 <writeHalfWordToRAM+0x5c>
        getRandomPattern(65535);            // Generate random number for randomNum variable
   10424:	013fffd4 	movui	r4,65535
   10428:	00102c80 	call	102c8 <getRandomPattern>
        *(ramLocation_ptr + i) = (unsigned short)randomNum; // +4 columns - write random number to next location
   1042c:	e0bffd17 	ldw	r2,-12(fp)
   10430:	1085883a 	add	r2,r2,r2
   10434:	1007883a 	mov	r3,r2
   10438:	e0bffe17 	ldw	r2,-8(fp)
   1043c:	10c5883a 	add	r2,r2,r3
   10440:	d0e5a517 	ldw	r3,-26988(gp)
   10444:	10c0000d 	sth	r3,0(r2)
        i++;                                // Increment counter for mem address from base and array of pattern
   10448:	e0bffd17 	ldw	r2,-12(fp)
   1044c:	10800044 	addi	r2,r2,1
   10450:	e0bffd15 	stw	r2,-12(fp)
        ramSpan--;                          // Decrement bytes for how many more to write to
   10454:	e0bfff17 	ldw	r2,-4(fp)
   10458:	10bfffc4 	addi	r2,r2,-1
   1045c:	e0bfff15 	stw	r2,-4(fp)
    }
}

void writeHalfWordToRAM(unsigned short *ramLocation_ptr, unsigned int ramSpan){ // 16bits, 2bytes, 0x0000 -> 0xFFFF
    int i = 0;
    while (ramSpan){                        // While we still need to write more bytes
   10460:	e0bfff17 	ldw	r2,-4(fp)
   10464:	103fef1e 	bne	r2,zero,10424 <_gp+0xffff3764>
        getRandomPattern(65535);            // Generate random number for randomNum variable
        *(ramLocation_ptr + i) = (unsigned short)randomNum; // +4 columns - write random number to next location
        i++;                                // Increment counter for mem address from base and array of pattern
        ramSpan--;                          // Decrement bytes for how many more to write to
    }
}
   10468:	e037883a 	mov	sp,fp
   1046c:	dfc00117 	ldw	ra,4(sp)
   10470:	df000017 	ldw	fp,0(sp)
   10474:	dec00204 	addi	sp,sp,8
   10478:	f800283a 	ret

0001047c <ramConfidenceTest>:

/* Return 0 or 1, for False or True respectively, if memory passes test.
 * Params: ramLocation_ptr - location of the RAM wanted to check.
 * numBytesToCheck - Size in bytes of RAM wanted to check. */
int ramConfidenceTest(unsigned long *ramLocation_ptr, unsigned int numBytesToCheck){
   1047c:	defffb04 	addi	sp,sp,-20
   10480:	dfc00415 	stw	ra,16(sp)
   10484:	df000315 	stw	fp,12(sp)
   10488:	df000304 	addi	fp,sp,12
   1048c:	e13ffe15 	stw	r4,-8(fp)
   10490:	e17fff15 	stw	r5,-4(fp)
    int i = 0;
   10494:	e03ffd15 	stw	zero,-12(fp)
    writeToRAMOriginal(ramBase_ptr, toWriteTo);              // Write values to fill RAM
   10498:	d0a5a717 	ldw	r2,-26980(gp)
   1049c:	1009883a 	mov	r4,r2
   104a0:	01440004 	movi	r5,4096
   104a4:	00103180 	call	10318 <writeToRAMOriginal>
    srand((unsigned)time(NULL)); //Reseed to produce same vals
   104a8:	0009883a 	mov	r4,zero
   104ac:	00108ec0 	call	108ec <time>
   104b0:	1009883a 	mov	r4,r2
   104b4:	00108700 	call	10870 <srand>
    while (numBytesToCheck){
   104b8:	00001406 	br	1050c <ramConfidenceTest+0x90>
    	getRandomPattern(0);
   104bc:	0009883a 	mov	r4,zero
   104c0:	00102c80 	call	102c8 <getRandomPattern>
        if ((unsigned long)randomNum != *(ramLocation_ptr + i)){  // Test failed!
   104c4:	d0a5a517 	ldw	r2,-26988(gp)
   104c8:	1007883a 	mov	r3,r2
   104cc:	e0bffd17 	ldw	r2,-12(fp)
   104d0:	1085883a 	add	r2,r2,r2
   104d4:	1085883a 	add	r2,r2,r2
   104d8:	1009883a 	mov	r4,r2
   104dc:	e0bffe17 	ldw	r2,-8(fp)
   104e0:	1105883a 	add	r2,r2,r4
   104e4:	10800017 	ldw	r2,0(r2)
   104e8:	18800226 	beq	r3,r2,104f4 <ramConfidenceTest+0x78>
            return 0; 
   104ec:	0005883a 	mov	r2,zero
   104f0:	00000906 	br	10518 <ramConfidenceTest+0x9c>
        }
        i++;
   104f4:	e0bffd17 	ldw	r2,-12(fp)
   104f8:	10800044 	addi	r2,r2,1
   104fc:	e0bffd15 	stw	r2,-12(fp)
        numBytesToCheck--;
   10500:	e0bfff17 	ldw	r2,-4(fp)
   10504:	10bfffc4 	addi	r2,r2,-1
   10508:	e0bfff15 	stw	r2,-4(fp)
 * numBytesToCheck - Size in bytes of RAM wanted to check. */
int ramConfidenceTest(unsigned long *ramLocation_ptr, unsigned int numBytesToCheck){
    int i = 0;
    writeToRAMOriginal(ramBase_ptr, toWriteTo);              // Write values to fill RAM
    srand((unsigned)time(NULL)); //Reseed to produce same vals
    while (numBytesToCheck){
   1050c:	e0bfff17 	ldw	r2,-4(fp)
   10510:	103fea1e 	bne	r2,zero,104bc <_gp+0xffff37fc>
            return 0; 
        }
        i++;
        numBytesToCheck--;
    }
    return 1;                                           // Made it through all bytes and all match - test passed
   10514:	00800044 	movi	r2,1
}
   10518:	e037883a 	mov	sp,fp
   1051c:	dfc00117 	ldw	ra,4(sp)
   10520:	df000017 	ldw	fp,0(sp)
   10524:	dec00204 	addi	sp,sp,8
   10528:	f800283a 	ret

0001052c <ramTestByte>:

/* Return 0 or 1, for False or True respectively, if memory passes test.
 * Params: ramLocation_ptr - location of the RAM wanted to check.
 * numBytesToCheck - Size in bytes of RAM wanted to check. */
int ramTestByte(char *ramLocation_ptr, unsigned int numBytesToCheck){
   1052c:	defffb04 	addi	sp,sp,-20
   10530:	dfc00415 	stw	ra,16(sp)
   10534:	df000315 	stw	fp,12(sp)
   10538:	df000304 	addi	fp,sp,12
   1053c:	e13ffe15 	stw	r4,-8(fp)
   10540:	e17fff15 	stw	r5,-4(fp)
    int i = 0;
   10544:	e03ffd15 	stw	zero,-12(fp)
    writeByteToRAM(ramBaseByte_ptr, toWriteTo);              // Write values to fill RAM
   10548:	d0a5a817 	ldw	r2,-26976(gp)
   1054c:	1009883a 	mov	r4,r2
   10550:	01440004 	movi	r5,4096
   10554:	00103940 	call	10394 <writeByteToRAM>
    srand((unsigned)time(NULL)); //Reseed to produce same vals
   10558:	0009883a 	mov	r4,zero
   1055c:	00108ec0 	call	108ec <time>
   10560:	1009883a 	mov	r4,r2
   10564:	00108700 	call	10870 <srand>
    while (numBytesToCheck){
   10568:	00001706 	br	105c8 <ramTestByte+0x9c>
    	getRandomPattern(255);
   1056c:	01003fc4 	movi	r4,255
   10570:	00102c80 	call	102c8 <getRandomPattern>
        if ((char)randomNum != *(ramLocation_ptr + i)){  // Test failed!
   10574:	d0a5a517 	ldw	r2,-26988(gp)
   10578:	1009883a 	mov	r4,r2
   1057c:	e0bffd17 	ldw	r2,-12(fp)
   10580:	e0fffe17 	ldw	r3,-8(fp)
   10584:	1885883a 	add	r2,r3,r2
   10588:	10800003 	ldbu	r2,0(r2)
   1058c:	20c03fcc 	andi	r3,r4,255
   10590:	18c0201c 	xori	r3,r3,128
   10594:	18ffe004 	addi	r3,r3,-128
   10598:	10803fcc 	andi	r2,r2,255
   1059c:	1080201c 	xori	r2,r2,128
   105a0:	10bfe004 	addi	r2,r2,-128
   105a4:	18800226 	beq	r3,r2,105b0 <ramTestByte+0x84>
            return 0;
   105a8:	0005883a 	mov	r2,zero
   105ac:	00000906 	br	105d4 <ramTestByte+0xa8>
        }
        i++;
   105b0:	e0bffd17 	ldw	r2,-12(fp)
   105b4:	10800044 	addi	r2,r2,1
   105b8:	e0bffd15 	stw	r2,-12(fp)
        numBytesToCheck--;
   105bc:	e0bfff17 	ldw	r2,-4(fp)
   105c0:	10bfffc4 	addi	r2,r2,-1
   105c4:	e0bfff15 	stw	r2,-4(fp)
 * numBytesToCheck - Size in bytes of RAM wanted to check. */
int ramTestByte(char *ramLocation_ptr, unsigned int numBytesToCheck){
    int i = 0;
    writeByteToRAM(ramBaseByte_ptr, toWriteTo);              // Write values to fill RAM
    srand((unsigned)time(NULL)); //Reseed to produce same vals
    while (numBytesToCheck){
   105c8:	e0bfff17 	ldw	r2,-4(fp)
   105cc:	103fe71e 	bne	r2,zero,1056c <_gp+0xffff38ac>
            return 0;
        }
        i++;
        numBytesToCheck--;
    }
    return 1;                                           // Made it through all bytes and all match - test passed
   105d0:	00800044 	movi	r2,1
}
   105d4:	e037883a 	mov	sp,fp
   105d8:	dfc00117 	ldw	ra,4(sp)
   105dc:	df000017 	ldw	fp,0(sp)
   105e0:	dec00204 	addi	sp,sp,8
   105e4:	f800283a 	ret

000105e8 <ramTestHalfWord>:

/* Return 0 or 1, for False or True respectively, if memory passes test.
 * Params: ramLocation_ptr - location of the RAM wanted to check.
 * numBytesToCheck - Size in bytes of RAM wanted to check. */
int ramTestHalfWord(unsigned short *ramLocation_ptr, unsigned int numBytesToCheck){
   105e8:	defffb04 	addi	sp,sp,-20
   105ec:	dfc00415 	stw	ra,16(sp)
   105f0:	df000315 	stw	fp,12(sp)
   105f4:	df000304 	addi	fp,sp,12
   105f8:	e13ffe15 	stw	r4,-8(fp)
   105fc:	e17fff15 	stw	r5,-4(fp)
    int i = 0;
   10600:	e03ffd15 	stw	zero,-12(fp)
    writeHalfWordToRAM(ramBaseHalfWord_ptr, toWriteTo);
   10604:	d0a5a917 	ldw	r2,-26972(gp)
   10608:	1009883a 	mov	r4,r2
   1060c:	01440004 	movi	r5,4096
   10610:	00104040 	call	10404 <writeHalfWordToRAM>
    srand((unsigned)time(NULL));
   10614:	0009883a 	mov	r4,zero
   10618:	00108ec0 	call	108ec <time>
   1061c:	1009883a 	mov	r4,r2
   10620:	00108700 	call	10870 <srand>
    while (numBytesToCheck){
   10624:	00001506 	br	1067c <ramTestHalfWord+0x94>
    	getRandomPattern(65535);
   10628:	013fffd4 	movui	r4,65535
   1062c:	00102c80 	call	102c8 <getRandomPattern>
        if ((unsigned short)randomNum != *(ramLocation_ptr + i)){  // Test failed!
   10630:	d0a5a517 	ldw	r2,-26988(gp)
   10634:	1009883a 	mov	r4,r2
   10638:	e0bffd17 	ldw	r2,-12(fp)
   1063c:	1085883a 	add	r2,r2,r2
   10640:	1007883a 	mov	r3,r2
   10644:	e0bffe17 	ldw	r2,-8(fp)
   10648:	10c5883a 	add	r2,r2,r3
   1064c:	1080000b 	ldhu	r2,0(r2)
   10650:	20ffffcc 	andi	r3,r4,65535
   10654:	10bfffcc 	andi	r2,r2,65535
   10658:	18800226 	beq	r3,r2,10664 <ramTestHalfWord+0x7c>
            return 0;
   1065c:	0005883a 	mov	r2,zero
   10660:	00000906 	br	10688 <ramTestHalfWord+0xa0>
        }
        i++;
   10664:	e0bffd17 	ldw	r2,-12(fp)
   10668:	10800044 	addi	r2,r2,1
   1066c:	e0bffd15 	stw	r2,-12(fp)
        numBytesToCheck--;
   10670:	e0bfff17 	ldw	r2,-4(fp)
   10674:	10bfffc4 	addi	r2,r2,-1
   10678:	e0bfff15 	stw	r2,-4(fp)
 * numBytesToCheck - Size in bytes of RAM wanted to check. */
int ramTestHalfWord(unsigned short *ramLocation_ptr, unsigned int numBytesToCheck){
    int i = 0;
    writeHalfWordToRAM(ramBaseHalfWord_ptr, toWriteTo);
    srand((unsigned)time(NULL));
    while (numBytesToCheck){
   1067c:	e0bfff17 	ldw	r2,-4(fp)
   10680:	103fe91e 	bne	r2,zero,10628 <_gp+0xffff3968>
            return 0;
        }
        i++;
        numBytesToCheck--;
    }
    return 1;                                           // Made it through all bytes and all match - test passed
   10684:	00800044 	movi	r2,1
}
   10688:	e037883a 	mov	sp,fp
   1068c:	dfc00117 	ldw	ra,4(sp)
   10690:	df000017 	ldw	fp,0(sp)
   10694:	dec00204 	addi	sp,sp,8
   10698:	f800283a 	ret

0001069c <main>:

int main(void)
{
   1069c:	defffc04 	addi	sp,sp,-16
   106a0:	dfc00315 	stw	ra,12(sp)
   106a4:	df000215 	stw	fp,8(sp)
   106a8:	df000204 	addi	fp,sp,8
    int pass = 0;
   106ac:	e03fff15 	stw	zero,-4(fp)
    *ledBase_ptr = 0xFF;                                 // LEDs on - 1111
   106b0:	d0a00117 	ldw	r2,-32764(gp)
   106b4:	00ffffc4 	movi	r3,-1
   106b8:	10c00005 	stb	r3,0(r2)
    srand((unsigned)time(NULL));                         // Fetch current epoch and use as seed
   106bc:	0009883a 	mov	r4,zero
   106c0:	00108ec0 	call	108ec <time>
   106c4:	1009883a 	mov	r4,r2
   106c8:	00108700 	call	10870 <srand>

    alt_ic_isr_register(KEY1_IRQ_INTERRUPT_CONTROLLER_ID, KEY1_IRQ, pushButtonIsr, 0, 0);
   106cc:	d8000015 	stw	zero,0(sp)
   106d0:	0009883a 	mov	r4,zero
   106d4:	01400044 	movi	r5,1
   106d8:	01800074 	movhi	r6,1
   106dc:	31809a04 	addi	r6,r6,616
   106e0:	000f883a 	mov	r7,zero
   106e4:	0010cdc0 	call	10cdc <alt_ic_isr_register>
    *(pushButtonPtr + PIO_EDGE_CAP_REG_OFFSET) = (KEY1_BIT_MASK);
   106e8:	d0a00017 	ldw	r2,-32768(gp)
   106ec:	10800304 	addi	r2,r2,12
   106f0:	00c00044 	movi	r3,1
   106f4:	10c00015 	stw	r3,0(r2)
    *(pushButtonPtr + PIO_INT_MASK_REG_OFFSET) = (KEY1_BIT_MASK);
   106f8:	d0a00017 	ldw	r2,-32768(gp)
   106fc:	10800204 	addi	r2,r2,8
   10700:	00c00044 	movi	r3,1
   10704:	10c00015 	stw	r3,0(r2)
    while (1) {
        if (sKey1Pressed)
   10708:	d0a5a617 	ldw	r2,-26984(gp)
   1070c:	10000c26 	beq	r2,zero,10740 <main+0xa4>
        {
            //pass = ramConfidenceTest(ramBase_ptr, numBytes);         // Verify correct values written
            //pass = ramTestByte(ramBaseByte_ptr, numBytes);
            pass = ramTestHalfWord(ramBaseHalfWord_ptr, numBytes);
   10710:	d0a5a917 	ldw	r2,-26972(gp)
   10714:	1009883a 	mov	r4,r2
   10718:	01400244 	movi	r5,9
   1071c:	00105e80 	call	105e8 <ramTestHalfWord>
   10720:	e0bfff15 	stw	r2,-4(fp)
            if (pass == 1){                                  // RAM test passed
   10724:	e0bfff17 	ldw	r2,-4(fp)
   10728:	10800058 	cmpnei	r2,r2,1
   1072c:	1000031e 	bne	r2,zero,1073c <main+0xa0>
                *ledBase_ptr = 0xFF;                         // LEDs off - 1111 1111
   10730:	d0a00117 	ldw	r2,-32764(gp)
   10734:	00ffffc4 	movi	r3,-1
   10738:	10c00005 	stb	r3,0(r2)
            }
            sKey1Pressed = 0;
   1073c:	d025a615 	stw	zero,-26984(gp)
        }
    }
   10740:	003ff106 	br	10708 <_gp+0xffff3a48>

00010744 <udivmodsi4>:
   10744:	2900182e 	bgeu	r5,r4,107a8 <udivmodsi4+0x64>
   10748:	28001716 	blt	r5,zero,107a8 <udivmodsi4+0x64>
   1074c:	00800804 	movi	r2,32
   10750:	00c00044 	movi	r3,1
   10754:	00000206 	br	10760 <udivmodsi4+0x1c>
   10758:	10001126 	beq	r2,zero,107a0 <udivmodsi4+0x5c>
   1075c:	28000516 	blt	r5,zero,10774 <udivmodsi4+0x30>
   10760:	294b883a 	add	r5,r5,r5
   10764:	10bfffc4 	addi	r2,r2,-1
   10768:	18c7883a 	add	r3,r3,r3
   1076c:	293ffa36 	bltu	r5,r4,10758 <_gp+0xffff3a98>
   10770:	18000b26 	beq	r3,zero,107a0 <udivmodsi4+0x5c>
   10774:	0005883a 	mov	r2,zero
   10778:	21400236 	bltu	r4,r5,10784 <udivmodsi4+0x40>
   1077c:	2149c83a 	sub	r4,r4,r5
   10780:	10c4b03a 	or	r2,r2,r3
   10784:	1806d07a 	srli	r3,r3,1
   10788:	280ad07a 	srli	r5,r5,1
   1078c:	183ffa1e 	bne	r3,zero,10778 <_gp+0xffff3ab8>
   10790:	3000011e 	bne	r6,zero,10798 <udivmodsi4+0x54>
   10794:	f800283a 	ret
   10798:	2005883a 	mov	r2,r4
   1079c:	f800283a 	ret
   107a0:	0005883a 	mov	r2,zero
   107a4:	003ffa06 	br	10790 <_gp+0xffff3ad0>
   107a8:	00c00044 	movi	r3,1
   107ac:	003ff106 	br	10774 <_gp+0xffff3ab4>

000107b0 <__divsi3>:
   107b0:	defffe04 	addi	sp,sp,-8
   107b4:	dfc00115 	stw	ra,4(sp)
   107b8:	dc000015 	stw	r16,0(sp)
   107bc:	20000b16 	blt	r4,zero,107ec <__divsi3+0x3c>
   107c0:	0021883a 	mov	r16,zero
   107c4:	28000c16 	blt	r5,zero,107f8 <__divsi3+0x48>
   107c8:	000d883a 	mov	r6,zero
   107cc:	00107440 	call	10744 <udivmodsi4>
   107d0:	0407c83a 	sub	r3,zero,r16
   107d4:	1884f03a 	xor	r2,r3,r2
   107d8:	1405883a 	add	r2,r2,r16
   107dc:	dfc00117 	ldw	ra,4(sp)
   107e0:	dc000017 	ldw	r16,0(sp)
   107e4:	dec00204 	addi	sp,sp,8
   107e8:	f800283a 	ret
   107ec:	0109c83a 	sub	r4,zero,r4
   107f0:	04000044 	movi	r16,1
   107f4:	283ff40e 	bge	r5,zero,107c8 <_gp+0xffff3b08>
   107f8:	014bc83a 	sub	r5,zero,r5
   107fc:	8400005c 	xori	r16,r16,1
   10800:	003ff106 	br	107c8 <_gp+0xffff3b08>

00010804 <__modsi3>:
   10804:	defffd04 	addi	sp,sp,-12
   10808:	dfc00215 	stw	ra,8(sp)
   1080c:	dc400115 	stw	r17,4(sp)
   10810:	dc000015 	stw	r16,0(sp)
   10814:	20000c16 	blt	r4,zero,10848 <__modsi3+0x44>
   10818:	0023883a 	mov	r17,zero
   1081c:	0021883a 	mov	r16,zero
   10820:	28000d16 	blt	r5,zero,10858 <__modsi3+0x54>
   10824:	01800044 	movi	r6,1
   10828:	00107440 	call	10744 <udivmodsi4>
   1082c:	1404f03a 	xor	r2,r2,r16
   10830:	8885883a 	add	r2,r17,r2
   10834:	dfc00217 	ldw	ra,8(sp)
   10838:	dc400117 	ldw	r17,4(sp)
   1083c:	dc000017 	ldw	r16,0(sp)
   10840:	dec00304 	addi	sp,sp,12
   10844:	f800283a 	ret
   10848:	0109c83a 	sub	r4,zero,r4
   1084c:	04400044 	movi	r17,1
   10850:	043fffc4 	movi	r16,-1
   10854:	283ff30e 	bge	r5,zero,10824 <_gp+0xffff3b64>
   10858:	014bc83a 	sub	r5,zero,r5
   1085c:	003ff106 	br	10824 <_gp+0xffff3b64>

00010860 <__udivsi3>:
   10860:	000d883a 	mov	r6,zero
   10864:	00107441 	jmpi	10744 <udivmodsi4>

00010868 <__umodsi3>:
   10868:	01800044 	movi	r6,1
   1086c:	00107441 	jmpi	10744 <udivmodsi4>

00010870 <srand>:
   10870:	00800074 	movhi	r2,1
   10874:	10933304 	addi	r2,r2,19660
   10878:	10800017 	ldw	r2,0(r2)
   1087c:	11002915 	stw	r4,164(r2)
   10880:	10002a15 	stw	zero,168(r2)
   10884:	f800283a 	ret

00010888 <rand>:
   10888:	00800074 	movhi	r2,1
   1088c:	defffe04 	addi	sp,sp,-8
   10890:	10933304 	addi	r2,r2,19660
   10894:	dc000015 	stw	r16,0(sp)
   10898:	14000017 	ldw	r16,0(r2)
   1089c:	dfc00115 	stw	ra,4(sp)
   108a0:	01932574 	movhi	r6,19605
   108a4:	81002917 	ldw	r4,164(r16)
   108a8:	81402a17 	ldw	r5,168(r16)
   108ac:	01d614b4 	movhi	r7,22610
   108b0:	319fcb44 	addi	r6,r6,32557
   108b4:	39fd0b44 	addi	r7,r7,-3027
   108b8:	00109940 	call	10994 <__muldi3>
   108bc:	11000044 	addi	r4,r2,1
   108c0:	2085803a 	cmpltu	r2,r4,r2
   108c4:	10c7883a 	add	r3,r2,r3
   108c8:	00a00034 	movhi	r2,32768
   108cc:	10bfffc4 	addi	r2,r2,-1
   108d0:	1884703a 	and	r2,r3,r2
   108d4:	81002915 	stw	r4,164(r16)
   108d8:	80c02a15 	stw	r3,168(r16)
   108dc:	dfc00117 	ldw	ra,4(sp)
   108e0:	dc000017 	ldw	r16,0(sp)
   108e4:	dec00204 	addi	sp,sp,8
   108e8:	f800283a 	ret

000108ec <time>:
   108ec:	00800074 	movhi	r2,1
   108f0:	defffc04 	addi	sp,sp,-16
   108f4:	10933304 	addi	r2,r2,19660
   108f8:	dc000215 	stw	r16,8(sp)
   108fc:	2021883a 	mov	r16,r4
   10900:	11000017 	ldw	r4,0(r2)
   10904:	d80b883a 	mov	r5,sp
   10908:	000d883a 	mov	r6,zero
   1090c:	dfc00315 	stw	ra,12(sp)
   10910:	001093c0 	call	1093c <_gettimeofday_r>
   10914:	10000716 	blt	r2,zero,10934 <time+0x48>
   10918:	d8800017 	ldw	r2,0(sp)
   1091c:	80000126 	beq	r16,zero,10924 <time+0x38>
   10920:	80800015 	stw	r2,0(r16)
   10924:	dfc00317 	ldw	ra,12(sp)
   10928:	dc000217 	ldw	r16,8(sp)
   1092c:	dec00404 	addi	sp,sp,16
   10930:	f800283a 	ret
   10934:	00bfffc4 	movi	r2,-1
   10938:	003ffa06 	br	10924 <_gp+0xffff3c64>

0001093c <_gettimeofday_r>:
   1093c:	defffd04 	addi	sp,sp,-12
   10940:	dc000015 	stw	r16,0(sp)
   10944:	04000074 	movhi	r16,1
   10948:	dc400115 	stw	r17,4(sp)
   1094c:	8418da04 	addi	r16,r16,25448
   10950:	2023883a 	mov	r17,r4
   10954:	2809883a 	mov	r4,r5
   10958:	300b883a 	mov	r5,r6
   1095c:	dfc00215 	stw	ra,8(sp)
   10960:	80000015 	stw	zero,0(r16)
   10964:	0010ac80 	call	10ac8 <gettimeofday>
   10968:	00ffffc4 	movi	r3,-1
   1096c:	10c00526 	beq	r2,r3,10984 <_gettimeofday_r+0x48>
   10970:	dfc00217 	ldw	ra,8(sp)
   10974:	dc400117 	ldw	r17,4(sp)
   10978:	dc000017 	ldw	r16,0(sp)
   1097c:	dec00304 	addi	sp,sp,12
   10980:	f800283a 	ret
   10984:	80c00017 	ldw	r3,0(r16)
   10988:	183ff926 	beq	r3,zero,10970 <_gp+0xffff3cb0>
   1098c:	88c00015 	stw	r3,0(r17)
   10990:	003ff706 	br	10970 <_gp+0xffff3cb0>

00010994 <__muldi3>:
   10994:	defff604 	addi	sp,sp,-40
   10998:	dd800615 	stw	r22,24(sp)
   1099c:	dd400515 	stw	r21,20(sp)
   109a0:	25bfffcc 	andi	r22,r4,65535
   109a4:	357fffcc 	andi	r21,r6,65535
   109a8:	dc400115 	stw	r17,4(sp)
   109ac:	2022d43a 	srli	r17,r4,16
   109b0:	dcc00315 	stw	r19,12(sp)
   109b4:	dc800215 	stw	r18,8(sp)
   109b8:	2027883a 	mov	r19,r4
   109bc:	2825883a 	mov	r18,r5
   109c0:	a809883a 	mov	r4,r21
   109c4:	b00b883a 	mov	r5,r22
   109c8:	dfc00915 	stw	ra,36(sp)
   109cc:	df000815 	stw	fp,32(sp)
   109d0:	ddc00715 	stw	r23,28(sp)
   109d4:	3839883a 	mov	fp,r7
   109d8:	302ed43a 	srli	r23,r6,16
   109dc:	dd000415 	stw	r20,16(sp)
   109e0:	dc000015 	stw	r16,0(sp)
   109e4:	3029883a 	mov	r20,r6
   109e8:	0010aa00 	call	10aa0 <__mulsi3>
   109ec:	a809883a 	mov	r4,r21
   109f0:	880b883a 	mov	r5,r17
   109f4:	1021883a 	mov	r16,r2
   109f8:	0010aa00 	call	10aa0 <__mulsi3>
   109fc:	880b883a 	mov	r5,r17
   10a00:	b809883a 	mov	r4,r23
   10a04:	102b883a 	mov	r21,r2
   10a08:	0010aa00 	call	10aa0 <__mulsi3>
   10a0c:	b809883a 	mov	r4,r23
   10a10:	b00b883a 	mov	r5,r22
   10a14:	1023883a 	mov	r17,r2
   10a18:	0010aa00 	call	10aa0 <__mulsi3>
   10a1c:	8012d43a 	srli	r9,r16,16
   10a20:	a885883a 	add	r2,r21,r2
   10a24:	1251883a 	add	r8,r2,r9
   10a28:	4540022e 	bgeu	r8,r21,10a34 <__muldi3+0xa0>
   10a2c:	00800074 	movhi	r2,1
   10a30:	88a3883a 	add	r17,r17,r2
   10a34:	4006d43a 	srli	r3,r8,16
   10a38:	4010943a 	slli	r8,r8,16
   10a3c:	9809883a 	mov	r4,r19
   10a40:	e00b883a 	mov	r5,fp
   10a44:	843fffcc 	andi	r16,r16,65535
   10a48:	88e3883a 	add	r17,r17,r3
   10a4c:	4421883a 	add	r16,r8,r16
   10a50:	0010aa00 	call	10aa0 <__mulsi3>
   10a54:	a009883a 	mov	r4,r20
   10a58:	900b883a 	mov	r5,r18
   10a5c:	1027883a 	mov	r19,r2
   10a60:	0010aa00 	call	10aa0 <__mulsi3>
   10a64:	9885883a 	add	r2,r19,r2
   10a68:	1447883a 	add	r3,r2,r17
   10a6c:	8005883a 	mov	r2,r16
   10a70:	dfc00917 	ldw	ra,36(sp)
   10a74:	df000817 	ldw	fp,32(sp)
   10a78:	ddc00717 	ldw	r23,28(sp)
   10a7c:	dd800617 	ldw	r22,24(sp)
   10a80:	dd400517 	ldw	r21,20(sp)
   10a84:	dd000417 	ldw	r20,16(sp)
   10a88:	dcc00317 	ldw	r19,12(sp)
   10a8c:	dc800217 	ldw	r18,8(sp)
   10a90:	dc400117 	ldw	r17,4(sp)
   10a94:	dc000017 	ldw	r16,0(sp)
   10a98:	dec00a04 	addi	sp,sp,40
   10a9c:	f800283a 	ret

00010aa0 <__mulsi3>:
   10aa0:	0005883a 	mov	r2,zero
   10aa4:	20000726 	beq	r4,zero,10ac4 <__mulsi3+0x24>
   10aa8:	20c0004c 	andi	r3,r4,1
   10aac:	2008d07a 	srli	r4,r4,1
   10ab0:	18000126 	beq	r3,zero,10ab8 <__mulsi3+0x18>
   10ab4:	1145883a 	add	r2,r2,r5
   10ab8:	294b883a 	add	r5,r5,r5
   10abc:	203ffa1e 	bne	r4,zero,10aa8 <_gp+0xffff3de8>
   10ac0:	f800283a 	ret
   10ac4:	f800283a 	ret

00010ac8 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   10ac8:	defff404 	addi	sp,sp,-48
   10acc:	dfc00b15 	stw	ra,44(sp)
   10ad0:	df000a15 	stw	fp,40(sp)
   10ad4:	dd000915 	stw	r20,36(sp)
   10ad8:	dcc00815 	stw	r19,32(sp)
   10adc:	dc800715 	stw	r18,28(sp)
   10ae0:	dc400615 	stw	r17,24(sp)
   10ae4:	dc000515 	stw	r16,20(sp)
   10ae8:	df000a04 	addi	fp,sp,40
   10aec:	e13ff915 	stw	r4,-28(fp)
   10af0:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   10af4:	e0bffa17 	ldw	r2,-24(fp)
   10af8:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10afc:	00800074 	movhi	r2,1
   10b00:	1098e404 	addi	r2,r2,25488
   10b04:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   10b08:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10b0c:	00800074 	movhi	r2,1
   10b10:	1098e304 	addi	r2,r2,25484
   10b14:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
   10b18:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   10b1c:	e0bff817 	ldw	r2,-32(fp)
   10b20:	10006326 	beq	r2,zero,10cb0 <gettimeofday+0x1e8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   10b24:	d0a5ad17 	ldw	r2,-26956(gp)
   10b28:	1029883a 	mov	r20,r2
   10b2c:	e13ff717 	ldw	r4,-36(fp)
   10b30:	e17ff817 	ldw	r5,-32(fp)
   10b34:	00108600 	call	10860 <__udivsi3>
   10b38:	a085883a 	add	r2,r20,r2
   10b3c:	1007883a 	mov	r3,r2
   10b40:	e0bff917 	ldw	r2,-28(fp)
   10b44:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   10b48:	d0a5ae04 	addi	r2,gp,-26952
   10b4c:	10800017 	ldw	r2,0(r2)
   10b50:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   10b54:	e0bff717 	ldw	r2,-36(fp)
   10b58:	1025883a 	mov	r18,r2
   10b5c:	0027883a 	mov	r19,zero
   10b60:	010003f4 	movhi	r4,15
   10b64:	21109004 	addi	r4,r4,16960
   10b68:	e17ff817 	ldw	r5,-32(fp)
   10b6c:	00108600 	call	10860 <__udivsi3>
   10b70:	1021883a 	mov	r16,r2
   10b74:	0023883a 	mov	r17,zero
   10b78:	9009883a 	mov	r4,r18
   10b7c:	980b883a 	mov	r5,r19
   10b80:	800d883a 	mov	r6,r16
   10b84:	880f883a 	mov	r7,r17
   10b88:	00109940 	call	10994 <__muldi3>
   10b8c:	100f883a 	mov	r7,r2
   10b90:	1811883a 	mov	r8,r3
   10b94:	380b883a 	mov	r5,r7
   10b98:	400d883a 	mov	r6,r8
   10b9c:	008003f4 	movhi	r2,15
   10ba0:	10909004 	addi	r2,r2,16960
   10ba4:	0007883a 	mov	r3,zero
   10ba8:	2809883a 	mov	r4,r5
   10bac:	300b883a 	mov	r5,r6
   10bb0:	100d883a 	mov	r6,r2
   10bb4:	180f883a 	mov	r7,r3
   10bb8:	0012f0c0 	call	12f0c <__umoddi3>
   10bbc:	1009883a 	mov	r4,r2
   10bc0:	180b883a 	mov	r5,r3
   10bc4:	2005883a 	mov	r2,r4
   10bc8:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   10bcc:	a085883a 	add	r2,r20,r2
   10bd0:	1007883a 	mov	r3,r2
   10bd4:	e0bff917 	ldw	r2,-28(fp)
   10bd8:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   10bdc:	00001406 	br	10c30 <gettimeofday+0x168>
      if (ptimeval->tv_sec <= 0)
   10be0:	e0bff917 	ldw	r2,-28(fp)
   10be4:	10800017 	ldw	r2,0(r2)
   10be8:	00800516 	blt	zero,r2,10c00 <gettimeofday+0x138>
      {
          ptimeval->tv_sec = 0;
   10bec:	e0bff917 	ldw	r2,-28(fp)
   10bf0:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   10bf4:	e0bff917 	ldw	r2,-28(fp)
   10bf8:	10000115 	stw	zero,4(r2)
          break;
   10bfc:	00000f06 	br	10c3c <gettimeofday+0x174>
      }
      else
      {
          ptimeval->tv_sec--;
   10c00:	e0bff917 	ldw	r2,-28(fp)
   10c04:	10800017 	ldw	r2,0(r2)
   10c08:	10ffffc4 	addi	r3,r2,-1
   10c0c:	e0bff917 	ldw	r2,-28(fp)
   10c10:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   10c14:	e0bff917 	ldw	r2,-28(fp)
   10c18:	10c00117 	ldw	r3,4(r2)
   10c1c:	008003f4 	movhi	r2,15
   10c20:	10909004 	addi	r2,r2,16960
   10c24:	1887883a 	add	r3,r3,r2
   10c28:	e0bff917 	ldw	r2,-28(fp)
   10c2c:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   10c30:	e0bff917 	ldw	r2,-28(fp)
   10c34:	10800117 	ldw	r2,4(r2)
   10c38:	103fe916 	blt	r2,zero,10be0 <_gp+0xffff3f20>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   10c3c:	00000c06 	br	10c70 <gettimeofday+0x1a8>
      ptimeval->tv_sec++;
   10c40:	e0bff917 	ldw	r2,-28(fp)
   10c44:	10800017 	ldw	r2,0(r2)
   10c48:	10c00044 	addi	r3,r2,1
   10c4c:	e0bff917 	ldw	r2,-28(fp)
   10c50:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   10c54:	e0bff917 	ldw	r2,-28(fp)
   10c58:	10c00117 	ldw	r3,4(r2)
   10c5c:	00bffc74 	movhi	r2,65521
   10c60:	10af7004 	addi	r2,r2,-16960
   10c64:	1887883a 	add	r3,r3,r2
   10c68:	e0bff917 	ldw	r2,-28(fp)
   10c6c:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   10c70:	e0bff917 	ldw	r2,-28(fp)
   10c74:	10c00117 	ldw	r3,4(r2)
   10c78:	008003f4 	movhi	r2,15
   10c7c:	10908fc4 	addi	r2,r2,16959
   10c80:	10ffef16 	blt	r2,r3,10c40 <_gp+0xffff3f80>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   10c84:	e0bff617 	ldw	r2,-40(fp)
   10c88:	10000726 	beq	r2,zero,10ca8 <gettimeofday+0x1e0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   10c8c:	d0e5ab17 	ldw	r3,-26964(gp)
   10c90:	e0bff617 	ldw	r2,-40(fp)
   10c94:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   10c98:	d0a5ac04 	addi	r2,gp,-26960
   10c9c:	10c00017 	ldw	r3,0(r2)
   10ca0:	e0bff617 	ldw	r2,-40(fp)
   10ca4:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   10ca8:	0005883a 	mov	r2,zero
   10cac:	00000106 	br	10cb4 <gettimeofday+0x1ec>
  }

  return -ENOTSUP;
   10cb0:	00bfde84 	movi	r2,-134
}
   10cb4:	e6fffb04 	addi	sp,fp,-20
   10cb8:	dfc00617 	ldw	ra,24(sp)
   10cbc:	df000517 	ldw	fp,20(sp)
   10cc0:	dd000417 	ldw	r20,16(sp)
   10cc4:	dcc00317 	ldw	r19,12(sp)
   10cc8:	dc800217 	ldw	r18,8(sp)
   10ccc:	dc400117 	ldw	r17,4(sp)
   10cd0:	dc000017 	ldw	r16,0(sp)
   10cd4:	dec00704 	addi	sp,sp,28
   10cd8:	f800283a 	ret

00010cdc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10cdc:	defff904 	addi	sp,sp,-28
   10ce0:	dfc00615 	stw	ra,24(sp)
   10ce4:	df000515 	stw	fp,20(sp)
   10ce8:	df000504 	addi	fp,sp,20
   10cec:	e13ffc15 	stw	r4,-16(fp)
   10cf0:	e17ffd15 	stw	r5,-12(fp)
   10cf4:	e1bffe15 	stw	r6,-8(fp)
   10cf8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10cfc:	e0800217 	ldw	r2,8(fp)
   10d00:	d8800015 	stw	r2,0(sp)
   10d04:	e13ffc17 	ldw	r4,-16(fp)
   10d08:	e17ffd17 	ldw	r5,-12(fp)
   10d0c:	e1bffe17 	ldw	r6,-8(fp)
   10d10:	e1ffff17 	ldw	r7,-4(fp)
   10d14:	0010ebc0 	call	10ebc <alt_iic_isr_register>
}  
   10d18:	e037883a 	mov	sp,fp
   10d1c:	dfc00117 	ldw	ra,4(sp)
   10d20:	df000017 	ldw	fp,0(sp)
   10d24:	dec00204 	addi	sp,sp,8
   10d28:	f800283a 	ret

00010d2c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10d2c:	defff904 	addi	sp,sp,-28
   10d30:	df000615 	stw	fp,24(sp)
   10d34:	df000604 	addi	fp,sp,24
   10d38:	e13ffe15 	stw	r4,-8(fp)
   10d3c:	e17fff15 	stw	r5,-4(fp)
   10d40:	e0bfff17 	ldw	r2,-4(fp)
   10d44:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d48:	0005303a 	rdctl	r2,status
   10d4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d50:	e0fffb17 	ldw	r3,-20(fp)
   10d54:	00bfff84 	movi	r2,-2
   10d58:	1884703a 	and	r2,r3,r2
   10d5c:	1001703a 	wrctl	status,r2
  
  return context;
   10d60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10d64:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10d68:	e0bffa17 	ldw	r2,-24(fp)
   10d6c:	00c00044 	movi	r3,1
   10d70:	1884983a 	sll	r2,r3,r2
   10d74:	1007883a 	mov	r3,r2
   10d78:	00800074 	movhi	r2,1
   10d7c:	1098df04 	addi	r2,r2,25468
   10d80:	10800017 	ldw	r2,0(r2)
   10d84:	1886b03a 	or	r3,r3,r2
   10d88:	00800074 	movhi	r2,1
   10d8c:	1098df04 	addi	r2,r2,25468
   10d90:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10d94:	00800074 	movhi	r2,1
   10d98:	1098df04 	addi	r2,r2,25468
   10d9c:	10800017 	ldw	r2,0(r2)
   10da0:	100170fa 	wrctl	ienable,r2
   10da4:	e0bffc17 	ldw	r2,-16(fp)
   10da8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dac:	e0bffd17 	ldw	r2,-12(fp)
   10db0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10db4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10db8:	0001883a 	nop
}
   10dbc:	e037883a 	mov	sp,fp
   10dc0:	df000017 	ldw	fp,0(sp)
   10dc4:	dec00104 	addi	sp,sp,4
   10dc8:	f800283a 	ret

00010dcc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10dcc:	defff904 	addi	sp,sp,-28
   10dd0:	df000615 	stw	fp,24(sp)
   10dd4:	df000604 	addi	fp,sp,24
   10dd8:	e13ffe15 	stw	r4,-8(fp)
   10ddc:	e17fff15 	stw	r5,-4(fp)
   10de0:	e0bfff17 	ldw	r2,-4(fp)
   10de4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10de8:	0005303a 	rdctl	r2,status
   10dec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10df0:	e0fffb17 	ldw	r3,-20(fp)
   10df4:	00bfff84 	movi	r2,-2
   10df8:	1884703a 	and	r2,r3,r2
   10dfc:	1001703a 	wrctl	status,r2
  
  return context;
   10e00:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10e04:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10e08:	e0bffa17 	ldw	r2,-24(fp)
   10e0c:	00c00044 	movi	r3,1
   10e10:	1884983a 	sll	r2,r3,r2
   10e14:	0084303a 	nor	r2,zero,r2
   10e18:	1007883a 	mov	r3,r2
   10e1c:	00800074 	movhi	r2,1
   10e20:	1098df04 	addi	r2,r2,25468
   10e24:	10800017 	ldw	r2,0(r2)
   10e28:	1886703a 	and	r3,r3,r2
   10e2c:	00800074 	movhi	r2,1
   10e30:	1098df04 	addi	r2,r2,25468
   10e34:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10e38:	00800074 	movhi	r2,1
   10e3c:	1098df04 	addi	r2,r2,25468
   10e40:	10800017 	ldw	r2,0(r2)
   10e44:	100170fa 	wrctl	ienable,r2
   10e48:	e0bffc17 	ldw	r2,-16(fp)
   10e4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e50:	e0bffd17 	ldw	r2,-12(fp)
   10e54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10e58:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10e5c:	0001883a 	nop
}
   10e60:	e037883a 	mov	sp,fp
   10e64:	df000017 	ldw	fp,0(sp)
   10e68:	dec00104 	addi	sp,sp,4
   10e6c:	f800283a 	ret

00010e70 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10e70:	defffc04 	addi	sp,sp,-16
   10e74:	df000315 	stw	fp,12(sp)
   10e78:	df000304 	addi	fp,sp,12
   10e7c:	e13ffe15 	stw	r4,-8(fp)
   10e80:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10e84:	000530fa 	rdctl	r2,ienable
   10e88:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10e8c:	e0bfff17 	ldw	r2,-4(fp)
   10e90:	00c00044 	movi	r3,1
   10e94:	1884983a 	sll	r2,r3,r2
   10e98:	1007883a 	mov	r3,r2
   10e9c:	e0bffd17 	ldw	r2,-12(fp)
   10ea0:	1884703a 	and	r2,r3,r2
   10ea4:	1004c03a 	cmpne	r2,r2,zero
   10ea8:	10803fcc 	andi	r2,r2,255
}
   10eac:	e037883a 	mov	sp,fp
   10eb0:	df000017 	ldw	fp,0(sp)
   10eb4:	dec00104 	addi	sp,sp,4
   10eb8:	f800283a 	ret

00010ebc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10ebc:	defff504 	addi	sp,sp,-44
   10ec0:	dfc00a15 	stw	ra,40(sp)
   10ec4:	df000915 	stw	fp,36(sp)
   10ec8:	df000904 	addi	fp,sp,36
   10ecc:	e13ffc15 	stw	r4,-16(fp)
   10ed0:	e17ffd15 	stw	r5,-12(fp)
   10ed4:	e1bffe15 	stw	r6,-8(fp)
   10ed8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10edc:	00bffa84 	movi	r2,-22
   10ee0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10ee4:	e0bffd17 	ldw	r2,-12(fp)
   10ee8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10eec:	e0bff817 	ldw	r2,-32(fp)
   10ef0:	10800808 	cmpgei	r2,r2,32
   10ef4:	1000271e 	bne	r2,zero,10f94 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ef8:	0005303a 	rdctl	r2,status
   10efc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f00:	e0fffa17 	ldw	r3,-24(fp)
   10f04:	00bfff84 	movi	r2,-2
   10f08:	1884703a 	and	r2,r3,r2
   10f0c:	1001703a 	wrctl	status,r2
  
  return context;
   10f10:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10f14:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   10f18:	00800074 	movhi	r2,1
   10f1c:	1098e604 	addi	r2,r2,25496
   10f20:	e0fff817 	ldw	r3,-32(fp)
   10f24:	180690fa 	slli	r3,r3,3
   10f28:	10c5883a 	add	r2,r2,r3
   10f2c:	e0fffe17 	ldw	r3,-8(fp)
   10f30:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10f34:	00800074 	movhi	r2,1
   10f38:	1098e604 	addi	r2,r2,25496
   10f3c:	e0fff817 	ldw	r3,-32(fp)
   10f40:	180690fa 	slli	r3,r3,3
   10f44:	18c00104 	addi	r3,r3,4
   10f48:	10c5883a 	add	r2,r2,r3
   10f4c:	e0ffff17 	ldw	r3,-4(fp)
   10f50:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10f54:	e0bffe17 	ldw	r2,-8(fp)
   10f58:	10000526 	beq	r2,zero,10f70 <alt_iic_isr_register+0xb4>
   10f5c:	e0bff817 	ldw	r2,-32(fp)
   10f60:	e13ffc17 	ldw	r4,-16(fp)
   10f64:	100b883a 	mov	r5,r2
   10f68:	0010d2c0 	call	10d2c <alt_ic_irq_enable>
   10f6c:	00000406 	br	10f80 <alt_iic_isr_register+0xc4>
   10f70:	e0bff817 	ldw	r2,-32(fp)
   10f74:	e13ffc17 	ldw	r4,-16(fp)
   10f78:	100b883a 	mov	r5,r2
   10f7c:	0010dcc0 	call	10dcc <alt_ic_irq_disable>
   10f80:	e0bff715 	stw	r2,-36(fp)
   10f84:	e0bff917 	ldw	r2,-28(fp)
   10f88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f8c:	e0bffb17 	ldw	r2,-20(fp)
   10f90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10f94:	e0bff717 	ldw	r2,-36(fp)
}
   10f98:	e037883a 	mov	sp,fp
   10f9c:	dfc00117 	ldw	ra,4(sp)
   10fa0:	df000017 	ldw	fp,0(sp)
   10fa4:	dec00204 	addi	sp,sp,8
   10fa8:	f800283a 	ret

00010fac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10fac:	defffc04 	addi	sp,sp,-16
   10fb0:	df000315 	stw	fp,12(sp)
   10fb4:	df000304 	addi	fp,sp,12
   10fb8:	e13ffd15 	stw	r4,-12(fp)
   10fbc:	e17ffe15 	stw	r5,-8(fp)
   10fc0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10fc4:	e0fffe17 	ldw	r3,-8(fp)
   10fc8:	e0bffd17 	ldw	r2,-12(fp)
   10fcc:	18800c26 	beq	r3,r2,11000 <alt_load_section+0x54>
  {
    while( to != end )
   10fd0:	00000806 	br	10ff4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10fd4:	e0bffe17 	ldw	r2,-8(fp)
   10fd8:	10c00104 	addi	r3,r2,4
   10fdc:	e0fffe15 	stw	r3,-8(fp)
   10fe0:	e0fffd17 	ldw	r3,-12(fp)
   10fe4:	19000104 	addi	r4,r3,4
   10fe8:	e13ffd15 	stw	r4,-12(fp)
   10fec:	18c00017 	ldw	r3,0(r3)
   10ff0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10ff4:	e0fffe17 	ldw	r3,-8(fp)
   10ff8:	e0bfff17 	ldw	r2,-4(fp)
   10ffc:	18bff51e 	bne	r3,r2,10fd4 <_gp+0xffff4314>
    {
      *to++ = *from++;
    }
  }
}
   11000:	e037883a 	mov	sp,fp
   11004:	df000017 	ldw	fp,0(sp)
   11008:	dec00104 	addi	sp,sp,4
   1100c:	f800283a 	ret

00011010 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11010:	defffe04 	addi	sp,sp,-8
   11014:	dfc00115 	stw	ra,4(sp)
   11018:	df000015 	stw	fp,0(sp)
   1101c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   11020:	01000074 	movhi	r4,1
   11024:	21133d04 	addi	r4,r4,19700
   11028:	01400074 	movhi	r5,1
   1102c:	294da504 	addi	r5,r5,13972
   11030:	01800074 	movhi	r6,1
   11034:	31933d04 	addi	r6,r6,19700
   11038:	0010fac0 	call	10fac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1103c:	01000074 	movhi	r4,1
   11040:	21000804 	addi	r4,r4,32
   11044:	01400074 	movhi	r5,1
   11048:	29400804 	addi	r5,r5,32
   1104c:	01800074 	movhi	r6,1
   11050:	31808b04 	addi	r6,r6,556
   11054:	0010fac0 	call	10fac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   11058:	01000074 	movhi	r4,1
   1105c:	210d5704 	addi	r4,r4,13660
   11060:	01400074 	movhi	r5,1
   11064:	294d5704 	addi	r5,r5,13660
   11068:	01800074 	movhi	r6,1
   1106c:	318da504 	addi	r6,r6,13972
   11070:	0010fac0 	call	10fac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11074:	001200c0 	call	1200c <alt_dcache_flush_all>
  alt_icache_flush_all();
   11078:	00122000 	call	12200 <alt_icache_flush_all>
}
   1107c:	e037883a 	mov	sp,fp
   11080:	dfc00117 	ldw	ra,4(sp)
   11084:	df000017 	ldw	fp,0(sp)
   11088:	dec00204 	addi	sp,sp,8
   1108c:	f800283a 	ret

00011090 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11090:	defffd04 	addi	sp,sp,-12
   11094:	dfc00215 	stw	ra,8(sp)
   11098:	df000115 	stw	fp,4(sp)
   1109c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   110a0:	0009883a 	mov	r4,zero
   110a4:	00112dc0 	call	112dc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   110a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   110ac:	00113100 	call	11310 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   110b0:	01000074 	movhi	r4,1
   110b4:	210d5804 	addi	r4,r4,13664
   110b8:	01400074 	movhi	r5,1
   110bc:	294d5804 	addi	r5,r5,13664
   110c0:	01800074 	movhi	r6,1
   110c4:	318d5804 	addi	r6,r6,13664
   110c8:	00123980 	call	12398 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   110cc:	00121480 	call	12148 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   110d0:	01000074 	movhi	r4,1
   110d4:	21086904 	addi	r4,r4,8612
   110d8:	00129cc0 	call	129cc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   110dc:	d125b017 	ldw	r4,-26944(gp)
   110e0:	d0e5b117 	ldw	r3,-26940(gp)
   110e4:	d0a5b217 	ldw	r2,-26936(gp)
   110e8:	180b883a 	mov	r5,r3
   110ec:	100d883a 	mov	r6,r2
   110f0:	001069c0 	call	1069c <main>
   110f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   110f8:	01000044 	movi	r4,1
   110fc:	0011f340 	call	11f34 <close>
  exit (result);
   11100:	e13fff17 	ldw	r4,-4(fp)
   11104:	00129e00 	call	129e0 <exit>

00011108 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11108:	defffa04 	addi	sp,sp,-24
   1110c:	df000515 	stw	fp,20(sp)
   11110:	df000504 	addi	fp,sp,20
   11114:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11118:	0005303a 	rdctl	r2,status
   1111c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11120:	e0fffc17 	ldw	r3,-16(fp)
   11124:	00bfff84 	movi	r2,-2
   11128:	1884703a 	and	r2,r3,r2
   1112c:	1001703a 	wrctl	status,r2
  
  return context;
   11130:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11134:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11138:	e0bfff17 	ldw	r2,-4(fp)
   1113c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11140:	e0bffd17 	ldw	r2,-12(fp)
   11144:	10800017 	ldw	r2,0(r2)
   11148:	e0fffd17 	ldw	r3,-12(fp)
   1114c:	18c00117 	ldw	r3,4(r3)
   11150:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11154:	e0bffd17 	ldw	r2,-12(fp)
   11158:	10800117 	ldw	r2,4(r2)
   1115c:	e0fffd17 	ldw	r3,-12(fp)
   11160:	18c00017 	ldw	r3,0(r3)
   11164:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11168:	e0bffd17 	ldw	r2,-12(fp)
   1116c:	e0fffd17 	ldw	r3,-12(fp)
   11170:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11174:	e0bffd17 	ldw	r2,-12(fp)
   11178:	e0fffd17 	ldw	r3,-12(fp)
   1117c:	10c00015 	stw	r3,0(r2)
   11180:	e0bffb17 	ldw	r2,-20(fp)
   11184:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11188:	e0bffe17 	ldw	r2,-8(fp)
   1118c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11190:	e037883a 	mov	sp,fp
   11194:	df000017 	ldw	fp,0(sp)
   11198:	dec00104 	addi	sp,sp,4
   1119c:	f800283a 	ret

000111a0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   111a0:	defffb04 	addi	sp,sp,-20
   111a4:	dfc00415 	stw	ra,16(sp)
   111a8:	df000315 	stw	fp,12(sp)
   111ac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   111b0:	d0a00517 	ldw	r2,-32748(gp)
   111b4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   111b8:	d0a5b417 	ldw	r2,-26928(gp)
   111bc:	10800044 	addi	r2,r2,1
   111c0:	d0a5b415 	stw	r2,-26928(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   111c4:	00002e06 	br	11280 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   111c8:	e0bffd17 	ldw	r2,-12(fp)
   111cc:	10800017 	ldw	r2,0(r2)
   111d0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   111d4:	e0bffd17 	ldw	r2,-12(fp)
   111d8:	10800403 	ldbu	r2,16(r2)
   111dc:	10803fcc 	andi	r2,r2,255
   111e0:	10000426 	beq	r2,zero,111f4 <alt_tick+0x54>
   111e4:	d0a5b417 	ldw	r2,-26928(gp)
   111e8:	1000021e 	bne	r2,zero,111f4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   111ec:	e0bffd17 	ldw	r2,-12(fp)
   111f0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   111f4:	e0bffd17 	ldw	r2,-12(fp)
   111f8:	10800217 	ldw	r2,8(r2)
   111fc:	d0e5b417 	ldw	r3,-26928(gp)
   11200:	18801d36 	bltu	r3,r2,11278 <alt_tick+0xd8>
   11204:	e0bffd17 	ldw	r2,-12(fp)
   11208:	10800403 	ldbu	r2,16(r2)
   1120c:	10803fcc 	andi	r2,r2,255
   11210:	1000191e 	bne	r2,zero,11278 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11214:	e0bffd17 	ldw	r2,-12(fp)
   11218:	10800317 	ldw	r2,12(r2)
   1121c:	e0fffd17 	ldw	r3,-12(fp)
   11220:	18c00517 	ldw	r3,20(r3)
   11224:	1809883a 	mov	r4,r3
   11228:	103ee83a 	callr	r2
   1122c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11230:	e0bfff17 	ldw	r2,-4(fp)
   11234:	1000031e 	bne	r2,zero,11244 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11238:	e13ffd17 	ldw	r4,-12(fp)
   1123c:	00111080 	call	11108 <alt_alarm_stop>
   11240:	00000d06 	br	11278 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11244:	e0bffd17 	ldw	r2,-12(fp)
   11248:	10c00217 	ldw	r3,8(r2)
   1124c:	e0bfff17 	ldw	r2,-4(fp)
   11250:	1887883a 	add	r3,r3,r2
   11254:	e0bffd17 	ldw	r2,-12(fp)
   11258:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1125c:	e0bffd17 	ldw	r2,-12(fp)
   11260:	10c00217 	ldw	r3,8(r2)
   11264:	d0a5b417 	ldw	r2,-26928(gp)
   11268:	1880032e 	bgeu	r3,r2,11278 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1126c:	e0bffd17 	ldw	r2,-12(fp)
   11270:	00c00044 	movi	r3,1
   11274:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11278:	e0bffe17 	ldw	r2,-8(fp)
   1127c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11280:	e0fffd17 	ldw	r3,-12(fp)
   11284:	d0a00504 	addi	r2,gp,-32748
   11288:	18bfcf1e 	bne	r3,r2,111c8 <_gp+0xffff4508>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1128c:	0001883a 	nop
}
   11290:	e037883a 	mov	sp,fp
   11294:	dfc00117 	ldw	ra,4(sp)
   11298:	df000017 	ldw	fp,0(sp)
   1129c:	dec00204 	addi	sp,sp,8
   112a0:	f800283a 	ret

000112a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   112a4:	defffd04 	addi	sp,sp,-12
   112a8:	dfc00215 	stw	ra,8(sp)
   112ac:	df000115 	stw	fp,4(sp)
   112b0:	df000104 	addi	fp,sp,4
   112b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   112b8:	e13fff17 	ldw	r4,-4(fp)
   112bc:	01400074 	movhi	r5,1
   112c0:	29533904 	addi	r5,r5,19684
   112c4:	00120a40 	call	120a4 <alt_dev_llist_insert>
}
   112c8:	e037883a 	mov	sp,fp
   112cc:	dfc00117 	ldw	ra,4(sp)
   112d0:	df000017 	ldw	fp,0(sp)
   112d4:	dec00204 	addi	sp,sp,8
   112d8:	f800283a 	ret

000112dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   112dc:	defffd04 	addi	sp,sp,-12
   112e0:	dfc00215 	stw	ra,8(sp)
   112e4:	df000115 	stw	fp,4(sp)
   112e8:	df000104 	addi	fp,sp,4
   112ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   112f0:	00127340 	call	12734 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   112f4:	00800044 	movi	r2,1
   112f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   112fc:	e037883a 	mov	sp,fp
   11300:	dfc00117 	ldw	ra,4(sp)
   11304:	df000017 	ldw	fp,0(sp)
   11308:	dec00204 	addi	sp,sp,8
   1130c:	f800283a 	ret

00011310 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11310:	defffe04 	addi	sp,sp,-8
   11314:	dfc00115 	stw	ra,4(sp)
   11318:	df000015 	stw	fp,0(sp)
   1131c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   11320:	01000074 	movhi	r4,1
   11324:	210eb804 	addi	r4,r4,15072
   11328:	000b883a 	mov	r5,zero
   1132c:	000d883a 	mov	r6,zero
   11330:	00114bc0 	call	114bc <altera_avalon_jtag_uart_init>
   11334:	01000074 	movhi	r4,1
   11338:	210eae04 	addi	r4,r4,15032
   1133c:	00112a40 	call	112a4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   11340:	0001883a 	nop
}
   11344:	e037883a 	mov	sp,fp
   11348:	dfc00117 	ldw	ra,4(sp)
   1134c:	df000017 	ldw	fp,0(sp)
   11350:	dec00204 	addi	sp,sp,8
   11354:	f800283a 	ret

00011358 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11358:	defffa04 	addi	sp,sp,-24
   1135c:	dfc00515 	stw	ra,20(sp)
   11360:	df000415 	stw	fp,16(sp)
   11364:	df000404 	addi	fp,sp,16
   11368:	e13ffd15 	stw	r4,-12(fp)
   1136c:	e17ffe15 	stw	r5,-8(fp)
   11370:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11374:	e0bffd17 	ldw	r2,-12(fp)
   11378:	10800017 	ldw	r2,0(r2)
   1137c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11380:	e0bffc17 	ldw	r2,-16(fp)
   11384:	10c00a04 	addi	r3,r2,40
   11388:	e0bffd17 	ldw	r2,-12(fp)
   1138c:	10800217 	ldw	r2,8(r2)
   11390:	1809883a 	mov	r4,r3
   11394:	e17ffe17 	ldw	r5,-8(fp)
   11398:	e1bfff17 	ldw	r6,-4(fp)
   1139c:	100f883a 	mov	r7,r2
   113a0:	00119800 	call	11980 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   113a4:	e037883a 	mov	sp,fp
   113a8:	dfc00117 	ldw	ra,4(sp)
   113ac:	df000017 	ldw	fp,0(sp)
   113b0:	dec00204 	addi	sp,sp,8
   113b4:	f800283a 	ret

000113b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   113b8:	defffa04 	addi	sp,sp,-24
   113bc:	dfc00515 	stw	ra,20(sp)
   113c0:	df000415 	stw	fp,16(sp)
   113c4:	df000404 	addi	fp,sp,16
   113c8:	e13ffd15 	stw	r4,-12(fp)
   113cc:	e17ffe15 	stw	r5,-8(fp)
   113d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   113d4:	e0bffd17 	ldw	r2,-12(fp)
   113d8:	10800017 	ldw	r2,0(r2)
   113dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   113e0:	e0bffc17 	ldw	r2,-16(fp)
   113e4:	10c00a04 	addi	r3,r2,40
   113e8:	e0bffd17 	ldw	r2,-12(fp)
   113ec:	10800217 	ldw	r2,8(r2)
   113f0:	1809883a 	mov	r4,r3
   113f4:	e17ffe17 	ldw	r5,-8(fp)
   113f8:	e1bfff17 	ldw	r6,-4(fp)
   113fc:	100f883a 	mov	r7,r2
   11400:	0011b8c0 	call	11b8c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   11404:	e037883a 	mov	sp,fp
   11408:	dfc00117 	ldw	ra,4(sp)
   1140c:	df000017 	ldw	fp,0(sp)
   11410:	dec00204 	addi	sp,sp,8
   11414:	f800283a 	ret

00011418 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11418:	defffc04 	addi	sp,sp,-16
   1141c:	dfc00315 	stw	ra,12(sp)
   11420:	df000215 	stw	fp,8(sp)
   11424:	df000204 	addi	fp,sp,8
   11428:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1142c:	e0bfff17 	ldw	r2,-4(fp)
   11430:	10800017 	ldw	r2,0(r2)
   11434:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11438:	e0bffe17 	ldw	r2,-8(fp)
   1143c:	10c00a04 	addi	r3,r2,40
   11440:	e0bfff17 	ldw	r2,-4(fp)
   11444:	10800217 	ldw	r2,8(r2)
   11448:	1809883a 	mov	r4,r3
   1144c:	100b883a 	mov	r5,r2
   11450:	001182c0 	call	1182c <altera_avalon_jtag_uart_close>
}
   11454:	e037883a 	mov	sp,fp
   11458:	dfc00117 	ldw	ra,4(sp)
   1145c:	df000017 	ldw	fp,0(sp)
   11460:	dec00204 	addi	sp,sp,8
   11464:	f800283a 	ret

00011468 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   11468:	defffa04 	addi	sp,sp,-24
   1146c:	dfc00515 	stw	ra,20(sp)
   11470:	df000415 	stw	fp,16(sp)
   11474:	df000404 	addi	fp,sp,16
   11478:	e13ffd15 	stw	r4,-12(fp)
   1147c:	e17ffe15 	stw	r5,-8(fp)
   11480:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   11484:	e0bffd17 	ldw	r2,-12(fp)
   11488:	10800017 	ldw	r2,0(r2)
   1148c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   11490:	e0bffc17 	ldw	r2,-16(fp)
   11494:	10800a04 	addi	r2,r2,40
   11498:	1009883a 	mov	r4,r2
   1149c:	e17ffe17 	ldw	r5,-8(fp)
   114a0:	e1bfff17 	ldw	r6,-4(fp)
   114a4:	00118940 	call	11894 <altera_avalon_jtag_uart_ioctl>
}
   114a8:	e037883a 	mov	sp,fp
   114ac:	dfc00117 	ldw	ra,4(sp)
   114b0:	df000017 	ldw	fp,0(sp)
   114b4:	dec00204 	addi	sp,sp,8
   114b8:	f800283a 	ret

000114bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   114bc:	defffa04 	addi	sp,sp,-24
   114c0:	dfc00515 	stw	ra,20(sp)
   114c4:	df000415 	stw	fp,16(sp)
   114c8:	df000404 	addi	fp,sp,16
   114cc:	e13ffd15 	stw	r4,-12(fp)
   114d0:	e17ffe15 	stw	r5,-8(fp)
   114d4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   114d8:	e0bffd17 	ldw	r2,-12(fp)
   114dc:	00c00044 	movi	r3,1
   114e0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   114e4:	e0bffd17 	ldw	r2,-12(fp)
   114e8:	10800017 	ldw	r2,0(r2)
   114ec:	10800104 	addi	r2,r2,4
   114f0:	1007883a 	mov	r3,r2
   114f4:	e0bffd17 	ldw	r2,-12(fp)
   114f8:	10800817 	ldw	r2,32(r2)
   114fc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   11500:	e0fffe17 	ldw	r3,-8(fp)
   11504:	e0bfff17 	ldw	r2,-4(fp)
   11508:	d8000015 	stw	zero,0(sp)
   1150c:	1809883a 	mov	r4,r3
   11510:	100b883a 	mov	r5,r2
   11514:	01800074 	movhi	r6,1
   11518:	31856004 	addi	r6,r6,5504
   1151c:	e1fffd17 	ldw	r7,-12(fp)
   11520:	0010cdc0 	call	10cdc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   11524:	e0bffd17 	ldw	r2,-12(fp)
   11528:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1152c:	e0bffd17 	ldw	r2,-12(fp)
   11530:	10c00204 	addi	r3,r2,8
   11534:	00800074 	movhi	r2,1
   11538:	1098e304 	addi	r2,r2,25484
   1153c:	10800017 	ldw	r2,0(r2)
   11540:	1809883a 	mov	r4,r3
   11544:	100b883a 	mov	r5,r2
   11548:	01800074 	movhi	r6,1
   1154c:	3185e104 	addi	r6,r6,6020
   11550:	e1fffd17 	ldw	r7,-12(fp)
   11554:	0011da40 	call	11da4 <alt_alarm_start>
   11558:	1000040e 	bge	r2,zero,1156c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1155c:	e0fffd17 	ldw	r3,-12(fp)
   11560:	00a00034 	movhi	r2,32768
   11564:	10bfffc4 	addi	r2,r2,-1
   11568:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1156c:	e037883a 	mov	sp,fp
   11570:	dfc00117 	ldw	ra,4(sp)
   11574:	df000017 	ldw	fp,0(sp)
   11578:	dec00204 	addi	sp,sp,8
   1157c:	f800283a 	ret

00011580 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   11580:	defff804 	addi	sp,sp,-32
   11584:	df000715 	stw	fp,28(sp)
   11588:	df000704 	addi	fp,sp,28
   1158c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   11590:	e0bfff17 	ldw	r2,-4(fp)
   11594:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   11598:	e0bffb17 	ldw	r2,-20(fp)
   1159c:	10800017 	ldw	r2,0(r2)
   115a0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   115a4:	e0bffc17 	ldw	r2,-16(fp)
   115a8:	10800104 	addi	r2,r2,4
   115ac:	10800037 	ldwio	r2,0(r2)
   115b0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   115b4:	e0bffd17 	ldw	r2,-12(fp)
   115b8:	1080c00c 	andi	r2,r2,768
   115bc:	1000011e 	bne	r2,zero,115c4 <altera_avalon_jtag_uart_irq+0x44>
      break;
   115c0:	00006c06 	br	11774 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   115c4:	e0bffd17 	ldw	r2,-12(fp)
   115c8:	1080400c 	andi	r2,r2,256
   115cc:	10003426 	beq	r2,zero,116a0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   115d0:	00800074 	movhi	r2,1
   115d4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   115d8:	e0bffb17 	ldw	r2,-20(fp)
   115dc:	10800a17 	ldw	r2,40(r2)
   115e0:	10800044 	addi	r2,r2,1
   115e4:	1081ffcc 	andi	r2,r2,2047
   115e8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   115ec:	e0bffb17 	ldw	r2,-20(fp)
   115f0:	10c00b17 	ldw	r3,44(r2)
   115f4:	e0bffe17 	ldw	r2,-8(fp)
   115f8:	1880011e 	bne	r3,r2,11600 <altera_avalon_jtag_uart_irq+0x80>
          break;
   115fc:	00001606 	br	11658 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11600:	e0bffc17 	ldw	r2,-16(fp)
   11604:	10800037 	ldwio	r2,0(r2)
   11608:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1160c:	e0bff917 	ldw	r2,-28(fp)
   11610:	10a0000c 	andi	r2,r2,32768
   11614:	1000011e 	bne	r2,zero,1161c <altera_avalon_jtag_uart_irq+0x9c>
          break;
   11618:	00000f06 	br	11658 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1161c:	e0bffb17 	ldw	r2,-20(fp)
   11620:	10800a17 	ldw	r2,40(r2)
   11624:	e0fff917 	ldw	r3,-28(fp)
   11628:	1809883a 	mov	r4,r3
   1162c:	e0fffb17 	ldw	r3,-20(fp)
   11630:	1885883a 	add	r2,r3,r2
   11634:	10800e04 	addi	r2,r2,56
   11638:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1163c:	e0bffb17 	ldw	r2,-20(fp)
   11640:	10800a17 	ldw	r2,40(r2)
   11644:	10800044 	addi	r2,r2,1
   11648:	10c1ffcc 	andi	r3,r2,2047
   1164c:	e0bffb17 	ldw	r2,-20(fp)
   11650:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   11654:	003fe006 	br	115d8 <_gp+0xffff4918>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   11658:	e0bff917 	ldw	r2,-28(fp)
   1165c:	10bfffec 	andhi	r2,r2,65535
   11660:	10000f26 	beq	r2,zero,116a0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11664:	e0bffb17 	ldw	r2,-20(fp)
   11668:	10c00817 	ldw	r3,32(r2)
   1166c:	00bfff84 	movi	r2,-2
   11670:	1886703a 	and	r3,r3,r2
   11674:	e0bffb17 	ldw	r2,-20(fp)
   11678:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1167c:	e0bffc17 	ldw	r2,-16(fp)
   11680:	10800104 	addi	r2,r2,4
   11684:	1007883a 	mov	r3,r2
   11688:	e0bffb17 	ldw	r2,-20(fp)
   1168c:	10800817 	ldw	r2,32(r2)
   11690:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11694:	e0bffc17 	ldw	r2,-16(fp)
   11698:	10800104 	addi	r2,r2,4
   1169c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   116a0:	e0bffd17 	ldw	r2,-12(fp)
   116a4:	1080800c 	andi	r2,r2,512
   116a8:	10003126 	beq	r2,zero,11770 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   116ac:	e0bffd17 	ldw	r2,-12(fp)
   116b0:	1004d43a 	srli	r2,r2,16
   116b4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   116b8:	00001406 	br	1170c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   116bc:	e0bffc17 	ldw	r2,-16(fp)
   116c0:	e0fffb17 	ldw	r3,-20(fp)
   116c4:	18c00d17 	ldw	r3,52(r3)
   116c8:	e13ffb17 	ldw	r4,-20(fp)
   116cc:	20c7883a 	add	r3,r4,r3
   116d0:	18c20e04 	addi	r3,r3,2104
   116d4:	18c00003 	ldbu	r3,0(r3)
   116d8:	18c03fcc 	andi	r3,r3,255
   116dc:	18c0201c 	xori	r3,r3,128
   116e0:	18ffe004 	addi	r3,r3,-128
   116e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   116e8:	e0bffb17 	ldw	r2,-20(fp)
   116ec:	10800d17 	ldw	r2,52(r2)
   116f0:	10800044 	addi	r2,r2,1
   116f4:	10c1ffcc 	andi	r3,r2,2047
   116f8:	e0bffb17 	ldw	r2,-20(fp)
   116fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   11700:	e0bffa17 	ldw	r2,-24(fp)
   11704:	10bfffc4 	addi	r2,r2,-1
   11708:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1170c:	e0bffa17 	ldw	r2,-24(fp)
   11710:	10000526 	beq	r2,zero,11728 <altera_avalon_jtag_uart_irq+0x1a8>
   11714:	e0bffb17 	ldw	r2,-20(fp)
   11718:	10c00d17 	ldw	r3,52(r2)
   1171c:	e0bffb17 	ldw	r2,-20(fp)
   11720:	10800c17 	ldw	r2,48(r2)
   11724:	18bfe51e 	bne	r3,r2,116bc <_gp+0xffff49fc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   11728:	e0bffa17 	ldw	r2,-24(fp)
   1172c:	10001026 	beq	r2,zero,11770 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11730:	e0bffb17 	ldw	r2,-20(fp)
   11734:	10c00817 	ldw	r3,32(r2)
   11738:	00bfff44 	movi	r2,-3
   1173c:	1886703a 	and	r3,r3,r2
   11740:	e0bffb17 	ldw	r2,-20(fp)
   11744:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11748:	e0bffb17 	ldw	r2,-20(fp)
   1174c:	10800017 	ldw	r2,0(r2)
   11750:	10800104 	addi	r2,r2,4
   11754:	1007883a 	mov	r3,r2
   11758:	e0bffb17 	ldw	r2,-20(fp)
   1175c:	10800817 	ldw	r2,32(r2)
   11760:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11764:	e0bffc17 	ldw	r2,-16(fp)
   11768:	10800104 	addi	r2,r2,4
   1176c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   11770:	003f8c06 	br	115a4 <_gp+0xffff48e4>
}
   11774:	e037883a 	mov	sp,fp
   11778:	df000017 	ldw	fp,0(sp)
   1177c:	dec00104 	addi	sp,sp,4
   11780:	f800283a 	ret

00011784 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   11784:	defff804 	addi	sp,sp,-32
   11788:	df000715 	stw	fp,28(sp)
   1178c:	df000704 	addi	fp,sp,28
   11790:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   11794:	e0bffb17 	ldw	r2,-20(fp)
   11798:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1179c:	e0bff917 	ldw	r2,-28(fp)
   117a0:	10800017 	ldw	r2,0(r2)
   117a4:	10800104 	addi	r2,r2,4
   117a8:	10800037 	ldwio	r2,0(r2)
   117ac:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   117b0:	e0bffa17 	ldw	r2,-24(fp)
   117b4:	1081000c 	andi	r2,r2,1024
   117b8:	10000b26 	beq	r2,zero,117e8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   117bc:	e0bff917 	ldw	r2,-28(fp)
   117c0:	10800017 	ldw	r2,0(r2)
   117c4:	10800104 	addi	r2,r2,4
   117c8:	1007883a 	mov	r3,r2
   117cc:	e0bff917 	ldw	r2,-28(fp)
   117d0:	10800817 	ldw	r2,32(r2)
   117d4:	10810014 	ori	r2,r2,1024
   117d8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   117dc:	e0bff917 	ldw	r2,-28(fp)
   117e0:	10000915 	stw	zero,36(r2)
   117e4:	00000a06 	br	11810 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   117e8:	e0bff917 	ldw	r2,-28(fp)
   117ec:	10c00917 	ldw	r3,36(r2)
   117f0:	00a00034 	movhi	r2,32768
   117f4:	10bfff04 	addi	r2,r2,-4
   117f8:	10c00536 	bltu	r2,r3,11810 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   117fc:	e0bff917 	ldw	r2,-28(fp)
   11800:	10800917 	ldw	r2,36(r2)
   11804:	10c00044 	addi	r3,r2,1
   11808:	e0bff917 	ldw	r2,-28(fp)
   1180c:	10c00915 	stw	r3,36(r2)
   11810:	00800074 	movhi	r2,1
   11814:	1098e304 	addi	r2,r2,25484
   11818:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1181c:	e037883a 	mov	sp,fp
   11820:	df000017 	ldw	fp,0(sp)
   11824:	dec00104 	addi	sp,sp,4
   11828:	f800283a 	ret

0001182c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1182c:	defffd04 	addi	sp,sp,-12
   11830:	df000215 	stw	fp,8(sp)
   11834:	df000204 	addi	fp,sp,8
   11838:	e13ffe15 	stw	r4,-8(fp)
   1183c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11840:	00000506 	br	11858 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   11844:	e0bfff17 	ldw	r2,-4(fp)
   11848:	1090000c 	andi	r2,r2,16384
   1184c:	10000226 	beq	r2,zero,11858 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   11850:	00bffd44 	movi	r2,-11
   11854:	00000b06 	br	11884 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11858:	e0bffe17 	ldw	r2,-8(fp)
   1185c:	10c00d17 	ldw	r3,52(r2)
   11860:	e0bffe17 	ldw	r2,-8(fp)
   11864:	10800c17 	ldw	r2,48(r2)
   11868:	18800526 	beq	r3,r2,11880 <altera_avalon_jtag_uart_close+0x54>
   1186c:	e0bffe17 	ldw	r2,-8(fp)
   11870:	10c00917 	ldw	r3,36(r2)
   11874:	e0bffe17 	ldw	r2,-8(fp)
   11878:	10800117 	ldw	r2,4(r2)
   1187c:	18bff136 	bltu	r3,r2,11844 <_gp+0xffff4b84>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   11880:	0005883a 	mov	r2,zero
}
   11884:	e037883a 	mov	sp,fp
   11888:	df000017 	ldw	fp,0(sp)
   1188c:	dec00104 	addi	sp,sp,4
   11890:	f800283a 	ret

00011894 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   11894:	defffa04 	addi	sp,sp,-24
   11898:	df000515 	stw	fp,20(sp)
   1189c:	df000504 	addi	fp,sp,20
   118a0:	e13ffd15 	stw	r4,-12(fp)
   118a4:	e17ffe15 	stw	r5,-8(fp)
   118a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   118ac:	00bff9c4 	movi	r2,-25
   118b0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   118b4:	e0bffe17 	ldw	r2,-8(fp)
   118b8:	10da8060 	cmpeqi	r3,r2,27137
   118bc:	1800031e 	bne	r3,zero,118cc <altera_avalon_jtag_uart_ioctl+0x38>
   118c0:	109a80a0 	cmpeqi	r2,r2,27138
   118c4:	1000191e 	bne	r2,zero,1192c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   118c8:	00002806 	br	1196c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   118cc:	e0bffd17 	ldw	r2,-12(fp)
   118d0:	10c00117 	ldw	r3,4(r2)
   118d4:	00a00034 	movhi	r2,32768
   118d8:	10bfffc4 	addi	r2,r2,-1
   118dc:	18801226 	beq	r3,r2,11928 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   118e0:	e0bfff17 	ldw	r2,-4(fp)
   118e4:	10800017 	ldw	r2,0(r2)
   118e8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   118ec:	e0bffc17 	ldw	r2,-16(fp)
   118f0:	10800090 	cmplti	r2,r2,2
   118f4:	1000061e 	bne	r2,zero,11910 <altera_avalon_jtag_uart_ioctl+0x7c>
   118f8:	e0fffc17 	ldw	r3,-16(fp)
   118fc:	00a00034 	movhi	r2,32768
   11900:	10bfffc4 	addi	r2,r2,-1
   11904:	18800226 	beq	r3,r2,11910 <altera_avalon_jtag_uart_ioctl+0x7c>
   11908:	e0bffc17 	ldw	r2,-16(fp)
   1190c:	00000206 	br	11918 <altera_avalon_jtag_uart_ioctl+0x84>
   11910:	00a00034 	movhi	r2,32768
   11914:	10bfff84 	addi	r2,r2,-2
   11918:	e0fffd17 	ldw	r3,-12(fp)
   1191c:	18800115 	stw	r2,4(r3)
      rc = 0;
   11920:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11924:	00001106 	br	1196c <altera_avalon_jtag_uart_ioctl+0xd8>
   11928:	00001006 	br	1196c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1192c:	e0bffd17 	ldw	r2,-12(fp)
   11930:	10c00117 	ldw	r3,4(r2)
   11934:	00a00034 	movhi	r2,32768
   11938:	10bfffc4 	addi	r2,r2,-1
   1193c:	18800a26 	beq	r3,r2,11968 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11940:	e0bffd17 	ldw	r2,-12(fp)
   11944:	10c00917 	ldw	r3,36(r2)
   11948:	e0bffd17 	ldw	r2,-12(fp)
   1194c:	10800117 	ldw	r2,4(r2)
   11950:	1885803a 	cmpltu	r2,r3,r2
   11954:	10c03fcc 	andi	r3,r2,255
   11958:	e0bfff17 	ldw	r2,-4(fp)
   1195c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   11960:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11964:	00000006 	br	11968 <altera_avalon_jtag_uart_ioctl+0xd4>
   11968:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1196c:	e0bffb17 	ldw	r2,-20(fp)
}
   11970:	e037883a 	mov	sp,fp
   11974:	df000017 	ldw	fp,0(sp)
   11978:	dec00104 	addi	sp,sp,4
   1197c:	f800283a 	ret

00011980 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   11980:	defff304 	addi	sp,sp,-52
   11984:	dfc00c15 	stw	ra,48(sp)
   11988:	df000b15 	stw	fp,44(sp)
   1198c:	df000b04 	addi	fp,sp,44
   11990:	e13ffc15 	stw	r4,-16(fp)
   11994:	e17ffd15 	stw	r5,-12(fp)
   11998:	e1bffe15 	stw	r6,-8(fp)
   1199c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   119a0:	e0bffd17 	ldw	r2,-12(fp)
   119a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   119a8:	00004906 	br	11ad0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   119ac:	e0bffc17 	ldw	r2,-16(fp)
   119b0:	10800a17 	ldw	r2,40(r2)
   119b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   119b8:	e0bffc17 	ldw	r2,-16(fp)
   119bc:	10800b17 	ldw	r2,44(r2)
   119c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   119c4:	e0fff717 	ldw	r3,-36(fp)
   119c8:	e0bff817 	ldw	r2,-32(fp)
   119cc:	18800536 	bltu	r3,r2,119e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   119d0:	e0fff717 	ldw	r3,-36(fp)
   119d4:	e0bff817 	ldw	r2,-32(fp)
   119d8:	1885c83a 	sub	r2,r3,r2
   119dc:	e0bff615 	stw	r2,-40(fp)
   119e0:	00000406 	br	119f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   119e4:	00c20004 	movi	r3,2048
   119e8:	e0bff817 	ldw	r2,-32(fp)
   119ec:	1885c83a 	sub	r2,r3,r2
   119f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   119f4:	e0bff617 	ldw	r2,-40(fp)
   119f8:	1000011e 	bne	r2,zero,11a00 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   119fc:	00001d06 	br	11a74 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   11a00:	e0fffe17 	ldw	r3,-8(fp)
   11a04:	e0bff617 	ldw	r2,-40(fp)
   11a08:	1880022e 	bgeu	r3,r2,11a14 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   11a0c:	e0bffe17 	ldw	r2,-8(fp)
   11a10:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   11a14:	e0bff817 	ldw	r2,-32(fp)
   11a18:	10800e04 	addi	r2,r2,56
   11a1c:	e0fffc17 	ldw	r3,-16(fp)
   11a20:	1885883a 	add	r2,r3,r2
   11a24:	e13ff517 	ldw	r4,-44(fp)
   11a28:	100b883a 	mov	r5,r2
   11a2c:	e1bff617 	ldw	r6,-40(fp)
   11a30:	0012a940 	call	12a94 <memcpy>
      ptr   += n;
   11a34:	e0fff517 	ldw	r3,-44(fp)
   11a38:	e0bff617 	ldw	r2,-40(fp)
   11a3c:	1885883a 	add	r2,r3,r2
   11a40:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   11a44:	e0fffe17 	ldw	r3,-8(fp)
   11a48:	e0bff617 	ldw	r2,-40(fp)
   11a4c:	1885c83a 	sub	r2,r3,r2
   11a50:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11a54:	e0fff817 	ldw	r3,-32(fp)
   11a58:	e0bff617 	ldw	r2,-40(fp)
   11a5c:	1885883a 	add	r2,r3,r2
   11a60:	10c1ffcc 	andi	r3,r2,2047
   11a64:	e0bffc17 	ldw	r2,-16(fp)
   11a68:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   11a6c:	e0bffe17 	ldw	r2,-8(fp)
   11a70:	00bfce16 	blt	zero,r2,119ac <_gp+0xffff4cec>

    /* If we read any data then return it */
    if (ptr != buffer)
   11a74:	e0fff517 	ldw	r3,-44(fp)
   11a78:	e0bffd17 	ldw	r2,-12(fp)
   11a7c:	18800126 	beq	r3,r2,11a84 <altera_avalon_jtag_uart_read+0x104>
      break;
   11a80:	00001506 	br	11ad8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   11a84:	e0bfff17 	ldw	r2,-4(fp)
   11a88:	1090000c 	andi	r2,r2,16384
   11a8c:	10000126 	beq	r2,zero,11a94 <altera_avalon_jtag_uart_read+0x114>
      break;
   11a90:	00001106 	br	11ad8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   11a94:	0001883a 	nop
   11a98:	e0bffc17 	ldw	r2,-16(fp)
   11a9c:	10c00a17 	ldw	r3,40(r2)
   11aa0:	e0bff717 	ldw	r2,-36(fp)
   11aa4:	1880051e 	bne	r3,r2,11abc <altera_avalon_jtag_uart_read+0x13c>
   11aa8:	e0bffc17 	ldw	r2,-16(fp)
   11aac:	10c00917 	ldw	r3,36(r2)
   11ab0:	e0bffc17 	ldw	r2,-16(fp)
   11ab4:	10800117 	ldw	r2,4(r2)
   11ab8:	18bff736 	bltu	r3,r2,11a98 <_gp+0xffff4dd8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   11abc:	e0bffc17 	ldw	r2,-16(fp)
   11ac0:	10c00a17 	ldw	r3,40(r2)
   11ac4:	e0bff717 	ldw	r2,-36(fp)
   11ac8:	1880011e 	bne	r3,r2,11ad0 <altera_avalon_jtag_uart_read+0x150>
      break;
   11acc:	00000206 	br	11ad8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11ad0:	e0bffe17 	ldw	r2,-8(fp)
   11ad4:	00bfb516 	blt	zero,r2,119ac <_gp+0xffff4cec>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   11ad8:	e0fff517 	ldw	r3,-44(fp)
   11adc:	e0bffd17 	ldw	r2,-12(fp)
   11ae0:	18801826 	beq	r3,r2,11b44 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ae4:	0005303a 	rdctl	r2,status
   11ae8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11aec:	e0fffa17 	ldw	r3,-24(fp)
   11af0:	00bfff84 	movi	r2,-2
   11af4:	1884703a 	and	r2,r3,r2
   11af8:	1001703a 	wrctl	status,r2
  
  return context;
   11afc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   11b00:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11b04:	e0bffc17 	ldw	r2,-16(fp)
   11b08:	10800817 	ldw	r2,32(r2)
   11b0c:	10c00054 	ori	r3,r2,1
   11b10:	e0bffc17 	ldw	r2,-16(fp)
   11b14:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11b18:	e0bffc17 	ldw	r2,-16(fp)
   11b1c:	10800017 	ldw	r2,0(r2)
   11b20:	10800104 	addi	r2,r2,4
   11b24:	1007883a 	mov	r3,r2
   11b28:	e0bffc17 	ldw	r2,-16(fp)
   11b2c:	10800817 	ldw	r2,32(r2)
   11b30:	18800035 	stwio	r2,0(r3)
   11b34:	e0bff917 	ldw	r2,-28(fp)
   11b38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b3c:	e0bffb17 	ldw	r2,-20(fp)
   11b40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11b44:	e0fff517 	ldw	r3,-44(fp)
   11b48:	e0bffd17 	ldw	r2,-12(fp)
   11b4c:	18800426 	beq	r3,r2,11b60 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   11b50:	e0fff517 	ldw	r3,-44(fp)
   11b54:	e0bffd17 	ldw	r2,-12(fp)
   11b58:	1885c83a 	sub	r2,r3,r2
   11b5c:	00000606 	br	11b78 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   11b60:	e0bfff17 	ldw	r2,-4(fp)
   11b64:	1090000c 	andi	r2,r2,16384
   11b68:	10000226 	beq	r2,zero,11b74 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   11b6c:	00bffd44 	movi	r2,-11
   11b70:	00000106 	br	11b78 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   11b74:	00bffec4 	movi	r2,-5
}
   11b78:	e037883a 	mov	sp,fp
   11b7c:	dfc00117 	ldw	ra,4(sp)
   11b80:	df000017 	ldw	fp,0(sp)
   11b84:	dec00204 	addi	sp,sp,8
   11b88:	f800283a 	ret

00011b8c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11b8c:	defff304 	addi	sp,sp,-52
   11b90:	dfc00c15 	stw	ra,48(sp)
   11b94:	df000b15 	stw	fp,44(sp)
   11b98:	df000b04 	addi	fp,sp,44
   11b9c:	e13ffc15 	stw	r4,-16(fp)
   11ba0:	e17ffd15 	stw	r5,-12(fp)
   11ba4:	e1bffe15 	stw	r6,-8(fp)
   11ba8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   11bac:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   11bb0:	e0bffd17 	ldw	r2,-12(fp)
   11bb4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11bb8:	00003806 	br	11c9c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   11bbc:	e0bffc17 	ldw	r2,-16(fp)
   11bc0:	10800c17 	ldw	r2,48(r2)
   11bc4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   11bc8:	e0bffc17 	ldw	r2,-16(fp)
   11bcc:	10800d17 	ldw	r2,52(r2)
   11bd0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   11bd4:	e0fff817 	ldw	r3,-32(fp)
   11bd8:	e0bff517 	ldw	r2,-44(fp)
   11bdc:	1880062e 	bgeu	r3,r2,11bf8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   11be0:	e0fff517 	ldw	r3,-44(fp)
   11be4:	e0bff817 	ldw	r2,-32(fp)
   11be8:	1885c83a 	sub	r2,r3,r2
   11bec:	10bfffc4 	addi	r2,r2,-1
   11bf0:	e0bff615 	stw	r2,-40(fp)
   11bf4:	00000b06 	br	11c24 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   11bf8:	e0bff517 	ldw	r2,-44(fp)
   11bfc:	10000526 	beq	r2,zero,11c14 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   11c00:	00c20004 	movi	r3,2048
   11c04:	e0bff817 	ldw	r2,-32(fp)
   11c08:	1885c83a 	sub	r2,r3,r2
   11c0c:	e0bff615 	stw	r2,-40(fp)
   11c10:	00000406 	br	11c24 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11c14:	00c1ffc4 	movi	r3,2047
   11c18:	e0bff817 	ldw	r2,-32(fp)
   11c1c:	1885c83a 	sub	r2,r3,r2
   11c20:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11c24:	e0bff617 	ldw	r2,-40(fp)
   11c28:	1000011e 	bne	r2,zero,11c30 <altera_avalon_jtag_uart_write+0xa4>
        break;
   11c2c:	00001d06 	br	11ca4 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   11c30:	e0fffe17 	ldw	r3,-8(fp)
   11c34:	e0bff617 	ldw	r2,-40(fp)
   11c38:	1880022e 	bgeu	r3,r2,11c44 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   11c3c:	e0bffe17 	ldw	r2,-8(fp)
   11c40:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11c44:	e0bff817 	ldw	r2,-32(fp)
   11c48:	10820e04 	addi	r2,r2,2104
   11c4c:	e0fffc17 	ldw	r3,-16(fp)
   11c50:	1885883a 	add	r2,r3,r2
   11c54:	1009883a 	mov	r4,r2
   11c58:	e17ffd17 	ldw	r5,-12(fp)
   11c5c:	e1bff617 	ldw	r6,-40(fp)
   11c60:	0012a940 	call	12a94 <memcpy>
      ptr   += n;
   11c64:	e0fffd17 	ldw	r3,-12(fp)
   11c68:	e0bff617 	ldw	r2,-40(fp)
   11c6c:	1885883a 	add	r2,r3,r2
   11c70:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11c74:	e0fffe17 	ldw	r3,-8(fp)
   11c78:	e0bff617 	ldw	r2,-40(fp)
   11c7c:	1885c83a 	sub	r2,r3,r2
   11c80:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11c84:	e0fff817 	ldw	r3,-32(fp)
   11c88:	e0bff617 	ldw	r2,-40(fp)
   11c8c:	1885883a 	add	r2,r3,r2
   11c90:	10c1ffcc 	andi	r3,r2,2047
   11c94:	e0bffc17 	ldw	r2,-16(fp)
   11c98:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11c9c:	e0bffe17 	ldw	r2,-8(fp)
   11ca0:	00bfc616 	blt	zero,r2,11bbc <_gp+0xffff4efc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ca4:	0005303a 	rdctl	r2,status
   11ca8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11cac:	e0fffa17 	ldw	r3,-24(fp)
   11cb0:	00bfff84 	movi	r2,-2
   11cb4:	1884703a 	and	r2,r3,r2
   11cb8:	1001703a 	wrctl	status,r2
  
  return context;
   11cbc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11cc0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11cc4:	e0bffc17 	ldw	r2,-16(fp)
   11cc8:	10800817 	ldw	r2,32(r2)
   11ccc:	10c00094 	ori	r3,r2,2
   11cd0:	e0bffc17 	ldw	r2,-16(fp)
   11cd4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11cd8:	e0bffc17 	ldw	r2,-16(fp)
   11cdc:	10800017 	ldw	r2,0(r2)
   11ce0:	10800104 	addi	r2,r2,4
   11ce4:	1007883a 	mov	r3,r2
   11ce8:	e0bffc17 	ldw	r2,-16(fp)
   11cec:	10800817 	ldw	r2,32(r2)
   11cf0:	18800035 	stwio	r2,0(r3)
   11cf4:	e0bff917 	ldw	r2,-28(fp)
   11cf8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11cfc:	e0bffb17 	ldw	r2,-20(fp)
   11d00:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   11d04:	e0bffe17 	ldw	r2,-8(fp)
   11d08:	0080120e 	bge	zero,r2,11d54 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   11d0c:	e0bfff17 	ldw	r2,-4(fp)
   11d10:	1090000c 	andi	r2,r2,16384
   11d14:	10000126 	beq	r2,zero,11d1c <altera_avalon_jtag_uart_write+0x190>
        break;
   11d18:	00001006 	br	11d5c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   11d1c:	0001883a 	nop
   11d20:	e0bffc17 	ldw	r2,-16(fp)
   11d24:	10c00d17 	ldw	r3,52(r2)
   11d28:	e0bff517 	ldw	r2,-44(fp)
   11d2c:	1880051e 	bne	r3,r2,11d44 <altera_avalon_jtag_uart_write+0x1b8>
   11d30:	e0bffc17 	ldw	r2,-16(fp)
   11d34:	10c00917 	ldw	r3,36(r2)
   11d38:	e0bffc17 	ldw	r2,-16(fp)
   11d3c:	10800117 	ldw	r2,4(r2)
   11d40:	18bff736 	bltu	r3,r2,11d20 <_gp+0xffff5060>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11d44:	e0bffc17 	ldw	r2,-16(fp)
   11d48:	10800917 	ldw	r2,36(r2)
   11d4c:	10000126 	beq	r2,zero,11d54 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   11d50:	00000206 	br	11d5c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   11d54:	e0bffe17 	ldw	r2,-8(fp)
   11d58:	00bf9716 	blt	zero,r2,11bb8 <_gp+0xffff4ef8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   11d5c:	e0fffd17 	ldw	r3,-12(fp)
   11d60:	e0bff717 	ldw	r2,-36(fp)
   11d64:	18800426 	beq	r3,r2,11d78 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   11d68:	e0fffd17 	ldw	r3,-12(fp)
   11d6c:	e0bff717 	ldw	r2,-36(fp)
   11d70:	1885c83a 	sub	r2,r3,r2
   11d74:	00000606 	br	11d90 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   11d78:	e0bfff17 	ldw	r2,-4(fp)
   11d7c:	1090000c 	andi	r2,r2,16384
   11d80:	10000226 	beq	r2,zero,11d8c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   11d84:	00bffd44 	movi	r2,-11
   11d88:	00000106 	br	11d90 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11d8c:	00bffec4 	movi	r2,-5
}
   11d90:	e037883a 	mov	sp,fp
   11d94:	dfc00117 	ldw	ra,4(sp)
   11d98:	df000017 	ldw	fp,0(sp)
   11d9c:	dec00204 	addi	sp,sp,8
   11da0:	f800283a 	ret

00011da4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11da4:	defff504 	addi	sp,sp,-44
   11da8:	df000a15 	stw	fp,40(sp)
   11dac:	df000a04 	addi	fp,sp,40
   11db0:	e13ffc15 	stw	r4,-16(fp)
   11db4:	e17ffd15 	stw	r5,-12(fp)
   11db8:	e1bffe15 	stw	r6,-8(fp)
   11dbc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11dc0:	e03ff615 	stw	zero,-40(fp)
   11dc4:	00800074 	movhi	r2,1
   11dc8:	1098e304 	addi	r2,r2,25484
   11dcc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   11dd0:	10003f26 	beq	r2,zero,11ed0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   11dd4:	e0bffc17 	ldw	r2,-16(fp)
   11dd8:	10003b26 	beq	r2,zero,11ec8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   11ddc:	e0bffc17 	ldw	r2,-16(fp)
   11de0:	e0fffe17 	ldw	r3,-8(fp)
   11de4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11de8:	e0bffc17 	ldw	r2,-16(fp)
   11dec:	e0ffff17 	ldw	r3,-4(fp)
   11df0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11df4:	0005303a 	rdctl	r2,status
   11df8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11dfc:	e0fff817 	ldw	r3,-32(fp)
   11e00:	00bfff84 	movi	r2,-2
   11e04:	1884703a 	and	r2,r3,r2
   11e08:	1001703a 	wrctl	status,r2
  
  return context;
   11e0c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   11e10:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11e14:	00800074 	movhi	r2,1
   11e18:	1098e404 	addi	r2,r2,25488
   11e1c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   11e20:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11e24:	e0fffd17 	ldw	r3,-12(fp)
   11e28:	e0bff617 	ldw	r2,-40(fp)
   11e2c:	1885883a 	add	r2,r3,r2
   11e30:	10c00044 	addi	r3,r2,1
   11e34:	e0bffc17 	ldw	r2,-16(fp)
   11e38:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11e3c:	e0bffc17 	ldw	r2,-16(fp)
   11e40:	10c00217 	ldw	r3,8(r2)
   11e44:	e0bff617 	ldw	r2,-40(fp)
   11e48:	1880042e 	bgeu	r3,r2,11e5c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   11e4c:	e0bffc17 	ldw	r2,-16(fp)
   11e50:	00c00044 	movi	r3,1
   11e54:	10c00405 	stb	r3,16(r2)
   11e58:	00000206 	br	11e64 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   11e5c:	e0bffc17 	ldw	r2,-16(fp)
   11e60:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11e64:	e0fffc17 	ldw	r3,-16(fp)
   11e68:	00800074 	movhi	r2,1
   11e6c:	10933504 	addi	r2,r2,19668
   11e70:	e0bff915 	stw	r2,-28(fp)
   11e74:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11e78:	e0bffa17 	ldw	r2,-24(fp)
   11e7c:	e0fff917 	ldw	r3,-28(fp)
   11e80:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11e84:	e0bff917 	ldw	r2,-28(fp)
   11e88:	10c00017 	ldw	r3,0(r2)
   11e8c:	e0bffa17 	ldw	r2,-24(fp)
   11e90:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11e94:	e0bff917 	ldw	r2,-28(fp)
   11e98:	10800017 	ldw	r2,0(r2)
   11e9c:	e0fffa17 	ldw	r3,-24(fp)
   11ea0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11ea4:	e0bff917 	ldw	r2,-28(fp)
   11ea8:	e0fffa17 	ldw	r3,-24(fp)
   11eac:	10c00015 	stw	r3,0(r2)
   11eb0:	e0bff717 	ldw	r2,-36(fp)
   11eb4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11eb8:	e0bffb17 	ldw	r2,-20(fp)
   11ebc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11ec0:	0005883a 	mov	r2,zero
   11ec4:	00000306 	br	11ed4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   11ec8:	00bffa84 	movi	r2,-22
   11ecc:	00000106 	br	11ed4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   11ed0:	00bfde84 	movi	r2,-134
  }
}
   11ed4:	e037883a 	mov	sp,fp
   11ed8:	df000017 	ldw	fp,0(sp)
   11edc:	dec00104 	addi	sp,sp,4
   11ee0:	f800283a 	ret

00011ee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11ee4:	defffe04 	addi	sp,sp,-8
   11ee8:	dfc00115 	stw	ra,4(sp)
   11eec:	df000015 	stw	fp,0(sp)
   11ef0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11ef4:	00800074 	movhi	r2,1
   11ef8:	10933c04 	addi	r2,r2,19696
   11efc:	10800017 	ldw	r2,0(r2)
   11f00:	10000526 	beq	r2,zero,11f18 <alt_get_errno+0x34>
   11f04:	00800074 	movhi	r2,1
   11f08:	10933c04 	addi	r2,r2,19696
   11f0c:	10800017 	ldw	r2,0(r2)
   11f10:	103ee83a 	callr	r2
   11f14:	00000206 	br	11f20 <alt_get_errno+0x3c>
   11f18:	00800074 	movhi	r2,1
   11f1c:	1098da04 	addi	r2,r2,25448
}
   11f20:	e037883a 	mov	sp,fp
   11f24:	dfc00117 	ldw	ra,4(sp)
   11f28:	df000017 	ldw	fp,0(sp)
   11f2c:	dec00204 	addi	sp,sp,8
   11f30:	f800283a 	ret

00011f34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11f34:	defffb04 	addi	sp,sp,-20
   11f38:	dfc00415 	stw	ra,16(sp)
   11f3c:	df000315 	stw	fp,12(sp)
   11f40:	df000304 	addi	fp,sp,12
   11f44:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11f48:	e0bfff17 	ldw	r2,-4(fp)
   11f4c:	10000816 	blt	r2,zero,11f70 <close+0x3c>
   11f50:	e13fff17 	ldw	r4,-4(fp)
   11f54:	01400304 	movi	r5,12
   11f58:	0010aa00 	call	10aa0 <__mulsi3>
   11f5c:	1007883a 	mov	r3,r2
   11f60:	00800074 	movhi	r2,1
   11f64:	1092d004 	addi	r2,r2,19264
   11f68:	1885883a 	add	r2,r3,r2
   11f6c:	00000106 	br	11f74 <close+0x40>
   11f70:	0005883a 	mov	r2,zero
   11f74:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11f78:	e0bffd17 	ldw	r2,-12(fp)
   11f7c:	10001926 	beq	r2,zero,11fe4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11f80:	e0bffd17 	ldw	r2,-12(fp)
   11f84:	10800017 	ldw	r2,0(r2)
   11f88:	10800417 	ldw	r2,16(r2)
   11f8c:	10000626 	beq	r2,zero,11fa8 <close+0x74>
   11f90:	e0bffd17 	ldw	r2,-12(fp)
   11f94:	10800017 	ldw	r2,0(r2)
   11f98:	10800417 	ldw	r2,16(r2)
   11f9c:	e13ffd17 	ldw	r4,-12(fp)
   11fa0:	103ee83a 	callr	r2
   11fa4:	00000106 	br	11fac <close+0x78>
   11fa8:	0005883a 	mov	r2,zero
   11fac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11fb0:	e13fff17 	ldw	r4,-4(fp)
   11fb4:	00126b40 	call	126b4 <alt_release_fd>
    if (rval < 0)
   11fb8:	e0bffe17 	ldw	r2,-8(fp)
   11fbc:	1000070e 	bge	r2,zero,11fdc <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11fc0:	0011ee40 	call	11ee4 <alt_get_errno>
   11fc4:	1007883a 	mov	r3,r2
   11fc8:	e0bffe17 	ldw	r2,-8(fp)
   11fcc:	0085c83a 	sub	r2,zero,r2
   11fd0:	18800015 	stw	r2,0(r3)
      return -1;
   11fd4:	00bfffc4 	movi	r2,-1
   11fd8:	00000706 	br	11ff8 <close+0xc4>
    }
    return 0;
   11fdc:	0005883a 	mov	r2,zero
   11fe0:	00000506 	br	11ff8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11fe4:	0011ee40 	call	11ee4 <alt_get_errno>
   11fe8:	1007883a 	mov	r3,r2
   11fec:	00801444 	movi	r2,81
   11ff0:	18800015 	stw	r2,0(r3)
    return -1;
   11ff4:	00bfffc4 	movi	r2,-1
  }
}
   11ff8:	e037883a 	mov	sp,fp
   11ffc:	dfc00117 	ldw	ra,4(sp)
   12000:	df000017 	ldw	fp,0(sp)
   12004:	dec00204 	addi	sp,sp,8
   12008:	f800283a 	ret

0001200c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1200c:	deffff04 	addi	sp,sp,-4
   12010:	df000015 	stw	fp,0(sp)
   12014:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12018:	e037883a 	mov	sp,fp
   1201c:	df000017 	ldw	fp,0(sp)
   12020:	dec00104 	addi	sp,sp,4
   12024:	f800283a 	ret

00012028 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12028:	defffc04 	addi	sp,sp,-16
   1202c:	df000315 	stw	fp,12(sp)
   12030:	df000304 	addi	fp,sp,12
   12034:	e13ffd15 	stw	r4,-12(fp)
   12038:	e17ffe15 	stw	r5,-8(fp)
   1203c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12040:	e0bfff17 	ldw	r2,-4(fp)
}
   12044:	e037883a 	mov	sp,fp
   12048:	df000017 	ldw	fp,0(sp)
   1204c:	dec00104 	addi	sp,sp,4
   12050:	f800283a 	ret

00012054 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12054:	defffe04 	addi	sp,sp,-8
   12058:	dfc00115 	stw	ra,4(sp)
   1205c:	df000015 	stw	fp,0(sp)
   12060:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12064:	00800074 	movhi	r2,1
   12068:	10933c04 	addi	r2,r2,19696
   1206c:	10800017 	ldw	r2,0(r2)
   12070:	10000526 	beq	r2,zero,12088 <alt_get_errno+0x34>
   12074:	00800074 	movhi	r2,1
   12078:	10933c04 	addi	r2,r2,19696
   1207c:	10800017 	ldw	r2,0(r2)
   12080:	103ee83a 	callr	r2
   12084:	00000206 	br	12090 <alt_get_errno+0x3c>
   12088:	00800074 	movhi	r2,1
   1208c:	1098da04 	addi	r2,r2,25448
}
   12090:	e037883a 	mov	sp,fp
   12094:	dfc00117 	ldw	ra,4(sp)
   12098:	df000017 	ldw	fp,0(sp)
   1209c:	dec00204 	addi	sp,sp,8
   120a0:	f800283a 	ret

000120a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   120a4:	defffa04 	addi	sp,sp,-24
   120a8:	dfc00515 	stw	ra,20(sp)
   120ac:	df000415 	stw	fp,16(sp)
   120b0:	df000404 	addi	fp,sp,16
   120b4:	e13ffe15 	stw	r4,-8(fp)
   120b8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   120bc:	e0bffe17 	ldw	r2,-8(fp)
   120c0:	10000326 	beq	r2,zero,120d0 <alt_dev_llist_insert+0x2c>
   120c4:	e0bffe17 	ldw	r2,-8(fp)
   120c8:	10800217 	ldw	r2,8(r2)
   120cc:	1000061e 	bne	r2,zero,120e8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   120d0:	00120540 	call	12054 <alt_get_errno>
   120d4:	1007883a 	mov	r3,r2
   120d8:	00800584 	movi	r2,22
   120dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   120e0:	00bffa84 	movi	r2,-22
   120e4:	00001306 	br	12134 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   120e8:	e0bffe17 	ldw	r2,-8(fp)
   120ec:	e0ffff17 	ldw	r3,-4(fp)
   120f0:	e0fffc15 	stw	r3,-16(fp)
   120f4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   120f8:	e0bffd17 	ldw	r2,-12(fp)
   120fc:	e0fffc17 	ldw	r3,-16(fp)
   12100:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12104:	e0bffc17 	ldw	r2,-16(fp)
   12108:	10c00017 	ldw	r3,0(r2)
   1210c:	e0bffd17 	ldw	r2,-12(fp)
   12110:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12114:	e0bffc17 	ldw	r2,-16(fp)
   12118:	10800017 	ldw	r2,0(r2)
   1211c:	e0fffd17 	ldw	r3,-12(fp)
   12120:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12124:	e0bffc17 	ldw	r2,-16(fp)
   12128:	e0fffd17 	ldw	r3,-12(fp)
   1212c:	10c00015 	stw	r3,0(r2)

  return 0;  
   12130:	0005883a 	mov	r2,zero
}
   12134:	e037883a 	mov	sp,fp
   12138:	dfc00117 	ldw	ra,4(sp)
   1213c:	df000017 	ldw	fp,0(sp)
   12140:	dec00204 	addi	sp,sp,8
   12144:	f800283a 	ret

00012148 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   12148:	defffd04 	addi	sp,sp,-12
   1214c:	dfc00215 	stw	ra,8(sp)
   12150:	df000115 	stw	fp,4(sp)
   12154:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12158:	00800074 	movhi	r2,1
   1215c:	108d5604 	addi	r2,r2,13656
   12160:	e0bfff15 	stw	r2,-4(fp)
   12164:	00000606 	br	12180 <_do_ctors+0x38>
        (*ctor) (); 
   12168:	e0bfff17 	ldw	r2,-4(fp)
   1216c:	10800017 	ldw	r2,0(r2)
   12170:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12174:	e0bfff17 	ldw	r2,-4(fp)
   12178:	10bfff04 	addi	r2,r2,-4
   1217c:	e0bfff15 	stw	r2,-4(fp)
   12180:	e0ffff17 	ldw	r3,-4(fp)
   12184:	00800074 	movhi	r2,1
   12188:	108d5704 	addi	r2,r2,13660
   1218c:	18bff62e 	bgeu	r3,r2,12168 <_gp+0xffff54a8>
        (*ctor) (); 
}
   12190:	e037883a 	mov	sp,fp
   12194:	dfc00117 	ldw	ra,4(sp)
   12198:	df000017 	ldw	fp,0(sp)
   1219c:	dec00204 	addi	sp,sp,8
   121a0:	f800283a 	ret

000121a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   121a4:	defffd04 	addi	sp,sp,-12
   121a8:	dfc00215 	stw	ra,8(sp)
   121ac:	df000115 	stw	fp,4(sp)
   121b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   121b4:	00800074 	movhi	r2,1
   121b8:	108d5604 	addi	r2,r2,13656
   121bc:	e0bfff15 	stw	r2,-4(fp)
   121c0:	00000606 	br	121dc <_do_dtors+0x38>
        (*dtor) (); 
   121c4:	e0bfff17 	ldw	r2,-4(fp)
   121c8:	10800017 	ldw	r2,0(r2)
   121cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   121d0:	e0bfff17 	ldw	r2,-4(fp)
   121d4:	10bfff04 	addi	r2,r2,-4
   121d8:	e0bfff15 	stw	r2,-4(fp)
   121dc:	e0ffff17 	ldw	r3,-4(fp)
   121e0:	00800074 	movhi	r2,1
   121e4:	108d5704 	addi	r2,r2,13660
   121e8:	18bff62e 	bgeu	r3,r2,121c4 <_gp+0xffff5504>
        (*dtor) (); 
}
   121ec:	e037883a 	mov	sp,fp
   121f0:	dfc00117 	ldw	ra,4(sp)
   121f4:	df000017 	ldw	fp,0(sp)
   121f8:	dec00204 	addi	sp,sp,8
   121fc:	f800283a 	ret

00012200 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12200:	deffff04 	addi	sp,sp,-4
   12204:	df000015 	stw	fp,0(sp)
   12208:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1220c:	e037883a 	mov	sp,fp
   12210:	df000017 	ldw	fp,0(sp)
   12214:	dec00104 	addi	sp,sp,4
   12218:	f800283a 	ret

0001221c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1221c:	defffe04 	addi	sp,sp,-8
   12220:	df000115 	stw	fp,4(sp)
   12224:	df000104 	addi	fp,sp,4
   12228:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1222c:	e0bfff17 	ldw	r2,-4(fp)
   12230:	10bffe84 	addi	r2,r2,-6
   12234:	10c00428 	cmpgeui	r3,r2,16
   12238:	18001a1e 	bne	r3,zero,122a4 <alt_exception_cause_generated_bad_addr+0x88>
   1223c:	100690ba 	slli	r3,r2,2
   12240:	00800074 	movhi	r2,1
   12244:	10889504 	addi	r2,r2,8788
   12248:	1885883a 	add	r2,r3,r2
   1224c:	10800017 	ldw	r2,0(r2)
   12250:	1000683a 	jmp	r2
   12254:	00012294 	movui	zero,1162
   12258:	00012294 	movui	zero,1162
   1225c:	000122a4 	muli	zero,zero,1162
   12260:	000122a4 	muli	zero,zero,1162
   12264:	000122a4 	muli	zero,zero,1162
   12268:	00012294 	movui	zero,1162
   1226c:	0001229c 	xori	zero,zero,1162
   12270:	000122a4 	muli	zero,zero,1162
   12274:	00012294 	movui	zero,1162
   12278:	00012294 	movui	zero,1162
   1227c:	000122a4 	muli	zero,zero,1162
   12280:	00012294 	movui	zero,1162
   12284:	0001229c 	xori	zero,zero,1162
   12288:	000122a4 	muli	zero,zero,1162
   1228c:	000122a4 	muli	zero,zero,1162
   12290:	00012294 	movui	zero,1162
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12294:	00800044 	movi	r2,1
   12298:	00000306 	br	122a8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1229c:	0005883a 	mov	r2,zero
   122a0:	00000106 	br	122a8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   122a4:	0005883a 	mov	r2,zero
  }
}
   122a8:	e037883a 	mov	sp,fp
   122ac:	df000017 	ldw	fp,0(sp)
   122b0:	dec00104 	addi	sp,sp,4
   122b4:	f800283a 	ret

000122b8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   122b8:	defff804 	addi	sp,sp,-32
   122bc:	dfc00715 	stw	ra,28(sp)
   122c0:	df000615 	stw	fp,24(sp)
   122c4:	dc000515 	stw	r16,20(sp)
   122c8:	df000604 	addi	fp,sp,24
   122cc:	e13ffb15 	stw	r4,-20(fp)
   122d0:	e17ffc15 	stw	r5,-16(fp)
   122d4:	e1bffd15 	stw	r6,-12(fp)
   122d8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   122dc:	e13ffc17 	ldw	r4,-16(fp)
   122e0:	e17ffd17 	ldw	r5,-12(fp)
   122e4:	e1bffe17 	ldw	r6,-8(fp)
   122e8:	00125540 	call	12554 <open>
   122ec:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   122f0:	e0bffa17 	ldw	r2,-24(fp)
   122f4:	10002216 	blt	r2,zero,12380 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   122f8:	04000074 	movhi	r16,1
   122fc:	8412d004 	addi	r16,r16,19264
   12300:	e0bffa17 	ldw	r2,-24(fp)
   12304:	1009883a 	mov	r4,r2
   12308:	01400304 	movi	r5,12
   1230c:	0010aa00 	call	10aa0 <__mulsi3>
   12310:	8085883a 	add	r2,r16,r2
   12314:	10c00017 	ldw	r3,0(r2)
   12318:	e0bffb17 	ldw	r2,-20(fp)
   1231c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   12320:	04000074 	movhi	r16,1
   12324:	8412d004 	addi	r16,r16,19264
   12328:	e0bffa17 	ldw	r2,-24(fp)
   1232c:	1009883a 	mov	r4,r2
   12330:	01400304 	movi	r5,12
   12334:	0010aa00 	call	10aa0 <__mulsi3>
   12338:	10800104 	addi	r2,r2,4
   1233c:	8085883a 	add	r2,r16,r2
   12340:	10c00017 	ldw	r3,0(r2)
   12344:	e0bffb17 	ldw	r2,-20(fp)
   12348:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1234c:	04000074 	movhi	r16,1
   12350:	8412d004 	addi	r16,r16,19264
   12354:	e0bffa17 	ldw	r2,-24(fp)
   12358:	1009883a 	mov	r4,r2
   1235c:	01400304 	movi	r5,12
   12360:	0010aa00 	call	10aa0 <__mulsi3>
   12364:	10800204 	addi	r2,r2,8
   12368:	8085883a 	add	r2,r16,r2
   1236c:	10c00017 	ldw	r3,0(r2)
   12370:	e0bffb17 	ldw	r2,-20(fp)
   12374:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   12378:	e13ffa17 	ldw	r4,-24(fp)
   1237c:	00126b40 	call	126b4 <alt_release_fd>
  }
} 
   12380:	e6ffff04 	addi	sp,fp,-4
   12384:	dfc00217 	ldw	ra,8(sp)
   12388:	df000117 	ldw	fp,4(sp)
   1238c:	dc000017 	ldw	r16,0(sp)
   12390:	dec00304 	addi	sp,sp,12
   12394:	f800283a 	ret

00012398 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   12398:	defffb04 	addi	sp,sp,-20
   1239c:	dfc00415 	stw	ra,16(sp)
   123a0:	df000315 	stw	fp,12(sp)
   123a4:	df000304 	addi	fp,sp,12
   123a8:	e13ffd15 	stw	r4,-12(fp)
   123ac:	e17ffe15 	stw	r5,-8(fp)
   123b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   123b4:	01000074 	movhi	r4,1
   123b8:	2112d304 	addi	r4,r4,19276
   123bc:	e17ffd17 	ldw	r5,-12(fp)
   123c0:	01800044 	movi	r6,1
   123c4:	01c07fc4 	movi	r7,511
   123c8:	00122b80 	call	122b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   123cc:	01000074 	movhi	r4,1
   123d0:	2112d004 	addi	r4,r4,19264
   123d4:	e17ffe17 	ldw	r5,-8(fp)
   123d8:	000d883a 	mov	r6,zero
   123dc:	01c07fc4 	movi	r7,511
   123e0:	00122b80 	call	122b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   123e4:	01000074 	movhi	r4,1
   123e8:	2112d604 	addi	r4,r4,19288
   123ec:	e17fff17 	ldw	r5,-4(fp)
   123f0:	01800044 	movi	r6,1
   123f4:	01c07fc4 	movi	r7,511
   123f8:	00122b80 	call	122b8 <alt_open_fd>
}  
   123fc:	e037883a 	mov	sp,fp
   12400:	dfc00117 	ldw	ra,4(sp)
   12404:	df000017 	ldw	fp,0(sp)
   12408:	dec00204 	addi	sp,sp,8
   1240c:	f800283a 	ret

00012410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12410:	defffe04 	addi	sp,sp,-8
   12414:	dfc00115 	stw	ra,4(sp)
   12418:	df000015 	stw	fp,0(sp)
   1241c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12420:	00800074 	movhi	r2,1
   12424:	10933c04 	addi	r2,r2,19696
   12428:	10800017 	ldw	r2,0(r2)
   1242c:	10000526 	beq	r2,zero,12444 <alt_get_errno+0x34>
   12430:	00800074 	movhi	r2,1
   12434:	10933c04 	addi	r2,r2,19696
   12438:	10800017 	ldw	r2,0(r2)
   1243c:	103ee83a 	callr	r2
   12440:	00000206 	br	1244c <alt_get_errno+0x3c>
   12444:	00800074 	movhi	r2,1
   12448:	1098da04 	addi	r2,r2,25448
}
   1244c:	e037883a 	mov	sp,fp
   12450:	dfc00117 	ldw	ra,4(sp)
   12454:	df000017 	ldw	fp,0(sp)
   12458:	dec00204 	addi	sp,sp,8
   1245c:	f800283a 	ret

00012460 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   12460:	defffb04 	addi	sp,sp,-20
   12464:	dfc00415 	stw	ra,16(sp)
   12468:	df000315 	stw	fp,12(sp)
   1246c:	dc000215 	stw	r16,8(sp)
   12470:	df000304 	addi	fp,sp,12
   12474:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   12478:	e0bffe17 	ldw	r2,-8(fp)
   1247c:	10800217 	ldw	r2,8(r2)
   12480:	10d00034 	orhi	r3,r2,16384
   12484:	e0bffe17 	ldw	r2,-8(fp)
   12488:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1248c:	e03ffd15 	stw	zero,-12(fp)
   12490:	00002306 	br	12520 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12494:	04000074 	movhi	r16,1
   12498:	8412d004 	addi	r16,r16,19264
   1249c:	e0bffd17 	ldw	r2,-12(fp)
   124a0:	1009883a 	mov	r4,r2
   124a4:	01400304 	movi	r5,12
   124a8:	0010aa00 	call	10aa0 <__mulsi3>
   124ac:	8085883a 	add	r2,r16,r2
   124b0:	10c00017 	ldw	r3,0(r2)
   124b4:	e0bffe17 	ldw	r2,-8(fp)
   124b8:	10800017 	ldw	r2,0(r2)
   124bc:	1880151e 	bne	r3,r2,12514 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   124c0:	04000074 	movhi	r16,1
   124c4:	8412d004 	addi	r16,r16,19264
   124c8:	e0bffd17 	ldw	r2,-12(fp)
   124cc:	1009883a 	mov	r4,r2
   124d0:	01400304 	movi	r5,12
   124d4:	0010aa00 	call	10aa0 <__mulsi3>
   124d8:	10800204 	addi	r2,r2,8
   124dc:	8085883a 	add	r2,r16,r2
   124e0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   124e4:	10000b0e 	bge	r2,zero,12514 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   124e8:	e13ffd17 	ldw	r4,-12(fp)
   124ec:	01400304 	movi	r5,12
   124f0:	0010aa00 	call	10aa0 <__mulsi3>
   124f4:	1007883a 	mov	r3,r2
   124f8:	00800074 	movhi	r2,1
   124fc:	1092d004 	addi	r2,r2,19264
   12500:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12504:	e0bffe17 	ldw	r2,-8(fp)
   12508:	18800226 	beq	r3,r2,12514 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1250c:	00bffcc4 	movi	r2,-13
   12510:	00000a06 	br	1253c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12514:	e0bffd17 	ldw	r2,-12(fp)
   12518:	10800044 	addi	r2,r2,1
   1251c:	e0bffd15 	stw	r2,-12(fp)
   12520:	00800074 	movhi	r2,1
   12524:	10933b04 	addi	r2,r2,19692
   12528:	10800017 	ldw	r2,0(r2)
   1252c:	1007883a 	mov	r3,r2
   12530:	e0bffd17 	ldw	r2,-12(fp)
   12534:	18bfd72e 	bgeu	r3,r2,12494 <_gp+0xffff57d4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12538:	0005883a 	mov	r2,zero
}
   1253c:	e6ffff04 	addi	sp,fp,-4
   12540:	dfc00217 	ldw	ra,8(sp)
   12544:	df000117 	ldw	fp,4(sp)
   12548:	dc000017 	ldw	r16,0(sp)
   1254c:	dec00304 	addi	sp,sp,12
   12550:	f800283a 	ret

00012554 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12554:	defff604 	addi	sp,sp,-40
   12558:	dfc00915 	stw	ra,36(sp)
   1255c:	df000815 	stw	fp,32(sp)
   12560:	df000804 	addi	fp,sp,32
   12564:	e13ffd15 	stw	r4,-12(fp)
   12568:	e17ffe15 	stw	r5,-8(fp)
   1256c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12570:	00bfffc4 	movi	r2,-1
   12574:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12578:	00bffb44 	movi	r2,-19
   1257c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   12580:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12584:	e13ffd17 	ldw	r4,-12(fp)
   12588:	01400074 	movhi	r5,1
   1258c:	29533904 	addi	r5,r5,19684
   12590:	00127540 	call	12754 <alt_find_dev>
   12594:	e0bff815 	stw	r2,-32(fp)
   12598:	e0bff817 	ldw	r2,-32(fp)
   1259c:	1000051e 	bne	r2,zero,125b4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   125a0:	e13ffd17 	ldw	r4,-12(fp)
   125a4:	00127e40 	call	127e4 <alt_find_file>
   125a8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   125ac:	00800044 	movi	r2,1
   125b0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   125b4:	e0bff817 	ldw	r2,-32(fp)
   125b8:	10002b26 	beq	r2,zero,12668 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   125bc:	e13ff817 	ldw	r4,-32(fp)
   125c0:	00128f80 	call	128f8 <alt_get_fd>
   125c4:	e0bff915 	stw	r2,-28(fp)
   125c8:	e0bff917 	ldw	r2,-28(fp)
   125cc:	1000030e 	bge	r2,zero,125dc <open+0x88>
    {
      status = index;
   125d0:	e0bff917 	ldw	r2,-28(fp)
   125d4:	e0bffa15 	stw	r2,-24(fp)
   125d8:	00002506 	br	12670 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   125dc:	e13ff917 	ldw	r4,-28(fp)
   125e0:	01400304 	movi	r5,12
   125e4:	0010aa00 	call	10aa0 <__mulsi3>
   125e8:	1007883a 	mov	r3,r2
   125ec:	00800074 	movhi	r2,1
   125f0:	1092d004 	addi	r2,r2,19264
   125f4:	1885883a 	add	r2,r3,r2
   125f8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   125fc:	e0fffe17 	ldw	r3,-8(fp)
   12600:	00900034 	movhi	r2,16384
   12604:	10bfffc4 	addi	r2,r2,-1
   12608:	1886703a 	and	r3,r3,r2
   1260c:	e0bffc17 	ldw	r2,-16(fp)
   12610:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   12614:	e0bffb17 	ldw	r2,-20(fp)
   12618:	1000051e 	bne	r2,zero,12630 <open+0xdc>
   1261c:	e13ffc17 	ldw	r4,-16(fp)
   12620:	00124600 	call	12460 <alt_file_locked>
   12624:	e0bffa15 	stw	r2,-24(fp)
   12628:	e0bffa17 	ldw	r2,-24(fp)
   1262c:	10001016 	blt	r2,zero,12670 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12630:	e0bff817 	ldw	r2,-32(fp)
   12634:	10800317 	ldw	r2,12(r2)
   12638:	10000826 	beq	r2,zero,1265c <open+0x108>
   1263c:	e0bff817 	ldw	r2,-32(fp)
   12640:	10800317 	ldw	r2,12(r2)
   12644:	e13ffc17 	ldw	r4,-16(fp)
   12648:	e17ffd17 	ldw	r5,-12(fp)
   1264c:	e1bffe17 	ldw	r6,-8(fp)
   12650:	e1ffff17 	ldw	r7,-4(fp)
   12654:	103ee83a 	callr	r2
   12658:	00000106 	br	12660 <open+0x10c>
   1265c:	0005883a 	mov	r2,zero
   12660:	e0bffa15 	stw	r2,-24(fp)
   12664:	00000206 	br	12670 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   12668:	00bffb44 	movi	r2,-19
   1266c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12670:	e0bffa17 	ldw	r2,-24(fp)
   12674:	1000090e 	bge	r2,zero,1269c <open+0x148>
  {
    alt_release_fd (index);  
   12678:	e13ff917 	ldw	r4,-28(fp)
   1267c:	00126b40 	call	126b4 <alt_release_fd>
    ALT_ERRNO = -status;
   12680:	00124100 	call	12410 <alt_get_errno>
   12684:	1007883a 	mov	r3,r2
   12688:	e0bffa17 	ldw	r2,-24(fp)
   1268c:	0085c83a 	sub	r2,zero,r2
   12690:	18800015 	stw	r2,0(r3)
    return -1;
   12694:	00bfffc4 	movi	r2,-1
   12698:	00000106 	br	126a0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   1269c:	e0bff917 	ldw	r2,-28(fp)
}
   126a0:	e037883a 	mov	sp,fp
   126a4:	dfc00117 	ldw	ra,4(sp)
   126a8:	df000017 	ldw	fp,0(sp)
   126ac:	dec00204 	addi	sp,sp,8
   126b0:	f800283a 	ret

000126b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   126b4:	defffc04 	addi	sp,sp,-16
   126b8:	dfc00315 	stw	ra,12(sp)
   126bc:	df000215 	stw	fp,8(sp)
   126c0:	dc000115 	stw	r16,4(sp)
   126c4:	df000204 	addi	fp,sp,8
   126c8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   126cc:	e0bffe17 	ldw	r2,-8(fp)
   126d0:	108000d0 	cmplti	r2,r2,3
   126d4:	1000111e 	bne	r2,zero,1271c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   126d8:	04000074 	movhi	r16,1
   126dc:	8412d004 	addi	r16,r16,19264
   126e0:	e0bffe17 	ldw	r2,-8(fp)
   126e4:	1009883a 	mov	r4,r2
   126e8:	01400304 	movi	r5,12
   126ec:	0010aa00 	call	10aa0 <__mulsi3>
   126f0:	10800204 	addi	r2,r2,8
   126f4:	8085883a 	add	r2,r16,r2
   126f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   126fc:	04000074 	movhi	r16,1
   12700:	8412d004 	addi	r16,r16,19264
   12704:	e0bffe17 	ldw	r2,-8(fp)
   12708:	1009883a 	mov	r4,r2
   1270c:	01400304 	movi	r5,12
   12710:	0010aa00 	call	10aa0 <__mulsi3>
   12714:	8085883a 	add	r2,r16,r2
   12718:	10000015 	stw	zero,0(r2)
  }
}
   1271c:	e6ffff04 	addi	sp,fp,-4
   12720:	dfc00217 	ldw	ra,8(sp)
   12724:	df000117 	ldw	fp,4(sp)
   12728:	dc000017 	ldw	r16,0(sp)
   1272c:	dec00304 	addi	sp,sp,12
   12730:	f800283a 	ret

00012734 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   12734:	deffff04 	addi	sp,sp,-4
   12738:	df000015 	stw	fp,0(sp)
   1273c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12740:	000170fa 	wrctl	ienable,zero
}
   12744:	e037883a 	mov	sp,fp
   12748:	df000017 	ldw	fp,0(sp)
   1274c:	dec00104 	addi	sp,sp,4
   12750:	f800283a 	ret

00012754 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12754:	defffa04 	addi	sp,sp,-24
   12758:	dfc00515 	stw	ra,20(sp)
   1275c:	df000415 	stw	fp,16(sp)
   12760:	df000404 	addi	fp,sp,16
   12764:	e13ffe15 	stw	r4,-8(fp)
   12768:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1276c:	e0bfff17 	ldw	r2,-4(fp)
   12770:	10800017 	ldw	r2,0(r2)
   12774:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12778:	e13ffe17 	ldw	r4,-8(fp)
   1277c:	0012bcc0 	call	12bcc <strlen>
   12780:	10800044 	addi	r2,r2,1
   12784:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12788:	00000d06 	br	127c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1278c:	e0bffc17 	ldw	r2,-16(fp)
   12790:	10c00217 	ldw	r3,8(r2)
   12794:	e0bffd17 	ldw	r2,-12(fp)
   12798:	1809883a 	mov	r4,r3
   1279c:	e17ffe17 	ldw	r5,-8(fp)
   127a0:	100d883a 	mov	r6,r2
   127a4:	0012a180 	call	12a18 <memcmp>
   127a8:	1000021e 	bne	r2,zero,127b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   127ac:	e0bffc17 	ldw	r2,-16(fp)
   127b0:	00000706 	br	127d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   127b4:	e0bffc17 	ldw	r2,-16(fp)
   127b8:	10800017 	ldw	r2,0(r2)
   127bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   127c0:	e0fffc17 	ldw	r3,-16(fp)
   127c4:	e0bfff17 	ldw	r2,-4(fp)
   127c8:	18bff01e 	bne	r3,r2,1278c <_gp+0xffff5acc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   127cc:	0005883a 	mov	r2,zero
}
   127d0:	e037883a 	mov	sp,fp
   127d4:	dfc00117 	ldw	ra,4(sp)
   127d8:	df000017 	ldw	fp,0(sp)
   127dc:	dec00204 	addi	sp,sp,8
   127e0:	f800283a 	ret

000127e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   127e4:	defffb04 	addi	sp,sp,-20
   127e8:	dfc00415 	stw	ra,16(sp)
   127ec:	df000315 	stw	fp,12(sp)
   127f0:	df000304 	addi	fp,sp,12
   127f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   127f8:	00800074 	movhi	r2,1
   127fc:	10933704 	addi	r2,r2,19676
   12800:	10800017 	ldw	r2,0(r2)
   12804:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   12808:	00003106 	br	128d0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1280c:	e0bffd17 	ldw	r2,-12(fp)
   12810:	10800217 	ldw	r2,8(r2)
   12814:	1009883a 	mov	r4,r2
   12818:	0012bcc0 	call	12bcc <strlen>
   1281c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12820:	e0bffd17 	ldw	r2,-12(fp)
   12824:	10c00217 	ldw	r3,8(r2)
   12828:	e0bffe17 	ldw	r2,-8(fp)
   1282c:	10bfffc4 	addi	r2,r2,-1
   12830:	1885883a 	add	r2,r3,r2
   12834:	10800003 	ldbu	r2,0(r2)
   12838:	10803fcc 	andi	r2,r2,255
   1283c:	1080201c 	xori	r2,r2,128
   12840:	10bfe004 	addi	r2,r2,-128
   12844:	10800bd8 	cmpnei	r2,r2,47
   12848:	1000031e 	bne	r2,zero,12858 <alt_find_file+0x74>
    {
      len -= 1;
   1284c:	e0bffe17 	ldw	r2,-8(fp)
   12850:	10bfffc4 	addi	r2,r2,-1
   12854:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12858:	e0bffe17 	ldw	r2,-8(fp)
   1285c:	e0ffff17 	ldw	r3,-4(fp)
   12860:	1885883a 	add	r2,r3,r2
   12864:	10800003 	ldbu	r2,0(r2)
   12868:	10803fcc 	andi	r2,r2,255
   1286c:	1080201c 	xori	r2,r2,128
   12870:	10bfe004 	addi	r2,r2,-128
   12874:	10800be0 	cmpeqi	r2,r2,47
   12878:	1000081e 	bne	r2,zero,1289c <alt_find_file+0xb8>
   1287c:	e0bffe17 	ldw	r2,-8(fp)
   12880:	e0ffff17 	ldw	r3,-4(fp)
   12884:	1885883a 	add	r2,r3,r2
   12888:	10800003 	ldbu	r2,0(r2)
   1288c:	10803fcc 	andi	r2,r2,255
   12890:	1080201c 	xori	r2,r2,128
   12894:	10bfe004 	addi	r2,r2,-128
   12898:	10000a1e 	bne	r2,zero,128c4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   1289c:	e0bffd17 	ldw	r2,-12(fp)
   128a0:	10c00217 	ldw	r3,8(r2)
   128a4:	e0bffe17 	ldw	r2,-8(fp)
   128a8:	1809883a 	mov	r4,r3
   128ac:	e17fff17 	ldw	r5,-4(fp)
   128b0:	100d883a 	mov	r6,r2
   128b4:	0012a180 	call	12a18 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   128b8:	1000021e 	bne	r2,zero,128c4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   128bc:	e0bffd17 	ldw	r2,-12(fp)
   128c0:	00000806 	br	128e4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   128c4:	e0bffd17 	ldw	r2,-12(fp)
   128c8:	10800017 	ldw	r2,0(r2)
   128cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   128d0:	e0fffd17 	ldw	r3,-12(fp)
   128d4:	00800074 	movhi	r2,1
   128d8:	10933704 	addi	r2,r2,19676
   128dc:	18bfcb1e 	bne	r3,r2,1280c <_gp+0xffff5b4c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   128e0:	0005883a 	mov	r2,zero
}
   128e4:	e037883a 	mov	sp,fp
   128e8:	dfc00117 	ldw	ra,4(sp)
   128ec:	df000017 	ldw	fp,0(sp)
   128f0:	dec00204 	addi	sp,sp,8
   128f4:	f800283a 	ret

000128f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   128f8:	defffa04 	addi	sp,sp,-24
   128fc:	dfc00515 	stw	ra,20(sp)
   12900:	df000415 	stw	fp,16(sp)
   12904:	dc000315 	stw	r16,12(sp)
   12908:	df000404 	addi	fp,sp,16
   1290c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   12910:	00bffa04 	movi	r2,-24
   12914:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12918:	e03ffc15 	stw	zero,-16(fp)
   1291c:	00002106 	br	129a4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   12920:	04000074 	movhi	r16,1
   12924:	8412d004 	addi	r16,r16,19264
   12928:	e0bffc17 	ldw	r2,-16(fp)
   1292c:	1009883a 	mov	r4,r2
   12930:	01400304 	movi	r5,12
   12934:	0010aa00 	call	10aa0 <__mulsi3>
   12938:	8085883a 	add	r2,r16,r2
   1293c:	10800017 	ldw	r2,0(r2)
   12940:	1000151e 	bne	r2,zero,12998 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   12944:	04000074 	movhi	r16,1
   12948:	8412d004 	addi	r16,r16,19264
   1294c:	e0bffc17 	ldw	r2,-16(fp)
   12950:	1009883a 	mov	r4,r2
   12954:	01400304 	movi	r5,12
   12958:	0010aa00 	call	10aa0 <__mulsi3>
   1295c:	8085883a 	add	r2,r16,r2
   12960:	e0fffe17 	ldw	r3,-8(fp)
   12964:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12968:	00800074 	movhi	r2,1
   1296c:	10933b04 	addi	r2,r2,19692
   12970:	10c00017 	ldw	r3,0(r2)
   12974:	e0bffc17 	ldw	r2,-16(fp)
   12978:	1880040e 	bge	r3,r2,1298c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1297c:	00800074 	movhi	r2,1
   12980:	10933b04 	addi	r2,r2,19692
   12984:	e0fffc17 	ldw	r3,-16(fp)
   12988:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   1298c:	e0bffc17 	ldw	r2,-16(fp)
   12990:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   12994:	00000606 	br	129b0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12998:	e0bffc17 	ldw	r2,-16(fp)
   1299c:	10800044 	addi	r2,r2,1
   129a0:	e0bffc15 	stw	r2,-16(fp)
   129a4:	e0bffc17 	ldw	r2,-16(fp)
   129a8:	10800810 	cmplti	r2,r2,32
   129ac:	103fdc1e 	bne	r2,zero,12920 <_gp+0xffff5c60>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   129b0:	e0bffd17 	ldw	r2,-12(fp)
}
   129b4:	e6ffff04 	addi	sp,fp,-4
   129b8:	dfc00217 	ldw	ra,8(sp)
   129bc:	df000117 	ldw	fp,4(sp)
   129c0:	dc000017 	ldw	r16,0(sp)
   129c4:	dec00304 	addi	sp,sp,12
   129c8:	f800283a 	ret

000129cc <atexit>:
   129cc:	200b883a 	mov	r5,r4
   129d0:	000d883a 	mov	r6,zero
   129d4:	0009883a 	mov	r4,zero
   129d8:	000f883a 	mov	r7,zero
   129dc:	0012c641 	jmpi	12c64 <__register_exitproc>

000129e0 <exit>:
   129e0:	defffe04 	addi	sp,sp,-8
   129e4:	000b883a 	mov	r5,zero
   129e8:	dc000015 	stw	r16,0(sp)
   129ec:	dfc00115 	stw	ra,4(sp)
   129f0:	2021883a 	mov	r16,r4
   129f4:	0012d780 	call	12d78 <__call_exitprocs>
   129f8:	00800074 	movhi	r2,1
   129fc:	10933204 	addi	r2,r2,19656
   12a00:	11000017 	ldw	r4,0(r2)
   12a04:	20800f17 	ldw	r2,60(r4)
   12a08:	10000126 	beq	r2,zero,12a10 <exit+0x30>
   12a0c:	103ee83a 	callr	r2
   12a10:	8009883a 	mov	r4,r16
   12a14:	00135280 	call	13528 <_exit>

00012a18 <memcmp>:
   12a18:	01c000c4 	movi	r7,3
   12a1c:	3980192e 	bgeu	r7,r6,12a84 <memcmp+0x6c>
   12a20:	2144b03a 	or	r2,r4,r5
   12a24:	11c4703a 	and	r2,r2,r7
   12a28:	10000f26 	beq	r2,zero,12a68 <memcmp+0x50>
   12a2c:	20800003 	ldbu	r2,0(r4)
   12a30:	28c00003 	ldbu	r3,0(r5)
   12a34:	10c0151e 	bne	r2,r3,12a8c <memcmp+0x74>
   12a38:	31bfff84 	addi	r6,r6,-2
   12a3c:	01ffffc4 	movi	r7,-1
   12a40:	00000406 	br	12a54 <memcmp+0x3c>
   12a44:	20800003 	ldbu	r2,0(r4)
   12a48:	28c00003 	ldbu	r3,0(r5)
   12a4c:	31bfffc4 	addi	r6,r6,-1
   12a50:	10c00e1e 	bne	r2,r3,12a8c <memcmp+0x74>
   12a54:	21000044 	addi	r4,r4,1
   12a58:	29400044 	addi	r5,r5,1
   12a5c:	31fff91e 	bne	r6,r7,12a44 <_gp+0xffff5d84>
   12a60:	0005883a 	mov	r2,zero
   12a64:	f800283a 	ret
   12a68:	20c00017 	ldw	r3,0(r4)
   12a6c:	28800017 	ldw	r2,0(r5)
   12a70:	1880041e 	bne	r3,r2,12a84 <memcmp+0x6c>
   12a74:	31bfff04 	addi	r6,r6,-4
   12a78:	21000104 	addi	r4,r4,4
   12a7c:	29400104 	addi	r5,r5,4
   12a80:	39bff936 	bltu	r7,r6,12a68 <_gp+0xffff5da8>
   12a84:	303fe91e 	bne	r6,zero,12a2c <_gp+0xffff5d6c>
   12a88:	003ff506 	br	12a60 <_gp+0xffff5da0>
   12a8c:	10c5c83a 	sub	r2,r2,r3
   12a90:	f800283a 	ret

00012a94 <memcpy>:
   12a94:	deffff04 	addi	sp,sp,-4
   12a98:	dc000015 	stw	r16,0(sp)
   12a9c:	00c003c4 	movi	r3,15
   12aa0:	2005883a 	mov	r2,r4
   12aa4:	1980432e 	bgeu	r3,r6,12bb4 <memcpy+0x120>
   12aa8:	2146b03a 	or	r3,r4,r5
   12aac:	18c000cc 	andi	r3,r3,3
   12ab0:	1800421e 	bne	r3,zero,12bbc <memcpy+0x128>
   12ab4:	343ffc04 	addi	r16,r6,-16
   12ab8:	8020d13a 	srli	r16,r16,4
   12abc:	28c00104 	addi	r3,r5,4
   12ac0:	23400104 	addi	r13,r4,4
   12ac4:	801e913a 	slli	r15,r16,4
   12ac8:	2b000204 	addi	r12,r5,8
   12acc:	22c00204 	addi	r11,r4,8
   12ad0:	7bc00504 	addi	r15,r15,20
   12ad4:	2a800304 	addi	r10,r5,12
   12ad8:	22400304 	addi	r9,r4,12
   12adc:	2bdf883a 	add	r15,r5,r15
   12ae0:	2811883a 	mov	r8,r5
   12ae4:	200f883a 	mov	r7,r4
   12ae8:	41000017 	ldw	r4,0(r8)
   12aec:	39c00404 	addi	r7,r7,16
   12af0:	18c00404 	addi	r3,r3,16
   12af4:	393ffc15 	stw	r4,-16(r7)
   12af8:	1bbffc17 	ldw	r14,-16(r3)
   12afc:	6b400404 	addi	r13,r13,16
   12b00:	5ac00404 	addi	r11,r11,16
   12b04:	6bbffc15 	stw	r14,-16(r13)
   12b08:	63800017 	ldw	r14,0(r12)
   12b0c:	4a400404 	addi	r9,r9,16
   12b10:	42000404 	addi	r8,r8,16
   12b14:	5bbffc15 	stw	r14,-16(r11)
   12b18:	53800017 	ldw	r14,0(r10)
   12b1c:	63000404 	addi	r12,r12,16
   12b20:	52800404 	addi	r10,r10,16
   12b24:	4bbffc15 	stw	r14,-16(r9)
   12b28:	1bffef1e 	bne	r3,r15,12ae8 <_gp+0xffff5e28>
   12b2c:	81c00044 	addi	r7,r16,1
   12b30:	380e913a 	slli	r7,r7,4
   12b34:	310003cc 	andi	r4,r6,15
   12b38:	02c000c4 	movi	r11,3
   12b3c:	11c7883a 	add	r3,r2,r7
   12b40:	29cb883a 	add	r5,r5,r7
   12b44:	59001f2e 	bgeu	r11,r4,12bc4 <memcpy+0x130>
   12b48:	1813883a 	mov	r9,r3
   12b4c:	2811883a 	mov	r8,r5
   12b50:	200f883a 	mov	r7,r4
   12b54:	42800017 	ldw	r10,0(r8)
   12b58:	4a400104 	addi	r9,r9,4
   12b5c:	39ffff04 	addi	r7,r7,-4
   12b60:	4abfff15 	stw	r10,-4(r9)
   12b64:	42000104 	addi	r8,r8,4
   12b68:	59fffa36 	bltu	r11,r7,12b54 <_gp+0xffff5e94>
   12b6c:	213fff04 	addi	r4,r4,-4
   12b70:	2008d0ba 	srli	r4,r4,2
   12b74:	318000cc 	andi	r6,r6,3
   12b78:	21000044 	addi	r4,r4,1
   12b7c:	2109883a 	add	r4,r4,r4
   12b80:	2109883a 	add	r4,r4,r4
   12b84:	1907883a 	add	r3,r3,r4
   12b88:	290b883a 	add	r5,r5,r4
   12b8c:	30000626 	beq	r6,zero,12ba8 <memcpy+0x114>
   12b90:	198d883a 	add	r6,r3,r6
   12b94:	29c00003 	ldbu	r7,0(r5)
   12b98:	18c00044 	addi	r3,r3,1
   12b9c:	29400044 	addi	r5,r5,1
   12ba0:	19ffffc5 	stb	r7,-1(r3)
   12ba4:	19bffb1e 	bne	r3,r6,12b94 <_gp+0xffff5ed4>
   12ba8:	dc000017 	ldw	r16,0(sp)
   12bac:	dec00104 	addi	sp,sp,4
   12bb0:	f800283a 	ret
   12bb4:	2007883a 	mov	r3,r4
   12bb8:	003ff406 	br	12b8c <_gp+0xffff5ecc>
   12bbc:	2007883a 	mov	r3,r4
   12bc0:	003ff306 	br	12b90 <_gp+0xffff5ed0>
   12bc4:	200d883a 	mov	r6,r4
   12bc8:	003ff006 	br	12b8c <_gp+0xffff5ecc>

00012bcc <strlen>:
   12bcc:	208000cc 	andi	r2,r4,3
   12bd0:	10002026 	beq	r2,zero,12c54 <strlen+0x88>
   12bd4:	20800007 	ldb	r2,0(r4)
   12bd8:	10002026 	beq	r2,zero,12c5c <strlen+0x90>
   12bdc:	2005883a 	mov	r2,r4
   12be0:	00000206 	br	12bec <strlen+0x20>
   12be4:	10c00007 	ldb	r3,0(r2)
   12be8:	18001826 	beq	r3,zero,12c4c <strlen+0x80>
   12bec:	10800044 	addi	r2,r2,1
   12bf0:	10c000cc 	andi	r3,r2,3
   12bf4:	183ffb1e 	bne	r3,zero,12be4 <_gp+0xffff5f24>
   12bf8:	10c00017 	ldw	r3,0(r2)
   12bfc:	01ffbff4 	movhi	r7,65279
   12c00:	39ffbfc4 	addi	r7,r7,-257
   12c04:	00ca303a 	nor	r5,zero,r3
   12c08:	01a02074 	movhi	r6,32897
   12c0c:	19c7883a 	add	r3,r3,r7
   12c10:	31a02004 	addi	r6,r6,-32640
   12c14:	1946703a 	and	r3,r3,r5
   12c18:	1986703a 	and	r3,r3,r6
   12c1c:	1800091e 	bne	r3,zero,12c44 <strlen+0x78>
   12c20:	10800104 	addi	r2,r2,4
   12c24:	10c00017 	ldw	r3,0(r2)
   12c28:	19cb883a 	add	r5,r3,r7
   12c2c:	00c6303a 	nor	r3,zero,r3
   12c30:	28c6703a 	and	r3,r5,r3
   12c34:	1986703a 	and	r3,r3,r6
   12c38:	183ff926 	beq	r3,zero,12c20 <_gp+0xffff5f60>
   12c3c:	00000106 	br	12c44 <strlen+0x78>
   12c40:	10800044 	addi	r2,r2,1
   12c44:	10c00007 	ldb	r3,0(r2)
   12c48:	183ffd1e 	bne	r3,zero,12c40 <_gp+0xffff5f80>
   12c4c:	1105c83a 	sub	r2,r2,r4
   12c50:	f800283a 	ret
   12c54:	2005883a 	mov	r2,r4
   12c58:	003fe706 	br	12bf8 <_gp+0xffff5f38>
   12c5c:	0005883a 	mov	r2,zero
   12c60:	f800283a 	ret

00012c64 <__register_exitproc>:
   12c64:	00800074 	movhi	r2,1
   12c68:	defffa04 	addi	sp,sp,-24
   12c6c:	10933204 	addi	r2,r2,19656
   12c70:	dc000315 	stw	r16,12(sp)
   12c74:	14000017 	ldw	r16,0(r2)
   12c78:	dc400415 	stw	r17,16(sp)
   12c7c:	dfc00515 	stw	ra,20(sp)
   12c80:	80805217 	ldw	r2,328(r16)
   12c84:	2023883a 	mov	r17,r4
   12c88:	10003626 	beq	r2,zero,12d64 <__register_exitproc+0x100>
   12c8c:	10c00117 	ldw	r3,4(r2)
   12c90:	010007c4 	movi	r4,31
   12c94:	20c00e16 	blt	r4,r3,12cd0 <__register_exitproc+0x6c>
   12c98:	1a400044 	addi	r9,r3,1
   12c9c:	8800211e 	bne	r17,zero,12d24 <__register_exitproc+0xc0>
   12ca0:	18c00084 	addi	r3,r3,2
   12ca4:	18c7883a 	add	r3,r3,r3
   12ca8:	18c7883a 	add	r3,r3,r3
   12cac:	12400115 	stw	r9,4(r2)
   12cb0:	10c7883a 	add	r3,r2,r3
   12cb4:	19400015 	stw	r5,0(r3)
   12cb8:	0005883a 	mov	r2,zero
   12cbc:	dfc00517 	ldw	ra,20(sp)
   12cc0:	dc400417 	ldw	r17,16(sp)
   12cc4:	dc000317 	ldw	r16,12(sp)
   12cc8:	dec00604 	addi	sp,sp,24
   12ccc:	f800283a 	ret
   12cd0:	00800034 	movhi	r2,0
   12cd4:	10800004 	addi	r2,r2,0
   12cd8:	10002526 	beq	r2,zero,12d70 <__register_exitproc+0x10c>
   12cdc:	01006404 	movi	r4,400
   12ce0:	d9400015 	stw	r5,0(sp)
   12ce4:	d9800115 	stw	r6,4(sp)
   12ce8:	d9c00215 	stw	r7,8(sp)
   12cec:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   12cf0:	d9400017 	ldw	r5,0(sp)
   12cf4:	d9800117 	ldw	r6,4(sp)
   12cf8:	d9c00217 	ldw	r7,8(sp)
   12cfc:	10001c26 	beq	r2,zero,12d70 <__register_exitproc+0x10c>
   12d00:	80c05217 	ldw	r3,328(r16)
   12d04:	10000115 	stw	zero,4(r2)
   12d08:	02400044 	movi	r9,1
   12d0c:	10c00015 	stw	r3,0(r2)
   12d10:	80805215 	stw	r2,328(r16)
   12d14:	10006215 	stw	zero,392(r2)
   12d18:	10006315 	stw	zero,396(r2)
   12d1c:	0007883a 	mov	r3,zero
   12d20:	883fdf26 	beq	r17,zero,12ca0 <_gp+0xffff5fe0>
   12d24:	18d1883a 	add	r8,r3,r3
   12d28:	4211883a 	add	r8,r8,r8
   12d2c:	1211883a 	add	r8,r2,r8
   12d30:	41802215 	stw	r6,136(r8)
   12d34:	01000044 	movi	r4,1
   12d38:	11806217 	ldw	r6,392(r2)
   12d3c:	20c8983a 	sll	r4,r4,r3
   12d40:	310cb03a 	or	r6,r6,r4
   12d44:	11806215 	stw	r6,392(r2)
   12d48:	41c04215 	stw	r7,264(r8)
   12d4c:	01800084 	movi	r6,2
   12d50:	89bfd31e 	bne	r17,r6,12ca0 <_gp+0xffff5fe0>
   12d54:	11806317 	ldw	r6,396(r2)
   12d58:	3108b03a 	or	r4,r6,r4
   12d5c:	11006315 	stw	r4,396(r2)
   12d60:	003fcf06 	br	12ca0 <_gp+0xffff5fe0>
   12d64:	80805304 	addi	r2,r16,332
   12d68:	80805215 	stw	r2,328(r16)
   12d6c:	003fc706 	br	12c8c <_gp+0xffff5fcc>
   12d70:	00bfffc4 	movi	r2,-1
   12d74:	003fd106 	br	12cbc <_gp+0xffff5ffc>

00012d78 <__call_exitprocs>:
   12d78:	00800074 	movhi	r2,1
   12d7c:	10933204 	addi	r2,r2,19656
   12d80:	10800017 	ldw	r2,0(r2)
   12d84:	defff404 	addi	sp,sp,-48
   12d88:	dd800815 	stw	r22,32(sp)
   12d8c:	d8800015 	stw	r2,0(sp)
   12d90:	10805204 	addi	r2,r2,328
   12d94:	dd000615 	stw	r20,24(sp)
   12d98:	dc800415 	stw	r18,16(sp)
   12d9c:	dfc00b15 	stw	ra,44(sp)
   12da0:	df000a15 	stw	fp,40(sp)
   12da4:	ddc00915 	stw	r23,36(sp)
   12da8:	dd400715 	stw	r21,28(sp)
   12dac:	dcc00515 	stw	r19,20(sp)
   12db0:	dc400315 	stw	r17,12(sp)
   12db4:	dc000215 	stw	r16,8(sp)
   12db8:	2025883a 	mov	r18,r4
   12dbc:	2829883a 	mov	r20,r5
   12dc0:	d8800115 	stw	r2,4(sp)
   12dc4:	05bfffc4 	movi	r22,-1
   12dc8:	d8800017 	ldw	r2,0(sp)
   12dcc:	14c05217 	ldw	r19,328(r2)
   12dd0:	98001d26 	beq	r19,zero,12e48 <__call_exitprocs+0xd0>
   12dd4:	dd400117 	ldw	r21,4(sp)
   12dd8:	98800117 	ldw	r2,4(r19)
   12ddc:	173fffc4 	addi	fp,r2,-1
   12de0:	e0000d16 	blt	fp,zero,12e18 <__call_exitprocs+0xa0>
   12de4:	14000044 	addi	r16,r2,1
   12de8:	8421883a 	add	r16,r16,r16
   12dec:	8421883a 	add	r16,r16,r16
   12df0:	84402004 	addi	r17,r16,128
   12df4:	9c63883a 	add	r17,r19,r17
   12df8:	9c21883a 	add	r16,r19,r16
   12dfc:	a0001e26 	beq	r20,zero,12e78 <__call_exitprocs+0x100>
   12e00:	80804017 	ldw	r2,256(r16)
   12e04:	15001c26 	beq	r2,r20,12e78 <__call_exitprocs+0x100>
   12e08:	e73fffc4 	addi	fp,fp,-1
   12e0c:	843fff04 	addi	r16,r16,-4
   12e10:	8c7fff04 	addi	r17,r17,-4
   12e14:	e5bff91e 	bne	fp,r22,12dfc <_gp+0xffff613c>
   12e18:	00800034 	movhi	r2,0
   12e1c:	10800004 	addi	r2,r2,0
   12e20:	10000926 	beq	r2,zero,12e48 <__call_exitprocs+0xd0>
   12e24:	98800117 	ldw	r2,4(r19)
   12e28:	1000311e 	bne	r2,zero,12ef0 <__call_exitprocs+0x178>
   12e2c:	98800017 	ldw	r2,0(r19)
   12e30:	10003426 	beq	r2,zero,12f04 <__call_exitprocs+0x18c>
   12e34:	9809883a 	mov	r4,r19
   12e38:	a8800015 	stw	r2,0(r21)
   12e3c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   12e40:	acc00017 	ldw	r19,0(r21)
   12e44:	983fe41e 	bne	r19,zero,12dd8 <_gp+0xffff6118>
   12e48:	dfc00b17 	ldw	ra,44(sp)
   12e4c:	df000a17 	ldw	fp,40(sp)
   12e50:	ddc00917 	ldw	r23,36(sp)
   12e54:	dd800817 	ldw	r22,32(sp)
   12e58:	dd400717 	ldw	r21,28(sp)
   12e5c:	dd000617 	ldw	r20,24(sp)
   12e60:	dcc00517 	ldw	r19,20(sp)
   12e64:	dc800417 	ldw	r18,16(sp)
   12e68:	dc400317 	ldw	r17,12(sp)
   12e6c:	dc000217 	ldw	r16,8(sp)
   12e70:	dec00c04 	addi	sp,sp,48
   12e74:	f800283a 	ret
   12e78:	98800117 	ldw	r2,4(r19)
   12e7c:	80c00017 	ldw	r3,0(r16)
   12e80:	10bfffc4 	addi	r2,r2,-1
   12e84:	17001526 	beq	r2,fp,12edc <__call_exitprocs+0x164>
   12e88:	80000015 	stw	zero,0(r16)
   12e8c:	183fde26 	beq	r3,zero,12e08 <_gp+0xffff6148>
   12e90:	00800044 	movi	r2,1
   12e94:	1708983a 	sll	r4,r2,fp
   12e98:	98806217 	ldw	r2,392(r19)
   12e9c:	9dc00117 	ldw	r23,4(r19)
   12ea0:	2084703a 	and	r2,r4,r2
   12ea4:	1000061e 	bne	r2,zero,12ec0 <__call_exitprocs+0x148>
   12ea8:	183ee83a 	callr	r3
   12eac:	98800117 	ldw	r2,4(r19)
   12eb0:	15ffc51e 	bne	r2,r23,12dc8 <_gp+0xffff6108>
   12eb4:	a8800017 	ldw	r2,0(r21)
   12eb8:	14ffd326 	beq	r2,r19,12e08 <_gp+0xffff6148>
   12ebc:	003fc206 	br	12dc8 <_gp+0xffff6108>
   12ec0:	98806317 	ldw	r2,396(r19)
   12ec4:	2084703a 	and	r2,r4,r2
   12ec8:	1000061e 	bne	r2,zero,12ee4 <__call_exitprocs+0x16c>
   12ecc:	89400017 	ldw	r5,0(r17)
   12ed0:	9009883a 	mov	r4,r18
   12ed4:	183ee83a 	callr	r3
   12ed8:	003ff406 	br	12eac <_gp+0xffff61ec>
   12edc:	9f000115 	stw	fp,4(r19)
   12ee0:	003fea06 	br	12e8c <_gp+0xffff61cc>
   12ee4:	89000017 	ldw	r4,0(r17)
   12ee8:	183ee83a 	callr	r3
   12eec:	003fef06 	br	12eac <_gp+0xffff61ec>
   12ef0:	98800017 	ldw	r2,0(r19)
   12ef4:	982b883a 	mov	r21,r19
   12ef8:	1027883a 	mov	r19,r2
   12efc:	983fb61e 	bne	r19,zero,12dd8 <_gp+0xffff6118>
   12f00:	003fd106 	br	12e48 <_gp+0xffff6188>
   12f04:	0005883a 	mov	r2,zero
   12f08:	003ffa06 	br	12ef4 <_gp+0xffff6234>

00012f0c <__umoddi3>:
   12f0c:	defff404 	addi	sp,sp,-48
   12f10:	dd800815 	stw	r22,32(sp)
   12f14:	dc400315 	stw	r17,12(sp)
   12f18:	dc000215 	stw	r16,8(sp)
   12f1c:	dfc00b15 	stw	ra,44(sp)
   12f20:	df000a15 	stw	fp,40(sp)
   12f24:	ddc00915 	stw	r23,36(sp)
   12f28:	dd400715 	stw	r21,28(sp)
   12f2c:	dd000615 	stw	r20,24(sp)
   12f30:	dcc00515 	stw	r19,20(sp)
   12f34:	dc800415 	stw	r18,16(sp)
   12f38:	2021883a 	mov	r16,r4
   12f3c:	2823883a 	mov	r17,r5
   12f40:	282d883a 	mov	r22,r5
   12f44:	38003c1e 	bne	r7,zero,13038 <__umoddi3+0x12c>
   12f48:	3027883a 	mov	r19,r6
   12f4c:	2029883a 	mov	r20,r4
   12f50:	2980522e 	bgeu	r5,r6,1309c <__umoddi3+0x190>
   12f54:	00bfffd4 	movui	r2,65535
   12f58:	1180a436 	bltu	r2,r6,131ec <__umoddi3+0x2e0>
   12f5c:	00803fc4 	movi	r2,255
   12f60:	11815e2e 	bgeu	r2,r6,134dc <__umoddi3+0x5d0>
   12f64:	01400204 	movi	r5,8
   12f68:	2805883a 	mov	r2,r5
   12f6c:	314ad83a 	srl	r5,r6,r5
   12f70:	00c00074 	movhi	r3,1
   12f74:	18cd6504 	addi	r3,r3,13716
   12f78:	194b883a 	add	r5,r3,r5
   12f7c:	29000003 	ldbu	r4,0(r5)
   12f80:	2089883a 	add	r4,r4,r2
   12f84:	00800804 	movi	r2,32
   12f88:	1105c83a 	sub	r2,r2,r4
   12f8c:	10010c26 	beq	r2,zero,133c0 <__umoddi3+0x4b4>
   12f90:	88a2983a 	sll	r17,r17,r2
   12f94:	8108d83a 	srl	r4,r16,r4
   12f98:	30a6983a 	sll	r19,r6,r2
   12f9c:	80a8983a 	sll	r20,r16,r2
   12fa0:	1025883a 	mov	r18,r2
   12fa4:	892cb03a 	or	r22,r17,r4
   12fa8:	9822d43a 	srli	r17,r19,16
   12fac:	b009883a 	mov	r4,r22
   12fb0:	9d7fffcc 	andi	r21,r19,65535
   12fb4:	880b883a 	mov	r5,r17
   12fb8:	00108680 	call	10868 <__umodsi3>
   12fbc:	b009883a 	mov	r4,r22
   12fc0:	880b883a 	mov	r5,r17
   12fc4:	102f883a 	mov	r23,r2
   12fc8:	00108600 	call	10860 <__udivsi3>
   12fcc:	1009883a 	mov	r4,r2
   12fd0:	a80b883a 	mov	r5,r21
   12fd4:	0010aa00 	call	10aa0 <__mulsi3>
   12fd8:	b82e943a 	slli	r23,r23,16
   12fdc:	a008d43a 	srli	r4,r20,16
   12fe0:	b906b03a 	or	r3,r23,r4
   12fe4:	1880042e 	bgeu	r3,r2,12ff8 <__umoddi3+0xec>
   12fe8:	1cc7883a 	add	r3,r3,r19
   12fec:	1cc00236 	bltu	r3,r19,12ff8 <__umoddi3+0xec>
   12ff0:	1880012e 	bgeu	r3,r2,12ff8 <__umoddi3+0xec>
   12ff4:	1cc7883a 	add	r3,r3,r19
   12ff8:	18a1c83a 	sub	r16,r3,r2
   12ffc:	8009883a 	mov	r4,r16
   13000:	880b883a 	mov	r5,r17
   13004:	00108680 	call	10868 <__umodsi3>
   13008:	8009883a 	mov	r4,r16
   1300c:	880b883a 	mov	r5,r17
   13010:	102d883a 	mov	r22,r2
   13014:	00108600 	call	10860 <__udivsi3>
   13018:	1009883a 	mov	r4,r2
   1301c:	a80b883a 	mov	r5,r21
   13020:	b02c943a 	slli	r22,r22,16
   13024:	0010aa00 	call	10aa0 <__mulsi3>
   13028:	a13fffcc 	andi	r4,r20,65535
   1302c:	b106b03a 	or	r3,r22,r4
   13030:	1880572e 	bgeu	r3,r2,13190 <__umoddi3+0x284>
   13034:	00005206 	br	13180 <__umoddi3+0x274>
   13038:	29c05936 	bltu	r5,r7,131a0 <__umoddi3+0x294>
   1303c:	00bfffd4 	movui	r2,65535
   13040:	11c0652e 	bgeu	r2,r7,131d8 <__umoddi3+0x2cc>
   13044:	00804034 	movhi	r2,256
   13048:	10bfffc4 	addi	r2,r2,-1
   1304c:	11c1172e 	bgeu	r2,r7,134ac <__umoddi3+0x5a0>
   13050:	01400604 	movi	r5,24
   13054:	282b883a 	mov	r21,r5
   13058:	394ad83a 	srl	r5,r7,r5
   1305c:	00c00074 	movhi	r3,1
   13060:	18cd6504 	addi	r3,r3,13716
   13064:	194b883a 	add	r5,r3,r5
   13068:	28800003 	ldbu	r2,0(r5)
   1306c:	00c00804 	movi	r3,32
   13070:	156b883a 	add	r21,r2,r21
   13074:	1d69c83a 	sub	r20,r3,r21
   13078:	a000671e 	bne	r20,zero,13218 <__umoddi3+0x30c>
   1307c:	3c400136 	bltu	r7,r17,13084 <__umoddi3+0x178>
   13080:	81812336 	bltu	r16,r6,13510 <__umoddi3+0x604>
   13084:	8185c83a 	sub	r2,r16,r6
   13088:	89e3c83a 	sub	r17,r17,r7
   1308c:	8087803a 	cmpltu	r3,r16,r2
   13090:	88edc83a 	sub	r22,r17,r3
   13094:	b007883a 	mov	r3,r22
   13098:	00004306 	br	131a8 <__umoddi3+0x29c>
   1309c:	3000041e 	bne	r6,zero,130b0 <__umoddi3+0x1a4>
   130a0:	01000044 	movi	r4,1
   130a4:	000b883a 	mov	r5,zero
   130a8:	00108600 	call	10860 <__udivsi3>
   130ac:	1027883a 	mov	r19,r2
   130b0:	00bfffd4 	movui	r2,65535
   130b4:	14c0532e 	bgeu	r2,r19,13204 <__umoddi3+0x2f8>
   130b8:	00804034 	movhi	r2,256
   130bc:	10bfffc4 	addi	r2,r2,-1
   130c0:	14c1032e 	bgeu	r2,r19,134d0 <__umoddi3+0x5c4>
   130c4:	00800604 	movi	r2,24
   130c8:	1007883a 	mov	r3,r2
   130cc:	9884d83a 	srl	r2,r19,r2
   130d0:	01000074 	movhi	r4,1
   130d4:	210d6504 	addi	r4,r4,13716
   130d8:	2085883a 	add	r2,r4,r2
   130dc:	11000003 	ldbu	r4,0(r2)
   130e0:	00800804 	movi	r2,32
   130e4:	20c7883a 	add	r3,r4,r3
   130e8:	10c5c83a 	sub	r2,r2,r3
   130ec:	1000b61e 	bne	r2,zero,133c8 <__umoddi3+0x4bc>
   130f0:	982ad43a 	srli	r21,r19,16
   130f4:	8ce3c83a 	sub	r17,r17,r19
   130f8:	9dbfffcc 	andi	r22,r19,65535
   130fc:	0025883a 	mov	r18,zero
   13100:	8809883a 	mov	r4,r17
   13104:	a80b883a 	mov	r5,r21
   13108:	00108680 	call	10868 <__umodsi3>
   1310c:	8809883a 	mov	r4,r17
   13110:	a80b883a 	mov	r5,r21
   13114:	102f883a 	mov	r23,r2
   13118:	00108600 	call	10860 <__udivsi3>
   1311c:	1009883a 	mov	r4,r2
   13120:	b00b883a 	mov	r5,r22
   13124:	0010aa00 	call	10aa0 <__mulsi3>
   13128:	b82e943a 	slli	r23,r23,16
   1312c:	a008d43a 	srli	r4,r20,16
   13130:	b906b03a 	or	r3,r23,r4
   13134:	1880032e 	bgeu	r3,r2,13144 <__umoddi3+0x238>
   13138:	1cc7883a 	add	r3,r3,r19
   1313c:	1cc00136 	bltu	r3,r19,13144 <__umoddi3+0x238>
   13140:	1880f136 	bltu	r3,r2,13508 <__umoddi3+0x5fc>
   13144:	18a1c83a 	sub	r16,r3,r2
   13148:	8009883a 	mov	r4,r16
   1314c:	a80b883a 	mov	r5,r21
   13150:	00108680 	call	10868 <__umodsi3>
   13154:	8009883a 	mov	r4,r16
   13158:	a80b883a 	mov	r5,r21
   1315c:	1023883a 	mov	r17,r2
   13160:	00108600 	call	10860 <__udivsi3>
   13164:	1009883a 	mov	r4,r2
   13168:	b00b883a 	mov	r5,r22
   1316c:	8822943a 	slli	r17,r17,16
   13170:	0010aa00 	call	10aa0 <__mulsi3>
   13174:	a13fffcc 	andi	r4,r20,65535
   13178:	8906b03a 	or	r3,r17,r4
   1317c:	1880042e 	bgeu	r3,r2,13190 <__umoddi3+0x284>
   13180:	1cc7883a 	add	r3,r3,r19
   13184:	1cc00236 	bltu	r3,r19,13190 <__umoddi3+0x284>
   13188:	1880012e 	bgeu	r3,r2,13190 <__umoddi3+0x284>
   1318c:	1cc7883a 	add	r3,r3,r19
   13190:	1887c83a 	sub	r3,r3,r2
   13194:	1c84d83a 	srl	r2,r3,r18
   13198:	0007883a 	mov	r3,zero
   1319c:	00000206 	br	131a8 <__umoddi3+0x29c>
   131a0:	2005883a 	mov	r2,r4
   131a4:	2807883a 	mov	r3,r5
   131a8:	dfc00b17 	ldw	ra,44(sp)
   131ac:	df000a17 	ldw	fp,40(sp)
   131b0:	ddc00917 	ldw	r23,36(sp)
   131b4:	dd800817 	ldw	r22,32(sp)
   131b8:	dd400717 	ldw	r21,28(sp)
   131bc:	dd000617 	ldw	r20,24(sp)
   131c0:	dcc00517 	ldw	r19,20(sp)
   131c4:	dc800417 	ldw	r18,16(sp)
   131c8:	dc400317 	ldw	r17,12(sp)
   131cc:	dc000217 	ldw	r16,8(sp)
   131d0:	dec00c04 	addi	sp,sp,48
   131d4:	f800283a 	ret
   131d8:	00803fc4 	movi	r2,255
   131dc:	11c0b02e 	bgeu	r2,r7,134a0 <__umoddi3+0x594>
   131e0:	01400204 	movi	r5,8
   131e4:	282b883a 	mov	r21,r5
   131e8:	003f9b06 	br	13058 <_gp+0xffff6398>
   131ec:	00804034 	movhi	r2,256
   131f0:	10bfffc4 	addi	r2,r2,-1
   131f4:	1180b02e 	bgeu	r2,r6,134b8 <__umoddi3+0x5ac>
   131f8:	01400604 	movi	r5,24
   131fc:	2805883a 	mov	r2,r5
   13200:	003f5a06 	br	12f6c <_gp+0xffff62ac>
   13204:	00803fc4 	movi	r2,255
   13208:	14c0ae2e 	bgeu	r2,r19,134c4 <__umoddi3+0x5b8>
   1320c:	00800204 	movi	r2,8
   13210:	1007883a 	mov	r3,r2
   13214:	003fad06 	br	130cc <_gp+0xffff640c>
   13218:	3d0a983a 	sll	r5,r7,r20
   1321c:	356cd83a 	srl	r22,r6,r21
   13220:	8d78d83a 	srl	fp,r17,r21
   13224:	8d10983a 	sll	r8,r17,r20
   13228:	2dacb03a 	or	r22,r5,r22
   1322c:	b02ed43a 	srli	r23,r22,16
   13230:	8564d83a 	srl	r18,r16,r21
   13234:	e009883a 	mov	r4,fp
   13238:	b80b883a 	mov	r5,r23
   1323c:	44a4b03a 	or	r18,r8,r18
   13240:	3526983a 	sll	r19,r6,r20
   13244:	00108680 	call	10868 <__umodsi3>
   13248:	e009883a 	mov	r4,fp
   1324c:	b80b883a 	mov	r5,r23
   13250:	b47fffcc 	andi	r17,r22,65535
   13254:	d8800015 	stw	r2,0(sp)
   13258:	00108600 	call	10860 <__udivsi3>
   1325c:	1009883a 	mov	r4,r2
   13260:	880b883a 	mov	r5,r17
   13264:	1039883a 	mov	fp,r2
   13268:	0010aa00 	call	10aa0 <__mulsi3>
   1326c:	d9800017 	ldw	r6,0(sp)
   13270:	9008d43a 	srli	r4,r18,16
   13274:	8520983a 	sll	r16,r16,r20
   13278:	300c943a 	slli	r6,r6,16
   1327c:	3106b03a 	or	r3,r6,r4
   13280:	1880042e 	bgeu	r3,r2,13294 <__umoddi3+0x388>
   13284:	1d87883a 	add	r3,r3,r22
   13288:	e13fffc4 	addi	r4,fp,-1
   1328c:	1d809a2e 	bgeu	r3,r22,134f8 <__umoddi3+0x5ec>
   13290:	2039883a 	mov	fp,r4
   13294:	1887c83a 	sub	r3,r3,r2
   13298:	1809883a 	mov	r4,r3
   1329c:	b80b883a 	mov	r5,r23
   132a0:	d8c00115 	stw	r3,4(sp)
   132a4:	00108680 	call	10868 <__umodsi3>
   132a8:	d8c00117 	ldw	r3,4(sp)
   132ac:	b80b883a 	mov	r5,r23
   132b0:	d8800015 	stw	r2,0(sp)
   132b4:	1809883a 	mov	r4,r3
   132b8:	00108600 	call	10860 <__udivsi3>
   132bc:	880b883a 	mov	r5,r17
   132c0:	1009883a 	mov	r4,r2
   132c4:	102f883a 	mov	r23,r2
   132c8:	0010aa00 	call	10aa0 <__mulsi3>
   132cc:	d9800017 	ldw	r6,0(sp)
   132d0:	947fffcc 	andi	r17,r18,65535
   132d4:	300c943a 	slli	r6,r6,16
   132d8:	3464b03a 	or	r18,r6,r17
   132dc:	9080042e 	bgeu	r18,r2,132f0 <__umoddi3+0x3e4>
   132e0:	95a5883a 	add	r18,r18,r22
   132e4:	b8ffffc4 	addi	r3,r23,-1
   132e8:	95807f2e 	bgeu	r18,r22,134e8 <__umoddi3+0x5dc>
   132ec:	182f883a 	mov	r23,r3
   132f0:	e038943a 	slli	fp,fp,16
   132f4:	980cd43a 	srli	r6,r19,16
   132f8:	98ffffcc 	andi	r3,r19,65535
   132fc:	bf38b03a 	or	fp,r23,fp
   13300:	e02ed43a 	srli	r23,fp,16
   13304:	e73fffcc 	andi	fp,fp,65535
   13308:	180b883a 	mov	r5,r3
   1330c:	e009883a 	mov	r4,fp
   13310:	d9800015 	stw	r6,0(sp)
   13314:	d8c00115 	stw	r3,4(sp)
   13318:	90a5c83a 	sub	r18,r18,r2
   1331c:	0010aa00 	call	10aa0 <__mulsi3>
   13320:	d8c00117 	ldw	r3,4(sp)
   13324:	b809883a 	mov	r4,r23
   13328:	1023883a 	mov	r17,r2
   1332c:	180b883a 	mov	r5,r3
   13330:	0010aa00 	call	10aa0 <__mulsi3>
   13334:	d9800017 	ldw	r6,0(sp)
   13338:	b809883a 	mov	r4,r23
   1333c:	d8800115 	stw	r2,4(sp)
   13340:	300b883a 	mov	r5,r6
   13344:	302f883a 	mov	r23,r6
   13348:	0010aa00 	call	10aa0 <__mulsi3>
   1334c:	e009883a 	mov	r4,fp
   13350:	b80b883a 	mov	r5,r23
   13354:	d8800015 	stw	r2,0(sp)
   13358:	0010aa00 	call	10aa0 <__mulsi3>
   1335c:	d8c00117 	ldw	r3,4(sp)
   13360:	880cd43a 	srli	r6,r17,16
   13364:	d9c00017 	ldw	r7,0(sp)
   13368:	1885883a 	add	r2,r3,r2
   1336c:	118d883a 	add	r6,r2,r6
   13370:	30c0022e 	bgeu	r6,r3,1337c <__umoddi3+0x470>
   13374:	00800074 	movhi	r2,1
   13378:	388f883a 	add	r7,r7,r2
   1337c:	3006d43a 	srli	r3,r6,16
   13380:	300c943a 	slli	r6,r6,16
   13384:	8c7fffcc 	andi	r17,r17,65535
   13388:	38c7883a 	add	r3,r7,r3
   1338c:	3463883a 	add	r17,r6,r17
   13390:	90c03d36 	bltu	r18,r3,13488 <__umoddi3+0x57c>
   13394:	90c06026 	beq	r18,r3,13518 <__umoddi3+0x60c>
   13398:	90c9c83a 	sub	r4,r18,r3
   1339c:	880f883a 	mov	r7,r17
   133a0:	81cfc83a 	sub	r7,r16,r7
   133a4:	81c7803a 	cmpltu	r3,r16,r7
   133a8:	20c7c83a 	sub	r3,r4,r3
   133ac:	1d44983a 	sll	r2,r3,r21
   133b0:	3d0ed83a 	srl	r7,r7,r20
   133b4:	1d06d83a 	srl	r3,r3,r20
   133b8:	11c4b03a 	or	r2,r2,r7
   133bc:	003f7a06 	br	131a8 <_gp+0xffff64e8>
   133c0:	0025883a 	mov	r18,zero
   133c4:	003ef806 	br	12fa8 <_gp+0xffff62e8>
   133c8:	98a6983a 	sll	r19,r19,r2
   133cc:	88e8d83a 	srl	r20,r17,r3
   133d0:	80c6d83a 	srl	r3,r16,r3
   133d4:	982ad43a 	srli	r21,r19,16
   133d8:	88a2983a 	sll	r17,r17,r2
   133dc:	a009883a 	mov	r4,r20
   133e0:	a80b883a 	mov	r5,r21
   133e4:	88eeb03a 	or	r23,r17,r3
   133e8:	1025883a 	mov	r18,r2
   133ec:	00108680 	call	10868 <__umodsi3>
   133f0:	a009883a 	mov	r4,r20
   133f4:	a80b883a 	mov	r5,r21
   133f8:	1023883a 	mov	r17,r2
   133fc:	9dbfffcc 	andi	r22,r19,65535
   13400:	00108600 	call	10860 <__udivsi3>
   13404:	1009883a 	mov	r4,r2
   13408:	b00b883a 	mov	r5,r22
   1340c:	0010aa00 	call	10aa0 <__mulsi3>
   13410:	8822943a 	slli	r17,r17,16
   13414:	b808d43a 	srli	r4,r23,16
   13418:	84a8983a 	sll	r20,r16,r18
   1341c:	8906b03a 	or	r3,r17,r4
   13420:	1880042e 	bgeu	r3,r2,13434 <__umoddi3+0x528>
   13424:	1cc7883a 	add	r3,r3,r19
   13428:	1cc00236 	bltu	r3,r19,13434 <__umoddi3+0x528>
   1342c:	1880012e 	bgeu	r3,r2,13434 <__umoddi3+0x528>
   13430:	1cc7883a 	add	r3,r3,r19
   13434:	18a1c83a 	sub	r16,r3,r2
   13438:	8009883a 	mov	r4,r16
   1343c:	a80b883a 	mov	r5,r21
   13440:	00108680 	call	10868 <__umodsi3>
   13444:	8009883a 	mov	r4,r16
   13448:	a80b883a 	mov	r5,r21
   1344c:	1039883a 	mov	fp,r2
   13450:	00108600 	call	10860 <__udivsi3>
   13454:	1009883a 	mov	r4,r2
   13458:	b00b883a 	mov	r5,r22
   1345c:	0010aa00 	call	10aa0 <__mulsi3>
   13460:	e006943a 	slli	r3,fp,16
   13464:	b93fffcc 	andi	r4,r23,65535
   13468:	1906b03a 	or	r3,r3,r4
   1346c:	1880042e 	bgeu	r3,r2,13480 <__umoddi3+0x574>
   13470:	1cc7883a 	add	r3,r3,r19
   13474:	1cc00236 	bltu	r3,r19,13480 <__umoddi3+0x574>
   13478:	1880012e 	bgeu	r3,r2,13480 <__umoddi3+0x574>
   1347c:	1cc7883a 	add	r3,r3,r19
   13480:	18a3c83a 	sub	r17,r3,r2
   13484:	003f1e06 	br	13100 <_gp+0xffff6440>
   13488:	8ccfc83a 	sub	r7,r17,r19
   1348c:	1d89c83a 	sub	r4,r3,r22
   13490:	89e3803a 	cmpltu	r17,r17,r7
   13494:	2463c83a 	sub	r17,r4,r17
   13498:	9449c83a 	sub	r4,r18,r17
   1349c:	003fc006 	br	133a0 <_gp+0xffff66e0>
   134a0:	000b883a 	mov	r5,zero
   134a4:	002b883a 	mov	r21,zero
   134a8:	003eeb06 	br	13058 <_gp+0xffff6398>
   134ac:	01400404 	movi	r5,16
   134b0:	282b883a 	mov	r21,r5
   134b4:	003ee806 	br	13058 <_gp+0xffff6398>
   134b8:	01400404 	movi	r5,16
   134bc:	2805883a 	mov	r2,r5
   134c0:	003eaa06 	br	12f6c <_gp+0xffff62ac>
   134c4:	0005883a 	mov	r2,zero
   134c8:	0007883a 	mov	r3,zero
   134cc:	003eff06 	br	130cc <_gp+0xffff640c>
   134d0:	00800404 	movi	r2,16
   134d4:	1007883a 	mov	r3,r2
   134d8:	003efc06 	br	130cc <_gp+0xffff640c>
   134dc:	000b883a 	mov	r5,zero
   134e0:	0005883a 	mov	r2,zero
   134e4:	003ea106 	br	12f6c <_gp+0xffff62ac>
   134e8:	90bf802e 	bgeu	r18,r2,132ec <_gp+0xffff662c>
   134ec:	bdffff84 	addi	r23,r23,-2
   134f0:	95a5883a 	add	r18,r18,r22
   134f4:	003f7e06 	br	132f0 <_gp+0xffff6630>
   134f8:	18bf652e 	bgeu	r3,r2,13290 <_gp+0xffff65d0>
   134fc:	e73fff84 	addi	fp,fp,-2
   13500:	1d87883a 	add	r3,r3,r22
   13504:	003f6306 	br	13294 <_gp+0xffff65d4>
   13508:	1cc7883a 	add	r3,r3,r19
   1350c:	003f0d06 	br	13144 <_gp+0xffff6484>
   13510:	8005883a 	mov	r2,r16
   13514:	003edf06 	br	13094 <_gp+0xffff63d4>
   13518:	847fdb36 	bltu	r16,r17,13488 <_gp+0xffff67c8>
   1351c:	880f883a 	mov	r7,r17
   13520:	0009883a 	mov	r4,zero
   13524:	003f9e06 	br	133a0 <_gp+0xffff66e0>

00013528 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   13528:	defffd04 	addi	sp,sp,-12
   1352c:	df000215 	stw	fp,8(sp)
   13530:	df000204 	addi	fp,sp,8
   13534:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   13538:	0001883a 	nop
   1353c:	e0bfff17 	ldw	r2,-4(fp)
   13540:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   13544:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   13548:	10000226 	beq	r2,zero,13554 <_exit+0x2c>
    ALT_SIM_FAIL();
   1354c:	002af070 	cmpltui	zero,zero,43969
   13550:	00000106 	br	13558 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   13554:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   13558:	003fff06 	br	13558 <_gp+0xffff6898>
