
nios_software.elf:     file format elf32-littlenios2
nios_software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000822c

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00003740 memsz 0x00003740 flags r-x
    LOAD off    0x00004760 vaddr 0x0000b760 paddr 0x0000cdc0 align 2**12
         filesz 0x00001660 memsz 0x00001660 flags rw-
    LOAD off    0x00006420 vaddr 0x0000e420 paddr 0x0000e420 align 2**12
         filesz 0x00000000 memsz 0x00000138 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000033fc  0000822c  0000822c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  0000b628  0000b628  00004628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001660  0000b760  0000cdc0  00004760  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000138  0000e420  0000e420  00006420  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000e558  0000e558  00005dc0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005dc0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006f8  00000000  00000000  00005de8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a124  00000000  00000000  000064e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034f2  00000000  00000000  00010604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003554  00000000  00000000  00013af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000e08  00000000  00000000  0001704c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002106  00000000  00000000  00017e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001e56  00000000  00000000  00019f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0001bdb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002e8  00000000  00000000  0001bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001dfb1  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001dfb4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001dfc0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001dfc1  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001dfc2  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001dfc6  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001dfca  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001dfce  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001dfd9  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001dfe4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001dfef  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000053  00000000  00000000  0001dffa  2**0
                  CONTENTS, READONLY
 29 .jdi          00004237  00000000  00000000  0001e04d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00043298  00000000  00000000  00022284  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
0000822c l    d  .text	00000000 .text
0000b628 l    d  .rodata	00000000 .rodata
0000b760 l    d  .rwdata	00000000 .rwdata
0000e420 l    d  .bss	00000000 .bss
0000e558 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_software_bsp//obj/HAL/src/crt0.o
00008264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 lab4_main.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
0000b760 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_load.c
00008af4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008e1c l     F .text	00000038 alt_dev_reg
0000bb84 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000090f8 l     F .text	00000204 altera_avalon_jtag_uart_irq
000092fc l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00009bb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009cf8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009d24 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a1bc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000a314 l     F .text	00000050 alt_get_errno
0000a364 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000b4c8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000e454 g     O .bss	00000004 alt_instruction_exception_handler
00008bd8 g     F .text	00000078 alt_main
0000e458 g     O .bss	00000100 alt_irq
0000cdc0 g       *ABS*	00000000 __flash_rwdata_start
00008754 g     F .text	00000058 _gettimeofday_r
000083f0 g     F .text	000000ac audioRegWrite
0000a638 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000e428 g     O .bss	00000004 errno
0000e440 g     O .bss	00000004 alt_argv
00014d8c g       *ABS*	00000000 _gp
00008dec g     F .text	00000030 usleep
0000cc0c g     O .rwdata	00000180 alt_fd_list
0000a658 g     F .text	00000090 alt_find_dev
0000aa34 g     F .text	00000138 memcpy
0000a29c g     F .text	00000078 alt_io_redirect
0000b628 g       *ABS*	00000000 __DTOR_END__
0000a8d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000085b0 g     F .text	00000074 i2cStart
000094f8 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000b5e4 g     F .text	00000008 .hidden __udivsi3
0000e42c g     O .bss	00000008 alt_timezone
0000cdb4 g     O .rwdata	00000004 alt_max_fd
0000aeac g     F .text	0000061c .hidden __umoddi3
0000cd94 g     O .rwdata	00000004 _global_impure_ptr
0000e558 g       *ABS*	00000000 __bss_end
0000a0cc g     F .text	000000f0 alt_iic_isr_register
00008ce8 g     F .text	00000104 alt_tick
00008624 g     F .text	00000064 i2cStop
0000a080 g     F .text	0000004c alt_ic_irq_enabled
00008c50 g     F .text	00000098 alt_alarm_stop
0000e450 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d0 alt_irq_handler
0000cbe4 g     O .rwdata	00000028 alt_dev_null
00009cdc g     F .text	0000001c alt_dcache_flush_all
0000cdc0 g       *ABS*	00000000 __ram_rwdata_end
0000cdac g     O .rwdata	00000008 alt_dev_list
0000b760 g       *ABS*	00000000 __ram_rodata_end
0000b5ec g     F .text	00000008 .hidden __umodsi3
0000e558 g       *ABS*	00000000 end
00009034 g     F .text	000000c4 altera_avalon_jtag_uart_init
000081cc g     F .exceptions	00000060 alt_instruction_exception_entry
0000b628 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009704 g     F .text	00000218 altera_avalon_jtag_uart_write
0000ad18 g     F .text	00000194 __call_exitprocs
0000822c g     F .text	0000003c _start
0000e448 g     O .bss	00000004 _alt_tick_rate
000086a0 g     F .text	00000064 rand
0000e44c g     O .bss	00000004 _alt_nticks
00008e88 g     F .text	00000048 alt_sys_init
0000ac04 g     F .text	00000114 __register_exitproc
000082a0 g     F .text	00000150 codecInit
000093a4 g     F .text	00000068 altera_avalon_jtag_uart_close
000088b8 g     F .text	00000028 .hidden __mulsi3
0000b760 g       *ABS*	00000000 __ram_rwdata_start
0000b628 g       *ABS*	00000000 __ram_rodata_start
00008ed0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a7fc g     F .text	000000d4 alt_get_fd
00009a5c g     F .text	00000158 alt_busy_sleep
0000a9b8 g     F .text	0000007c memcmp
00008f90 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000e558 g       *ABS*	00000000 __alt_stack_base
00008fe0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000cd8c g     O .rwdata	00000004 i2cDataBit_ptr
0000a6e8 g     F .text	00000114 alt_find_file
00009d74 g     F .text	000000a4 alt_dev_llist_insert
000088e0 g     F .text	00000214 gettimeofday
0000e420 g       *ABS*	00000000 __bss_start
00008268 g     F .text	00000038 main
0000e444 g     O .bss	00000004 alt_envp
00008f30 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00008688 g     F .text	00000018 srand
00008704 g     F .text	00000050 time
0000cdb8 g     O .rwdata	00000004 alt_errno
0000b534 g     F .text	00000054 .hidden __divsi3
0000b628 g       *ABS*	00000000 __CTOR_END__
0000b628 g       *ABS*	00000000 __flash_rodata_start
0000b628 g       *ABS*	00000000 __DTOR_LIST__
00008e54 g     F .text	00000034 alt_irq_init
0000a5b8 g     F .text	00000080 alt_release_fd
0000b660 g     O .rodata	00000100 .hidden __clz_tab
0000a96c g     F .text	00000014 atexit
0000cd98 g     O .rwdata	00000004 _impure_ptr
0000e43c g     O .bss	00000004 alt_argc
00009e74 g     F .text	0000005c _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000e420 g     O .bss	00000004 busBridgePtr
0000cda4 g     O .rwdata	00000008 alt_fs_list
0000e434 g     O .bss	00000008 alt_resettime
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009eec g     F .text	00000050 alt_ic_isr_register
0000cd90 g     O .rwdata	00000004 i2cClockBit_ptr
0000cdc0 g       *ABS*	00000000 _edata
0000e558 g       *ABS*	00000000 _end
0000822c g       *ABS*	00000000 __ram_exceptions_end
0000940c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00009fdc g     F .text	000000a4 alt_ic_irq_disable
0000a980 g     F .text	00000038 exit
0000b588 g     F .text	0000005c .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000b5f4 g     F .text	00000034 _exit
0000991c g     F .text	00000140 alt_alarm_start
000087ac g     F .text	0000010c .hidden __muldi3
0000849c g     F .text	00000114 i2cWriteByte
0000ab6c g     F .text	00000098 strlen
0000a458 g     F .text	00000160 open
00009ed0 g     F .text	0000001c alt_icache_flush_all
0000cdbc g     O .rwdata	00000004 alt_priority_mask
00009f3c g     F .text	000000a0 alt_ic_irq_enable
0000e424 g     O .bss	00000004 dataToWrite
0000cd9c g     O .rwdata	00000008 alt_alarm_list
00009e18 g     F .text	0000005c _do_ctors
00009c04 g     F .text	000000d8 close
00008b58 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608b14 	ori	at,at,33324
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081cc0 	call	81cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10b91604 	addi	r2,r2,-7080
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10b91604 	addi	r2,r2,-7080
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	21000104 	addi	r4,r4,4
    8168:	1105883a 	add	r2,r2,r4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff33a0>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff3394>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	e037883a 	mov	sp,fp
    81bc:	dfc00117 	ldw	ra,4(sp)
    81c0:	df000017 	ldw	fp,0(sp)
    81c4:	dec00204 	addi	sp,sp,8
    81c8:	f800283a 	ret

000081cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81cc:	defffb04 	addi	sp,sp,-20
    81d0:	dfc00415 	stw	ra,16(sp)
    81d4:	df000315 	stw	fp,12(sp)
    81d8:	df000304 	addi	fp,sp,12
    81dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e0:	00bfffc4 	movi	r2,-1
    81e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81ec:	d0a5b217 	ldw	r2,-26936(gp)
    81f0:	10000726 	beq	r2,zero,8210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f4:	d0a5b217 	ldw	r2,-26936(gp)
    81f8:	e0fffd17 	ldw	r3,-12(fp)
    81fc:	1809883a 	mov	r4,r3
    8200:	e17fff17 	ldw	r5,-4(fp)
    8204:	e1bffe17 	ldw	r6,-8(fp)
    8208:	103ee83a 	callr	r2
    820c:	00000206 	br	8218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8214:	0005883a 	mov	r2,zero
}
    8218:	e037883a 	mov	sp,fp
    821c:	dfc00117 	ldw	ra,4(sp)
    8220:	df000017 	ldw	fp,0(sp)
    8224:	dec00204 	addi	sp,sp,8
    8228:	f800283a 	ret

Disassembly of section .text:

0000822c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    822c:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8238:	d6936314 	ori	gp,gp,19852
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    823c:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8240:	10b90814 	ori	r2,r2,58400

    movhi r3, %hi(__bss_end)
    8244:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8248:	18f95614 	ori	r3,r3,58712

    beq r2, r3, 1f
    824c:	10c00326 	beq	r2,r3,825c <_start+0x30>

0:
    stw zero, (r2)
    8250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8258:	10fffd36 	bltu	r2,r3,8250 <_gp+0xffff34c4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    825c:	0008b580 	call	8b58 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8260:	0008bd80 	call	8bd8 <alt_main>

00008264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8264:	003fff06 	br	8264 <_gp+0xffff34d8>

00008268 <main>:
// +++++++++++++++++++++++++++ Misc. Defines +++++++++++++++++++++++++++++++++++++
#define CODEC_I2C_ADDR  0x34
#define FALSE 0
#define TRUE 1

int main(void) {
    8268:	defffc04 	addi	sp,sp,-16
    826c:	dfc00315 	stw	ra,12(sp)
    8270:	df000215 	stw	fp,8(sp)
    8274:	df000204 	addi	fp,sp,8
  alt_u32 i = 1; //test to make sure that first pass writes to 0x0 -> +1
    8278:	00800044 	movi	r2,1
    827c:	e0bffe15 	stw	r2,-8(fp)
  alt_u32 randNum;
  volatile bool final_result;
  srand( (unsigned)time(NULL) ); //seed randomizer with epoch
    8280:	0009883a 	mov	r4,zero
    8284:	00087040 	call	8704 <time>
    8288:	1009883a 	mov	r4,r2
    828c:	00086880 	call	8688 <srand>
  final_result = FALSE;
    8290:	e03fff05 	stb	zero,-4(fp)
  final_result = codecInit();
    8294:	00082a00 	call	82a0 <codecInit>
    8298:	e0bfff05 	stb	r2,-4(fp)
	  *(busBridgePtr + i) = dataToWrite;
	  i += 1;
  }*/
  while(1){
	  //
  }
    829c:	003fff06 	br	829c <_gp+0xffff3510>

000082a0 <codecInit>:
  return 0;
}

// ++++++++++++++++++++++++++++++++ CodecInit +++++++++++++++++++++++++++++++++++
bool codecInit(void){
    82a0:	defffd04 	addi	sp,sp,-12
    82a4:	dfc00215 	stw	ra,8(sp)
    82a8:	df000115 	stw	fp,4(sp)
    82ac:	df000104 	addi	fp,sp,4
  bool success = TRUE;
    82b0:	00800044 	movi	r2,1
    82b4:	e0bfff05 	stb	r2,-4(fp)
  if (success)
    82b8:	e0bfff03 	ldbu	r2,-4(fp)
    82bc:	10000426 	beq	r2,zero,82d0 <codecInit+0x30>
    success = audioRegWrite(15, 0x0000);  // reset
    82c0:	010003c4 	movi	r4,15
    82c4:	000b883a 	mov	r5,zero
    82c8:	00083f00 	call	83f0 <audioRegWrite>
    82cc:	e0bfff05 	stb	r2,-4(fp)
  if (success)
    82d0:	e0bfff03 	ldbu	r2,-4(fp)
    82d4:	10000426 	beq	r2,zero,82e8 <codecInit+0x48>
    success = audioRegWrite(9, 0x0000);  // inactive interface
    82d8:	01000244 	movi	r4,9
    82dc:	000b883a 	mov	r5,zero
    82e0:	00083f00 	call	83f0 <audioRegWrite>
    82e4:	e0bfff05 	stb	r2,-4(fp)
  //usleep(20*1000);
  if (success)
    82e8:	e0bfff03 	ldbu	r2,-4(fp)
    82ec:	10000426 	beq	r2,zero,8300 <codecInit+0x60>
    success = audioRegWrite(0, 0x0017);  // Left Line In: set left line in volume
    82f0:	0009883a 	mov	r4,zero
    82f4:	014005c4 	movi	r5,23
    82f8:	00083f00 	call	83f0 <audioRegWrite>
    82fc:	e0bfff05 	stb	r2,-4(fp)
  if (success)
    8300:	e0bfff03 	ldbu	r2,-4(fp)
    8304:	10000426 	beq	r2,zero,8318 <codecInit+0x78>
    success = audioRegWrite(1, 0x0017);  // Right Line In: set right line in volume
    8308:	01000044 	movi	r4,1
    830c:	014005c4 	movi	r5,23
    8310:	00083f00 	call	83f0 <audioRegWrite>
    8314:	e0bfff05 	stb	r2,-4(fp)
  if (success)
    8318:	e0bfff03 	ldbu	r2,-4(fp)
    831c:	10000426 	beq	r2,zero,8330 <codecInit+0x90>
    success = audioRegWrite(2, 0x005B);  // Left Headphone Out: set left line out volume
    8320:	01000084 	movi	r4,2
    8324:	014016c4 	movi	r5,91
    8328:	00083f00 	call	83f0 <audioRegWrite>
    832c:	e0bfff05 	stb	r2,-4(fp)
  if (success)
    8330:	e0bfff03 	ldbu	r2,-4(fp)
    8334:	10000426 	beq	r2,zero,8348 <codecInit+0xa8>
    success = audioRegWrite(3, 0x005B);  // Right Headphone Out: set right line out volume
    8338:	010000c4 	movi	r4,3
    833c:	014016c4 	movi	r5,91
    8340:	00083f00 	call	83f0 <audioRegWrite>
    8344:	e0bfff05 	stb	r2,-4(fp)
  if (success)
    8348:	e0bfff03 	ldbu	r2,-4(fp)
    834c:	10000426 	beq	r2,zero,8360 <codecInit+0xc0>
    success = audioRegWrite(4, 0x0015);  // Analogue Audio Path Control: set mic as input and boost it, and enable dac
    8350:	01000104 	movi	r4,4
    8354:	01400544 	movi	r5,21
    8358:	00083f00 	call	83f0 <audioRegWrite>
    835c:	e0bfff05 	stb	r2,-4(fp)
  if (success)
    8360:	e0bfff03 	ldbu	r2,-4(fp)
    8364:	10000426 	beq	r2,zero,8378 <codecInit+0xd8>
    success = audioRegWrite(5, 0x0000);  // Digital Audio Path Control: disable soft mute
    8368:	01000144 	movi	r4,5
    836c:	000b883a 	mov	r5,zero
    8370:	00083f00 	call	83f0 <audioRegWrite>
    8374:	e0bfff05 	stb	r2,-4(fp)
  if (success)
    8378:	e0bfff03 	ldbu	r2,-4(fp)
    837c:	10000426 	beq	r2,zero,8390 <codecInit+0xf0>
    success = audioRegWrite(6, 0);  // power down control: power on all
    8380:	01000184 	movi	r4,6
    8384:	000b883a 	mov	r5,zero
    8388:	00083f00 	call	83f0 <audioRegWrite>
    838c:	e0bfff05 	stb	r2,-4(fp)
  if (success)
    8390:	e0bfff03 	ldbu	r2,-4(fp)
    8394:	10000426 	beq	r2,zero,83a8 <codecInit+0x108>
    success = audioRegWrite(7, 0x0042);  // I2S, iwl=16-bits, Enable Master Mode
    8398:	010001c4 	movi	r4,7
    839c:	01401084 	movi	r5,66
    83a0:	00083f00 	call	83f0 <audioRegWrite>
    83a4:	e0bfff05 	stb	r2,-4(fp)
  // success = audioRegWrite(7, 0x0041);  // MSB-First, left justified, iwl=16-bits, Enable Master Mode
  if (success)
    83a8:	e0bfff03 	ldbu	r2,-4(fp)
    83ac:	10000426 	beq	r2,zero,83c0 <codecInit+0x120>
    success = audioRegWrite(8, 0x0020);  // Normal, Base OVer-Sampleing Rate 384 fs (BOSR=1)
    83b0:	01000204 	movi	r4,8
    83b4:	01400804 	movi	r5,32
    83b8:	00083f00 	call	83f0 <audioRegWrite>
    83bc:	e0bfff05 	stb	r2,-4(fp)
  if (success)
    83c0:	e0bfff03 	ldbu	r2,-4(fp)
    83c4:	10000426 	beq	r2,zero,83d8 <codecInit+0x138>
    success = audioRegWrite(9, 0x0001);  // active interface
    83c8:	01000244 	movi	r4,9
    83cc:	01400044 	movi	r5,1
    83d0:	00083f00 	call	83f0 <audioRegWrite>
    83d4:	e0bfff05 	stb	r2,-4(fp)

  return success;
    83d8:	e0bfff03 	ldbu	r2,-4(fp)
}
    83dc:	e037883a 	mov	sp,fp
    83e0:	dfc00117 	ldw	ra,4(sp)
    83e4:	df000017 	ldw	fp,0(sp)
    83e8:	dec00204 	addi	sp,sp,8
    83ec:	f800283a 	ret

000083f0 <audioRegWrite>:

// +++++++++++++++++++++++++++++ audioRegWrite ++++++++++++++++++++++++++++++++++
// ++ This function writes the given 9 bit data to the specified register in the
// ++ Codec
bool audioRegWrite(alt_u8 codecRegAddr, alt_u16 data16) {
    83f0:	defffb04 	addi	sp,sp,-20
    83f4:	dfc00415 	stw	ra,16(sp)
    83f8:	df000315 	stw	fp,12(sp)
    83fc:	df000304 	addi	fp,sp,12
    8400:	2007883a 	mov	r3,r4
    8404:	2805883a 	mov	r2,r5
    8408:	e0fffe05 	stb	r3,-8(fp)
    840c:	e0bfff0d 	sth	r2,-4(fp)
  bool success;
  alt_u8 dataByte, controlByte;
  dataByte = data16 & 0xFF;
    8410:	e0bfff0b 	ldhu	r2,-4(fp)
    8414:	e0bffd05 	stb	r2,-12(fp)
  controlByte = (codecRegAddr << 1) & 0xFE;
    8418:	e0bffe03 	ldbu	r2,-8(fp)
    841c:	1085883a 	add	r2,r2,r2
    8420:	e0bffd45 	stb	r2,-11(fp)
  controlByte |= ((data16 >> 8) & 0x01);
    8424:	e0bfff0b 	ldhu	r2,-4(fp)
    8428:	1004d23a 	srli	r2,r2,8
    842c:	1080004c 	andi	r2,r2,1
    8430:	1007883a 	mov	r3,r2
    8434:	e0bffd43 	ldbu	r2,-11(fp)
    8438:	1884b03a 	or	r2,r3,r2
    843c:	e0bffd45 	stb	r2,-11(fp)
  i2cStart();
    8440:	00085b00 	call	85b0 <i2cStart>
  success = i2cWriteByte(CODEC_I2C_ADDR);
    8444:	01000d04 	movi	r4,52
    8448:	000849c0 	call	849c <i2cWriteByte>
    844c:	e0bffd85 	stb	r2,-10(fp)
  success = i2cWriteByte(controlByte);
    8450:	e0bffd43 	ldbu	r2,-11(fp)
    8454:	1009883a 	mov	r4,r2
    8458:	000849c0 	call	849c <i2cWriteByte>
    845c:	e0bffd85 	stb	r2,-10(fp)
  success = i2cWriteByte(dataByte);
    8460:	e0bffd03 	ldbu	r2,-12(fp)
    8464:	1009883a 	mov	r4,r2
    8468:	000849c0 	call	849c <i2cWriteByte>
    846c:	e0bffd85 	stb	r2,-10(fp)
  i2cStop();
    8470:	00086240 	call	8624 <i2cStop>
    
  usleep(7*1000);
    8474:	0106d604 	movi	r4,7000
    8478:	0008dec0 	call	8dec <usleep>
  usleep(50*1000);
    847c:	0130d414 	movui	r4,50000
    8480:	0008dec0 	call	8dec <usleep>
  return success;
    8484:	e0bffd83 	ldbu	r2,-10(fp)
}
    8488:	e037883a 	mov	sp,fp
    848c:	dfc00117 	ldw	ra,4(sp)
    8490:	df000017 	ldw	fp,0(sp)
    8494:	dec00204 	addi	sp,sp,8
    8498:	f800283a 	ret

0000849c <i2cWriteByte>:

// +++++++++++++++++++++++++++++ i2cWriteByte ++++++++++++++++++++++++++++++++++
bool i2cWriteByte(alt_u8 Data) { // return true if device response ack
    849c:	defffa04 	addi	sp,sp,-24
    84a0:	dfc00515 	stw	ra,20(sp)
    84a4:	df000415 	stw	fp,16(sp)
    84a8:	df000404 	addi	fp,sp,16
    84ac:	2005883a 	mov	r2,r4
    84b0:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 Mask = 0x80;
    84b4:	00bfe004 	movi	r2,-128
    84b8:	e0bffc05 	stb	r2,-16(fp)
  bool success;
  int i;
    
  i2cDataBitDirection = 1;
    84bc:	d0a00017 	ldw	r2,-32768(gp)
    84c0:	10800104 	addi	r2,r2,4
    84c4:	00c00044 	movi	r3,1
    84c8:	10c00015 	stw	r3,0(r2)
  for(i=0; i<8; i++) {
    84cc:	e03ffd15 	stw	zero,-12(fp)
    84d0:	00001c06 	br	8544 <i2cWriteByte+0xa8>
    i2cClockBit = 0;
    84d4:	d0a00117 	ldw	r2,-32764(gp)
    84d8:	10000015 	stw	zero,0(r2)
    if (Data & Mask) {
    84dc:	e0ffff03 	ldbu	r3,-4(fp)
    84e0:	e0bffc03 	ldbu	r2,-16(fp)
    84e4:	1884703a 	and	r2,r3,r2
    84e8:	10803fcc 	andi	r2,r2,255
    84ec:	10000426 	beq	r2,zero,8500 <i2cWriteByte+0x64>
      i2cDataBit = 1;
    84f0:	d0a00017 	ldw	r2,-32768(gp)
    84f4:	00c00044 	movi	r3,1
    84f8:	10c00015 	stw	r3,0(r2)
    84fc:	00000206 	br	8508 <i2cWriteByte+0x6c>
    } else {
      i2cDataBit = 0;
    8500:	d0a00017 	ldw	r2,-32768(gp)
    8504:	10000015 	stw	zero,0(r2)
    }
    Mask >>= 1;
    8508:	e0bffc03 	ldbu	r2,-16(fp)
    850c:	1004d07a 	srli	r2,r2,1
    8510:	e0bffc05 	stb	r2,-16(fp)
    SCL_DELAY;
    8514:	01000044 	movi	r4,1
    8518:	0008dec0 	call	8dec <usleep>
    i2cClockBit = 1;
    851c:	d0a00117 	ldw	r2,-32764(gp)
    8520:	00c00044 	movi	r3,1
    8524:	10c00015 	stw	r3,0(r2)
    SCL_DELAY;
    8528:	01000044 	movi	r4,1
    852c:	0008dec0 	call	8dec <usleep>
    i2cClockBit = 0;
    8530:	d0a00117 	ldw	r2,-32764(gp)
    8534:	10000015 	stw	zero,0(r2)
  alt_u8 Mask = 0x80;
  bool success;
  int i;
    
  i2cDataBitDirection = 1;
  for(i=0; i<8; i++) {
    8538:	e0bffd17 	ldw	r2,-12(fp)
    853c:	10800044 	addi	r2,r2,1
    8540:	e0bffd15 	stw	r2,-12(fp)
    8544:	e0bffd17 	ldw	r2,-12(fp)
    8548:	10800210 	cmplti	r2,r2,8
    854c:	103fe11e 	bne	r2,zero,84d4 <_gp+0xffff3748>
    SCL_DELAY;
    i2cClockBit = 0;
    }
    
    // get ack
    i2cDataBitDirection = 0;
    8550:	d0a00017 	ldw	r2,-32768(gp)
    8554:	10800104 	addi	r2,r2,4
    8558:	10000015 	stw	zero,0(r2)
    SCL_DELAY;
    855c:	01000044 	movi	r4,1
    8560:	0008dec0 	call	8dec <usleep>
    i2cClockBit = 1;
    8564:	d0a00117 	ldw	r2,-32764(gp)
    8568:	00c00044 	movi	r3,1
    856c:	10c00015 	stw	r3,0(r2)
    SCL_DELAY;
    8570:	01000044 	movi	r4,1
    8574:	0008dec0 	call	8dec <usleep>
    success = ((i2cDataBit && 1) == 0) ? TRUE : FALSE;
    8578:	d0a00017 	ldw	r2,-32768(gp)
    857c:	10800017 	ldw	r2,0(r2)
    8580:	1005003a 	cmpeq	r2,r2,zero
    8584:	e0bffe05 	stb	r2,-8(fp)
    i2cClockBit = 0; // clock low         
    8588:	d0a00117 	ldw	r2,-32764(gp)
    858c:	10000015 	stw	zero,0(r2)
    SCL_DELAY; // clock low delay
    8590:	01000044 	movi	r4,1
    8594:	0008dec0 	call	8dec <usleep>
    return success;
    8598:	e0bffe03 	ldbu	r2,-8(fp)
}    
    859c:	e037883a 	mov	sp,fp
    85a0:	dfc00117 	ldw	ra,4(sp)
    85a4:	df000017 	ldw	fp,0(sp)
    85a8:	dec00204 	addi	sp,sp,8
    85ac:	f800283a 	ret

000085b0 <i2cStart>:

// ++++++++++++++++++++++++++++++++ i2cStart +++++++++++++++++++++++++++++++++++
void i2cStart(void) {
    85b0:	defffe04 	addi	sp,sp,-8
    85b4:	dfc00115 	stw	ra,4(sp)
    85b8:	df000015 	stw	fp,0(sp)
    85bc:	d839883a 	mov	fp,sp
  i2cDataBitDirection = 1;
    85c0:	d0a00017 	ldw	r2,-32768(gp)
    85c4:	10800104 	addi	r2,r2,4
    85c8:	00c00044 	movi	r3,1
    85cc:	10c00015 	stw	r3,0(r2)
  i2cDataBit = 1;
    85d0:	d0a00017 	ldw	r2,-32768(gp)
    85d4:	00c00044 	movi	r3,1
    85d8:	10c00015 	stw	r3,0(r2)
  i2cClockBit = 1;
    85dc:	d0a00117 	ldw	r2,-32764(gp)
    85e0:	00c00044 	movi	r3,1
    85e4:	10c00015 	stw	r3,0(r2)
  SCL_DELAY;
    85e8:	01000044 	movi	r4,1
    85ec:	0008dec0 	call	8dec <usleep>
  i2cDataBit = 0;
    85f0:	d0a00017 	ldw	r2,-32768(gp)
    85f4:	10000015 	stw	zero,0(r2)
  SCL_DELAY;
    85f8:	01000044 	movi	r4,1
    85fc:	0008dec0 	call	8dec <usleep>
  i2cClockBit = 0;
    8600:	d0a00117 	ldw	r2,-32764(gp)
    8604:	10000015 	stw	zero,0(r2)
  SCL_DELAY;
    8608:	01000044 	movi	r4,1
    860c:	0008dec0 	call	8dec <usleep>
}
    8610:	e037883a 	mov	sp,fp
    8614:	dfc00117 	ldw	ra,4(sp)
    8618:	df000017 	ldw	fp,0(sp)
    861c:	dec00204 	addi	sp,sp,8
    8620:	f800283a 	ret

00008624 <i2cStop>:

// ++++++++++++++++++++++++++++++++ i2cStop +++++++++++++++++++++++++++++++++++
void i2cStop(void) {
    8624:	defffe04 	addi	sp,sp,-8
    8628:	dfc00115 	stw	ra,4(sp)
    862c:	df000015 	stw	fp,0(sp)
    8630:	d839883a 	mov	fp,sp
  i2cDataBitDirection = 1;
    8634:	d0a00017 	ldw	r2,-32768(gp)
    8638:	10800104 	addi	r2,r2,4
    863c:	00c00044 	movi	r3,1
    8640:	10c00015 	stw	r3,0(r2)
  i2cDataBit = 0;
    8644:	d0a00017 	ldw	r2,-32768(gp)
    8648:	10000015 	stw	zero,0(r2)
  i2cClockBit = 1;
    864c:	d0a00117 	ldw	r2,-32764(gp)
    8650:	00c00044 	movi	r3,1
    8654:	10c00015 	stw	r3,0(r2)
  SCL_DELAY;
    8658:	01000044 	movi	r4,1
    865c:	0008dec0 	call	8dec <usleep>
  i2cDataBit = 1;
    8660:	d0a00017 	ldw	r2,-32768(gp)
    8664:	00c00044 	movi	r3,1
    8668:	10c00015 	stw	r3,0(r2)
  SCL_DELAY;
    866c:	01000044 	movi	r4,1
    8670:	0008dec0 	call	8dec <usleep>
}
    8674:	e037883a 	mov	sp,fp
    8678:	dfc00117 	ldw	ra,4(sp)
    867c:	df000017 	ldw	fp,0(sp)
    8680:	dec00204 	addi	sp,sp,8
    8684:	f800283a 	ret

00008688 <srand>:
    8688:	00800074 	movhi	r2,1
    868c:	10b36604 	addi	r2,r2,-12904
    8690:	10800017 	ldw	r2,0(r2)
    8694:	11002915 	stw	r4,164(r2)
    8698:	10002a15 	stw	zero,168(r2)
    869c:	f800283a 	ret

000086a0 <rand>:
    86a0:	00800074 	movhi	r2,1
    86a4:	defffe04 	addi	sp,sp,-8
    86a8:	10b36604 	addi	r2,r2,-12904
    86ac:	dc000015 	stw	r16,0(sp)
    86b0:	14000017 	ldw	r16,0(r2)
    86b4:	dfc00115 	stw	ra,4(sp)
    86b8:	01932574 	movhi	r6,19605
    86bc:	81002917 	ldw	r4,164(r16)
    86c0:	81402a17 	ldw	r5,168(r16)
    86c4:	01d614b4 	movhi	r7,22610
    86c8:	319fcb44 	addi	r6,r6,32557
    86cc:	39fd0b44 	addi	r7,r7,-3027
    86d0:	00087ac0 	call	87ac <__muldi3>
    86d4:	11000044 	addi	r4,r2,1
    86d8:	2085803a 	cmpltu	r2,r4,r2
    86dc:	10c7883a 	add	r3,r2,r3
    86e0:	00a00034 	movhi	r2,32768
    86e4:	10bfffc4 	addi	r2,r2,-1
    86e8:	1884703a 	and	r2,r3,r2
    86ec:	81002915 	stw	r4,164(r16)
    86f0:	80c02a15 	stw	r3,168(r16)
    86f4:	dfc00117 	ldw	ra,4(sp)
    86f8:	dc000017 	ldw	r16,0(sp)
    86fc:	dec00204 	addi	sp,sp,8
    8700:	f800283a 	ret

00008704 <time>:
    8704:	00800074 	movhi	r2,1
    8708:	defffc04 	addi	sp,sp,-16
    870c:	10b36604 	addi	r2,r2,-12904
    8710:	dc000215 	stw	r16,8(sp)
    8714:	2021883a 	mov	r16,r4
    8718:	11000017 	ldw	r4,0(r2)
    871c:	d80b883a 	mov	r5,sp
    8720:	000d883a 	mov	r6,zero
    8724:	dfc00315 	stw	ra,12(sp)
    8728:	00087540 	call	8754 <_gettimeofday_r>
    872c:	10000716 	blt	r2,zero,874c <time+0x48>
    8730:	d8800017 	ldw	r2,0(sp)
    8734:	80000126 	beq	r16,zero,873c <time+0x38>
    8738:	80800015 	stw	r2,0(r16)
    873c:	dfc00317 	ldw	ra,12(sp)
    8740:	dc000217 	ldw	r16,8(sp)
    8744:	dec00404 	addi	sp,sp,16
    8748:	f800283a 	ret
    874c:	00bfffc4 	movi	r2,-1
    8750:	003ffa06 	br	873c <_gp+0xffff39b0>

00008754 <_gettimeofday_r>:
    8754:	defffd04 	addi	sp,sp,-12
    8758:	dc000015 	stw	r16,0(sp)
    875c:	04000074 	movhi	r16,1
    8760:	dc400115 	stw	r17,4(sp)
    8764:	84390a04 	addi	r16,r16,-7128
    8768:	2023883a 	mov	r17,r4
    876c:	2809883a 	mov	r4,r5
    8770:	300b883a 	mov	r5,r6
    8774:	dfc00215 	stw	ra,8(sp)
    8778:	80000015 	stw	zero,0(r16)
    877c:	00088e00 	call	88e0 <gettimeofday>
    8780:	00ffffc4 	movi	r3,-1
    8784:	10c00526 	beq	r2,r3,879c <_gettimeofday_r+0x48>
    8788:	dfc00217 	ldw	ra,8(sp)
    878c:	dc400117 	ldw	r17,4(sp)
    8790:	dc000017 	ldw	r16,0(sp)
    8794:	dec00304 	addi	sp,sp,12
    8798:	f800283a 	ret
    879c:	80c00017 	ldw	r3,0(r16)
    87a0:	183ff926 	beq	r3,zero,8788 <_gp+0xffff39fc>
    87a4:	88c00015 	stw	r3,0(r17)
    87a8:	003ff706 	br	8788 <_gp+0xffff39fc>

000087ac <__muldi3>:
    87ac:	defff604 	addi	sp,sp,-40
    87b0:	dd800615 	stw	r22,24(sp)
    87b4:	dd400515 	stw	r21,20(sp)
    87b8:	25bfffcc 	andi	r22,r4,65535
    87bc:	357fffcc 	andi	r21,r6,65535
    87c0:	dc400115 	stw	r17,4(sp)
    87c4:	2022d43a 	srli	r17,r4,16
    87c8:	dcc00315 	stw	r19,12(sp)
    87cc:	dc800215 	stw	r18,8(sp)
    87d0:	2027883a 	mov	r19,r4
    87d4:	2825883a 	mov	r18,r5
    87d8:	a809883a 	mov	r4,r21
    87dc:	b00b883a 	mov	r5,r22
    87e0:	dfc00915 	stw	ra,36(sp)
    87e4:	df000815 	stw	fp,32(sp)
    87e8:	ddc00715 	stw	r23,28(sp)
    87ec:	3839883a 	mov	fp,r7
    87f0:	302ed43a 	srli	r23,r6,16
    87f4:	dd000415 	stw	r20,16(sp)
    87f8:	dc000015 	stw	r16,0(sp)
    87fc:	3029883a 	mov	r20,r6
    8800:	00088b80 	call	88b8 <__mulsi3>
    8804:	a809883a 	mov	r4,r21
    8808:	880b883a 	mov	r5,r17
    880c:	1021883a 	mov	r16,r2
    8810:	00088b80 	call	88b8 <__mulsi3>
    8814:	880b883a 	mov	r5,r17
    8818:	b809883a 	mov	r4,r23
    881c:	102b883a 	mov	r21,r2
    8820:	00088b80 	call	88b8 <__mulsi3>
    8824:	b809883a 	mov	r4,r23
    8828:	b00b883a 	mov	r5,r22
    882c:	1023883a 	mov	r17,r2
    8830:	00088b80 	call	88b8 <__mulsi3>
    8834:	8012d43a 	srli	r9,r16,16
    8838:	a885883a 	add	r2,r21,r2
    883c:	1251883a 	add	r8,r2,r9
    8840:	4540022e 	bgeu	r8,r21,884c <__muldi3+0xa0>
    8844:	00800074 	movhi	r2,1
    8848:	88a3883a 	add	r17,r17,r2
    884c:	4006d43a 	srli	r3,r8,16
    8850:	4010943a 	slli	r8,r8,16
    8854:	9809883a 	mov	r4,r19
    8858:	e00b883a 	mov	r5,fp
    885c:	843fffcc 	andi	r16,r16,65535
    8860:	88e3883a 	add	r17,r17,r3
    8864:	4421883a 	add	r16,r8,r16
    8868:	00088b80 	call	88b8 <__mulsi3>
    886c:	a009883a 	mov	r4,r20
    8870:	900b883a 	mov	r5,r18
    8874:	1027883a 	mov	r19,r2
    8878:	00088b80 	call	88b8 <__mulsi3>
    887c:	9885883a 	add	r2,r19,r2
    8880:	1447883a 	add	r3,r2,r17
    8884:	8005883a 	mov	r2,r16
    8888:	dfc00917 	ldw	ra,36(sp)
    888c:	df000817 	ldw	fp,32(sp)
    8890:	ddc00717 	ldw	r23,28(sp)
    8894:	dd800617 	ldw	r22,24(sp)
    8898:	dd400517 	ldw	r21,20(sp)
    889c:	dd000417 	ldw	r20,16(sp)
    88a0:	dcc00317 	ldw	r19,12(sp)
    88a4:	dc800217 	ldw	r18,8(sp)
    88a8:	dc400117 	ldw	r17,4(sp)
    88ac:	dc000017 	ldw	r16,0(sp)
    88b0:	dec00a04 	addi	sp,sp,40
    88b4:	f800283a 	ret

000088b8 <__mulsi3>:
    88b8:	0005883a 	mov	r2,zero
    88bc:	20000726 	beq	r4,zero,88dc <__mulsi3+0x24>
    88c0:	20c0004c 	andi	r3,r4,1
    88c4:	2008d07a 	srli	r4,r4,1
    88c8:	18000126 	beq	r3,zero,88d0 <__mulsi3+0x18>
    88cc:	1145883a 	add	r2,r2,r5
    88d0:	294b883a 	add	r5,r5,r5
    88d4:	203ffa1e 	bne	r4,zero,88c0 <_gp+0xffff3b34>
    88d8:	f800283a 	ret
    88dc:	f800283a 	ret

000088e0 <gettimeofday>:
    88e0:	defff404 	addi	sp,sp,-48
    88e4:	dfc00b15 	stw	ra,44(sp)
    88e8:	df000a15 	stw	fp,40(sp)
    88ec:	dd000915 	stw	r20,36(sp)
    88f0:	dcc00815 	stw	r19,32(sp)
    88f4:	dc800715 	stw	r18,28(sp)
    88f8:	dc400615 	stw	r17,24(sp)
    88fc:	dc000515 	stw	r16,20(sp)
    8900:	df000a04 	addi	fp,sp,40
    8904:	e13ff915 	stw	r4,-28(fp)
    8908:	e17ffa15 	stw	r5,-24(fp)
    890c:	e0bffa17 	ldw	r2,-24(fp)
    8910:	e0bff615 	stw	r2,-40(fp)
    8914:	00800074 	movhi	r2,1
    8918:	10b91304 	addi	r2,r2,-7092
    891c:	10800017 	ldw	r2,0(r2)
    8920:	e0bff715 	stw	r2,-36(fp)
    8924:	00800074 	movhi	r2,1
    8928:	10b91204 	addi	r2,r2,-7096
    892c:	10800017 	ldw	r2,0(r2)
    8930:	e0bff815 	stw	r2,-32(fp)
    8934:	e0bff817 	ldw	r2,-32(fp)
    8938:	10006326 	beq	r2,zero,8ac8 <gettimeofday+0x1e8>
    893c:	d0a5aa17 	ldw	r2,-26968(gp)
    8940:	1029883a 	mov	r20,r2
    8944:	e13ff717 	ldw	r4,-36(fp)
    8948:	e17ff817 	ldw	r5,-32(fp)
    894c:	000b5e40 	call	b5e4 <__udivsi3>
    8950:	a085883a 	add	r2,r20,r2
    8954:	1007883a 	mov	r3,r2
    8958:	e0bff917 	ldw	r2,-28(fp)
    895c:	10c00015 	stw	r3,0(r2)
    8960:	d0a5ab04 	addi	r2,gp,-26964
    8964:	10800017 	ldw	r2,0(r2)
    8968:	1029883a 	mov	r20,r2
    896c:	e0bff717 	ldw	r2,-36(fp)
    8970:	1025883a 	mov	r18,r2
    8974:	0027883a 	mov	r19,zero
    8978:	010003f4 	movhi	r4,15
    897c:	21109004 	addi	r4,r4,16960
    8980:	e17ff817 	ldw	r5,-32(fp)
    8984:	000b5e40 	call	b5e4 <__udivsi3>
    8988:	1021883a 	mov	r16,r2
    898c:	0023883a 	mov	r17,zero
    8990:	9009883a 	mov	r4,r18
    8994:	980b883a 	mov	r5,r19
    8998:	800d883a 	mov	r6,r16
    899c:	880f883a 	mov	r7,r17
    89a0:	00087ac0 	call	87ac <__muldi3>
    89a4:	100f883a 	mov	r7,r2
    89a8:	1811883a 	mov	r8,r3
    89ac:	380b883a 	mov	r5,r7
    89b0:	400d883a 	mov	r6,r8
    89b4:	008003f4 	movhi	r2,15
    89b8:	10909004 	addi	r2,r2,16960
    89bc:	0007883a 	mov	r3,zero
    89c0:	2809883a 	mov	r4,r5
    89c4:	300b883a 	mov	r5,r6
    89c8:	100d883a 	mov	r6,r2
    89cc:	180f883a 	mov	r7,r3
    89d0:	000aeac0 	call	aeac <__umoddi3>
    89d4:	1009883a 	mov	r4,r2
    89d8:	180b883a 	mov	r5,r3
    89dc:	2005883a 	mov	r2,r4
    89e0:	2807883a 	mov	r3,r5
    89e4:	a085883a 	add	r2,r20,r2
    89e8:	1007883a 	mov	r3,r2
    89ec:	e0bff917 	ldw	r2,-28(fp)
    89f0:	10c00115 	stw	r3,4(r2)
    89f4:	00001406 	br	8a48 <gettimeofday+0x168>
    89f8:	e0bff917 	ldw	r2,-28(fp)
    89fc:	10800017 	ldw	r2,0(r2)
    8a00:	00800516 	blt	zero,r2,8a18 <gettimeofday+0x138>
    8a04:	e0bff917 	ldw	r2,-28(fp)
    8a08:	10000015 	stw	zero,0(r2)
    8a0c:	e0bff917 	ldw	r2,-28(fp)
    8a10:	10000115 	stw	zero,4(r2)
    8a14:	00000f06 	br	8a54 <gettimeofday+0x174>
    8a18:	e0bff917 	ldw	r2,-28(fp)
    8a1c:	10800017 	ldw	r2,0(r2)
    8a20:	10ffffc4 	addi	r3,r2,-1
    8a24:	e0bff917 	ldw	r2,-28(fp)
    8a28:	10c00015 	stw	r3,0(r2)
    8a2c:	e0bff917 	ldw	r2,-28(fp)
    8a30:	10c00117 	ldw	r3,4(r2)
    8a34:	008003f4 	movhi	r2,15
    8a38:	10909004 	addi	r2,r2,16960
    8a3c:	1887883a 	add	r3,r3,r2
    8a40:	e0bff917 	ldw	r2,-28(fp)
    8a44:	10c00115 	stw	r3,4(r2)
    8a48:	e0bff917 	ldw	r2,-28(fp)
    8a4c:	10800117 	ldw	r2,4(r2)
    8a50:	103fe916 	blt	r2,zero,89f8 <_gp+0xffff3c6c>
    8a54:	00000c06 	br	8a88 <gettimeofday+0x1a8>
    8a58:	e0bff917 	ldw	r2,-28(fp)
    8a5c:	10800017 	ldw	r2,0(r2)
    8a60:	10c00044 	addi	r3,r2,1
    8a64:	e0bff917 	ldw	r2,-28(fp)
    8a68:	10c00015 	stw	r3,0(r2)
    8a6c:	e0bff917 	ldw	r2,-28(fp)
    8a70:	10c00117 	ldw	r3,4(r2)
    8a74:	00bffc74 	movhi	r2,65521
    8a78:	10af7004 	addi	r2,r2,-16960
    8a7c:	1887883a 	add	r3,r3,r2
    8a80:	e0bff917 	ldw	r2,-28(fp)
    8a84:	10c00115 	stw	r3,4(r2)
    8a88:	e0bff917 	ldw	r2,-28(fp)
    8a8c:	10c00117 	ldw	r3,4(r2)
    8a90:	008003f4 	movhi	r2,15
    8a94:	10908fc4 	addi	r2,r2,16959
    8a98:	10ffef16 	blt	r2,r3,8a58 <_gp+0xffff3ccc>
    8a9c:	e0bff617 	ldw	r2,-40(fp)
    8aa0:	10000726 	beq	r2,zero,8ac0 <gettimeofday+0x1e0>
    8aa4:	d0e5a817 	ldw	r3,-26976(gp)
    8aa8:	e0bff617 	ldw	r2,-40(fp)
    8aac:	10c00015 	stw	r3,0(r2)
    8ab0:	d0a5a904 	addi	r2,gp,-26972
    8ab4:	10c00017 	ldw	r3,0(r2)
    8ab8:	e0bff617 	ldw	r2,-40(fp)
    8abc:	10c00115 	stw	r3,4(r2)
    8ac0:	0005883a 	mov	r2,zero
    8ac4:	00000106 	br	8acc <gettimeofday+0x1ec>
    8ac8:	00bfde84 	movi	r2,-134
    8acc:	e6fffb04 	addi	sp,fp,-20
    8ad0:	dfc00617 	ldw	ra,24(sp)
    8ad4:	df000517 	ldw	fp,20(sp)
    8ad8:	dd000417 	ldw	r20,16(sp)
    8adc:	dcc00317 	ldw	r19,12(sp)
    8ae0:	dc800217 	ldw	r18,8(sp)
    8ae4:	dc400117 	ldw	r17,4(sp)
    8ae8:	dc000017 	ldw	r16,0(sp)
    8aec:	dec00704 	addi	sp,sp,28
    8af0:	f800283a 	ret

00008af4 <alt_load_section>:
    8af4:	defffc04 	addi	sp,sp,-16
    8af8:	df000315 	stw	fp,12(sp)
    8afc:	df000304 	addi	fp,sp,12
    8b00:	e13ffd15 	stw	r4,-12(fp)
    8b04:	e17ffe15 	stw	r5,-8(fp)
    8b08:	e1bfff15 	stw	r6,-4(fp)
    8b0c:	e0fffe17 	ldw	r3,-8(fp)
    8b10:	e0bffd17 	ldw	r2,-12(fp)
    8b14:	18800c26 	beq	r3,r2,8b48 <alt_load_section+0x54>
    8b18:	00000806 	br	8b3c <alt_load_section+0x48>
    8b1c:	e0bffe17 	ldw	r2,-8(fp)
    8b20:	10c00104 	addi	r3,r2,4
    8b24:	e0fffe15 	stw	r3,-8(fp)
    8b28:	e0fffd17 	ldw	r3,-12(fp)
    8b2c:	19000104 	addi	r4,r3,4
    8b30:	e13ffd15 	stw	r4,-12(fp)
    8b34:	18c00017 	ldw	r3,0(r3)
    8b38:	10c00015 	stw	r3,0(r2)
    8b3c:	e0fffe17 	ldw	r3,-8(fp)
    8b40:	e0bfff17 	ldw	r2,-4(fp)
    8b44:	18bff51e 	bne	r3,r2,8b1c <_gp+0xffff3d90>
    8b48:	e037883a 	mov	sp,fp
    8b4c:	df000017 	ldw	fp,0(sp)
    8b50:	dec00104 	addi	sp,sp,4
    8b54:	f800283a 	ret

00008b58 <alt_load>:
    8b58:	defffe04 	addi	sp,sp,-8
    8b5c:	dfc00115 	stw	ra,4(sp)
    8b60:	df000015 	stw	fp,0(sp)
    8b64:	d839883a 	mov	fp,sp
    8b68:	01000074 	movhi	r4,1
    8b6c:	21337004 	addi	r4,r4,-12864
    8b70:	01400074 	movhi	r5,1
    8b74:	296dd804 	addi	r5,r5,-18592
    8b78:	01800074 	movhi	r6,1
    8b7c:	31b37004 	addi	r6,r6,-12864
    8b80:	0008af40 	call	8af4 <alt_load_section>
    8b84:	01000074 	movhi	r4,1
    8b88:	21200804 	addi	r4,r4,-32736
    8b8c:	01400074 	movhi	r5,1
    8b90:	29600804 	addi	r5,r5,-32736
    8b94:	01800074 	movhi	r6,1
    8b98:	31a08b04 	addi	r6,r6,-32212
    8b9c:	0008af40 	call	8af4 <alt_load_section>
    8ba0:	01000074 	movhi	r4,1
    8ba4:	212d8a04 	addi	r4,r4,-18904
    8ba8:	01400074 	movhi	r5,1
    8bac:	296d8a04 	addi	r5,r5,-18904
    8bb0:	01800074 	movhi	r6,1
    8bb4:	31add804 	addi	r6,r6,-18592
    8bb8:	0008af40 	call	8af4 <alt_load_section>
    8bbc:	0009cdc0 	call	9cdc <alt_dcache_flush_all>
    8bc0:	0009ed00 	call	9ed0 <alt_icache_flush_all>
    8bc4:	e037883a 	mov	sp,fp
    8bc8:	dfc00117 	ldw	ra,4(sp)
    8bcc:	df000017 	ldw	fp,0(sp)
    8bd0:	dec00204 	addi	sp,sp,8
    8bd4:	f800283a 	ret

00008bd8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8bd8:	defffd04 	addi	sp,sp,-12
    8bdc:	dfc00215 	stw	ra,8(sp)
    8be0:	df000115 	stw	fp,4(sp)
    8be4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8be8:	0009883a 	mov	r4,zero
    8bec:	0008e540 	call	8e54 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8bf0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8bf4:	0008e880 	call	8e88 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8bf8:	01000074 	movhi	r4,1
    8bfc:	212d8b04 	addi	r4,r4,-18900
    8c00:	01400074 	movhi	r5,1
    8c04:	296d8b04 	addi	r5,r5,-18900
    8c08:	01800074 	movhi	r6,1
    8c0c:	31ad8b04 	addi	r6,r6,-18900
    8c10:	000a29c0 	call	a29c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8c14:	0009e180 	call	9e18 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8c18:	01000074 	movhi	r4,1
    8c1c:	21279d04 	addi	r4,r4,-24972
    8c20:	000a96c0 	call	a96c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8c24:	d125ac17 	ldw	r4,-26960(gp)
    8c28:	d0e5ad17 	ldw	r3,-26956(gp)
    8c2c:	d0a5ae17 	ldw	r2,-26952(gp)
    8c30:	180b883a 	mov	r5,r3
    8c34:	100d883a 	mov	r6,r2
    8c38:	00082680 	call	8268 <main>
    8c3c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8c40:	01000044 	movi	r4,1
    8c44:	0009c040 	call	9c04 <close>
  exit (result);
    8c48:	e13fff17 	ldw	r4,-4(fp)
    8c4c:	000a9800 	call	a980 <exit>

00008c50 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    8c50:	defffa04 	addi	sp,sp,-24
    8c54:	df000515 	stw	fp,20(sp)
    8c58:	df000504 	addi	fp,sp,20
    8c5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8c60:	0005303a 	rdctl	r2,status
    8c64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8c68:	e0fffc17 	ldw	r3,-16(fp)
    8c6c:	00bfff84 	movi	r2,-2
    8c70:	1884703a 	and	r2,r3,r2
    8c74:	1001703a 	wrctl	status,r2
  
  return context;
    8c78:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    8c7c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    8c80:	e0bfff17 	ldw	r2,-4(fp)
    8c84:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    8c88:	e0bffd17 	ldw	r2,-12(fp)
    8c8c:	10800017 	ldw	r2,0(r2)
    8c90:	e0fffd17 	ldw	r3,-12(fp)
    8c94:	18c00117 	ldw	r3,4(r3)
    8c98:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    8c9c:	e0bffd17 	ldw	r2,-12(fp)
    8ca0:	10800117 	ldw	r2,4(r2)
    8ca4:	e0fffd17 	ldw	r3,-12(fp)
    8ca8:	18c00017 	ldw	r3,0(r3)
    8cac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    8cb0:	e0bffd17 	ldw	r2,-12(fp)
    8cb4:	e0fffd17 	ldw	r3,-12(fp)
    8cb8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    8cbc:	e0bffd17 	ldw	r2,-12(fp)
    8cc0:	e0fffd17 	ldw	r3,-12(fp)
    8cc4:	10c00015 	stw	r3,0(r2)
    8cc8:	e0bffb17 	ldw	r2,-20(fp)
    8ccc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8cd0:	e0bffe17 	ldw	r2,-8(fp)
    8cd4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    8cd8:	e037883a 	mov	sp,fp
    8cdc:	df000017 	ldw	fp,0(sp)
    8ce0:	dec00104 	addi	sp,sp,4
    8ce4:	f800283a 	ret

00008ce8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    8ce8:	defffb04 	addi	sp,sp,-20
    8cec:	dfc00415 	stw	ra,16(sp)
    8cf0:	df000315 	stw	fp,12(sp)
    8cf4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    8cf8:	d0a00417 	ldw	r2,-32752(gp)
    8cfc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    8d00:	d0a5b017 	ldw	r2,-26944(gp)
    8d04:	10800044 	addi	r2,r2,1
    8d08:	d0a5b015 	stw	r2,-26944(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    8d0c:	00002e06 	br	8dc8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    8d10:	e0bffd17 	ldw	r2,-12(fp)
    8d14:	10800017 	ldw	r2,0(r2)
    8d18:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    8d1c:	e0bffd17 	ldw	r2,-12(fp)
    8d20:	10800403 	ldbu	r2,16(r2)
    8d24:	10803fcc 	andi	r2,r2,255
    8d28:	10000426 	beq	r2,zero,8d3c <alt_tick+0x54>
    8d2c:	d0a5b017 	ldw	r2,-26944(gp)
    8d30:	1000021e 	bne	r2,zero,8d3c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    8d34:	e0bffd17 	ldw	r2,-12(fp)
    8d38:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    8d3c:	e0bffd17 	ldw	r2,-12(fp)
    8d40:	10800217 	ldw	r2,8(r2)
    8d44:	d0e5b017 	ldw	r3,-26944(gp)
    8d48:	18801d36 	bltu	r3,r2,8dc0 <alt_tick+0xd8>
    8d4c:	e0bffd17 	ldw	r2,-12(fp)
    8d50:	10800403 	ldbu	r2,16(r2)
    8d54:	10803fcc 	andi	r2,r2,255
    8d58:	1000191e 	bne	r2,zero,8dc0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    8d5c:	e0bffd17 	ldw	r2,-12(fp)
    8d60:	10800317 	ldw	r2,12(r2)
    8d64:	e0fffd17 	ldw	r3,-12(fp)
    8d68:	18c00517 	ldw	r3,20(r3)
    8d6c:	1809883a 	mov	r4,r3
    8d70:	103ee83a 	callr	r2
    8d74:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    8d78:	e0bfff17 	ldw	r2,-4(fp)
    8d7c:	1000031e 	bne	r2,zero,8d8c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    8d80:	e13ffd17 	ldw	r4,-12(fp)
    8d84:	0008c500 	call	8c50 <alt_alarm_stop>
    8d88:	00000d06 	br	8dc0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    8d8c:	e0bffd17 	ldw	r2,-12(fp)
    8d90:	10c00217 	ldw	r3,8(r2)
    8d94:	e0bfff17 	ldw	r2,-4(fp)
    8d98:	1887883a 	add	r3,r3,r2
    8d9c:	e0bffd17 	ldw	r2,-12(fp)
    8da0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    8da4:	e0bffd17 	ldw	r2,-12(fp)
    8da8:	10c00217 	ldw	r3,8(r2)
    8dac:	d0a5b017 	ldw	r2,-26944(gp)
    8db0:	1880032e 	bgeu	r3,r2,8dc0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    8db4:	e0bffd17 	ldw	r2,-12(fp)
    8db8:	00c00044 	movi	r3,1
    8dbc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    8dc0:	e0bffe17 	ldw	r2,-8(fp)
    8dc4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    8dc8:	e0fffd17 	ldw	r3,-12(fp)
    8dcc:	d0a00404 	addi	r2,gp,-32752
    8dd0:	18bfcf1e 	bne	r3,r2,8d10 <_gp+0xffff3f84>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    8dd4:	0001883a 	nop
}
    8dd8:	e037883a 	mov	sp,fp
    8ddc:	dfc00117 	ldw	ra,4(sp)
    8de0:	df000017 	ldw	fp,0(sp)
    8de4:	dec00204 	addi	sp,sp,8
    8de8:	f800283a 	ret

00008dec <usleep>:
    8dec:	defffd04 	addi	sp,sp,-12
    8df0:	dfc00215 	stw	ra,8(sp)
    8df4:	df000115 	stw	fp,4(sp)
    8df8:	df000104 	addi	fp,sp,4
    8dfc:	e13fff15 	stw	r4,-4(fp)
    8e00:	e13fff17 	ldw	r4,-4(fp)
    8e04:	0009a5c0 	call	9a5c <alt_busy_sleep>
    8e08:	e037883a 	mov	sp,fp
    8e0c:	dfc00117 	ldw	ra,4(sp)
    8e10:	df000017 	ldw	fp,0(sp)
    8e14:	dec00204 	addi	sp,sp,8
    8e18:	f800283a 	ret

00008e1c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8e1c:	defffd04 	addi	sp,sp,-12
    8e20:	dfc00215 	stw	ra,8(sp)
    8e24:	df000115 	stw	fp,4(sp)
    8e28:	df000104 	addi	fp,sp,4
    8e2c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8e30:	e13fff17 	ldw	r4,-4(fp)
    8e34:	01400074 	movhi	r5,1
    8e38:	29736b04 	addi	r5,r5,-12884
    8e3c:	0009d740 	call	9d74 <alt_dev_llist_insert>
}
    8e40:	e037883a 	mov	sp,fp
    8e44:	dfc00117 	ldw	ra,4(sp)
    8e48:	df000017 	ldw	fp,0(sp)
    8e4c:	dec00204 	addi	sp,sp,8
    8e50:	f800283a 	ret

00008e54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8e54:	defffd04 	addi	sp,sp,-12
    8e58:	dfc00215 	stw	ra,8(sp)
    8e5c:	df000115 	stw	fp,4(sp)
    8e60:	df000104 	addi	fp,sp,4
    8e64:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8e68:	000a6380 	call	a638 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8e6c:	00800044 	movi	r2,1
    8e70:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8e74:	e037883a 	mov	sp,fp
    8e78:	dfc00117 	ldw	ra,4(sp)
    8e7c:	df000017 	ldw	fp,0(sp)
    8e80:	dec00204 	addi	sp,sp,8
    8e84:	f800283a 	ret

00008e88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8e88:	defffe04 	addi	sp,sp,-8
    8e8c:	dfc00115 	stw	ra,4(sp)
    8e90:	df000015 	stw	fp,0(sp)
    8e94:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    8e98:	01000074 	movhi	r4,1
    8e9c:	212eeb04 	addi	r4,r4,-17492
    8ea0:	000b883a 	mov	r5,zero
    8ea4:	01800044 	movi	r6,1
    8ea8:	00090340 	call	9034 <altera_avalon_jtag_uart_init>
    8eac:	01000074 	movhi	r4,1
    8eb0:	212ee104 	addi	r4,r4,-17532
    8eb4:	0008e1c0 	call	8e1c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    8eb8:	0001883a 	nop
}
    8ebc:	e037883a 	mov	sp,fp
    8ec0:	dfc00117 	ldw	ra,4(sp)
    8ec4:	df000017 	ldw	fp,0(sp)
    8ec8:	dec00204 	addi	sp,sp,8
    8ecc:	f800283a 	ret

00008ed0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8ed0:	defffa04 	addi	sp,sp,-24
    8ed4:	dfc00515 	stw	ra,20(sp)
    8ed8:	df000415 	stw	fp,16(sp)
    8edc:	df000404 	addi	fp,sp,16
    8ee0:	e13ffd15 	stw	r4,-12(fp)
    8ee4:	e17ffe15 	stw	r5,-8(fp)
    8ee8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8eec:	e0bffd17 	ldw	r2,-12(fp)
    8ef0:	10800017 	ldw	r2,0(r2)
    8ef4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8ef8:	e0bffc17 	ldw	r2,-16(fp)
    8efc:	10c00a04 	addi	r3,r2,40
    8f00:	e0bffd17 	ldw	r2,-12(fp)
    8f04:	10800217 	ldw	r2,8(r2)
    8f08:	1809883a 	mov	r4,r3
    8f0c:	e17ffe17 	ldw	r5,-8(fp)
    8f10:	e1bfff17 	ldw	r6,-4(fp)
    8f14:	100f883a 	mov	r7,r2
    8f18:	00094f80 	call	94f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8f1c:	e037883a 	mov	sp,fp
    8f20:	dfc00117 	ldw	ra,4(sp)
    8f24:	df000017 	ldw	fp,0(sp)
    8f28:	dec00204 	addi	sp,sp,8
    8f2c:	f800283a 	ret

00008f30 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8f30:	defffa04 	addi	sp,sp,-24
    8f34:	dfc00515 	stw	ra,20(sp)
    8f38:	df000415 	stw	fp,16(sp)
    8f3c:	df000404 	addi	fp,sp,16
    8f40:	e13ffd15 	stw	r4,-12(fp)
    8f44:	e17ffe15 	stw	r5,-8(fp)
    8f48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8f4c:	e0bffd17 	ldw	r2,-12(fp)
    8f50:	10800017 	ldw	r2,0(r2)
    8f54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8f58:	e0bffc17 	ldw	r2,-16(fp)
    8f5c:	10c00a04 	addi	r3,r2,40
    8f60:	e0bffd17 	ldw	r2,-12(fp)
    8f64:	10800217 	ldw	r2,8(r2)
    8f68:	1809883a 	mov	r4,r3
    8f6c:	e17ffe17 	ldw	r5,-8(fp)
    8f70:	e1bfff17 	ldw	r6,-4(fp)
    8f74:	100f883a 	mov	r7,r2
    8f78:	00097040 	call	9704 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8f7c:	e037883a 	mov	sp,fp
    8f80:	dfc00117 	ldw	ra,4(sp)
    8f84:	df000017 	ldw	fp,0(sp)
    8f88:	dec00204 	addi	sp,sp,8
    8f8c:	f800283a 	ret

00008f90 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    8f90:	defffc04 	addi	sp,sp,-16
    8f94:	dfc00315 	stw	ra,12(sp)
    8f98:	df000215 	stw	fp,8(sp)
    8f9c:	df000204 	addi	fp,sp,8
    8fa0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8fa4:	e0bfff17 	ldw	r2,-4(fp)
    8fa8:	10800017 	ldw	r2,0(r2)
    8fac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    8fb0:	e0bffe17 	ldw	r2,-8(fp)
    8fb4:	10c00a04 	addi	r3,r2,40
    8fb8:	e0bfff17 	ldw	r2,-4(fp)
    8fbc:	10800217 	ldw	r2,8(r2)
    8fc0:	1809883a 	mov	r4,r3
    8fc4:	100b883a 	mov	r5,r2
    8fc8:	00093a40 	call	93a4 <altera_avalon_jtag_uart_close>
}
    8fcc:	e037883a 	mov	sp,fp
    8fd0:	dfc00117 	ldw	ra,4(sp)
    8fd4:	df000017 	ldw	fp,0(sp)
    8fd8:	dec00204 	addi	sp,sp,8
    8fdc:	f800283a 	ret

00008fe0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    8fe0:	defffa04 	addi	sp,sp,-24
    8fe4:	dfc00515 	stw	ra,20(sp)
    8fe8:	df000415 	stw	fp,16(sp)
    8fec:	df000404 	addi	fp,sp,16
    8ff0:	e13ffd15 	stw	r4,-12(fp)
    8ff4:	e17ffe15 	stw	r5,-8(fp)
    8ff8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    8ffc:	e0bffd17 	ldw	r2,-12(fp)
    9000:	10800017 	ldw	r2,0(r2)
    9004:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    9008:	e0bffc17 	ldw	r2,-16(fp)
    900c:	10800a04 	addi	r2,r2,40
    9010:	1009883a 	mov	r4,r2
    9014:	e17ffe17 	ldw	r5,-8(fp)
    9018:	e1bfff17 	ldw	r6,-4(fp)
    901c:	000940c0 	call	940c <altera_avalon_jtag_uart_ioctl>
}
    9020:	e037883a 	mov	sp,fp
    9024:	dfc00117 	ldw	ra,4(sp)
    9028:	df000017 	ldw	fp,0(sp)
    902c:	dec00204 	addi	sp,sp,8
    9030:	f800283a 	ret

00009034 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    9034:	defffa04 	addi	sp,sp,-24
    9038:	dfc00515 	stw	ra,20(sp)
    903c:	df000415 	stw	fp,16(sp)
    9040:	df000404 	addi	fp,sp,16
    9044:	e13ffd15 	stw	r4,-12(fp)
    9048:	e17ffe15 	stw	r5,-8(fp)
    904c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    9050:	e0bffd17 	ldw	r2,-12(fp)
    9054:	00c00044 	movi	r3,1
    9058:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    905c:	e0bffd17 	ldw	r2,-12(fp)
    9060:	10800017 	ldw	r2,0(r2)
    9064:	10800104 	addi	r2,r2,4
    9068:	1007883a 	mov	r3,r2
    906c:	e0bffd17 	ldw	r2,-12(fp)
    9070:	10800817 	ldw	r2,32(r2)
    9074:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    9078:	e0fffe17 	ldw	r3,-8(fp)
    907c:	e0bfff17 	ldw	r2,-4(fp)
    9080:	d8000015 	stw	zero,0(sp)
    9084:	1809883a 	mov	r4,r3
    9088:	100b883a 	mov	r5,r2
    908c:	01800074 	movhi	r6,1
    9090:	31a43e04 	addi	r6,r6,-28424
    9094:	e1fffd17 	ldw	r7,-12(fp)
    9098:	0009eec0 	call	9eec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    909c:	e0bffd17 	ldw	r2,-12(fp)
    90a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    90a4:	e0bffd17 	ldw	r2,-12(fp)
    90a8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    90ac:	00800074 	movhi	r2,1
    90b0:	10b91204 	addi	r2,r2,-7096
    90b4:	10800017 	ldw	r2,0(r2)
    90b8:	1809883a 	mov	r4,r3
    90bc:	100b883a 	mov	r5,r2
    90c0:	01800074 	movhi	r6,1
    90c4:	31a4bf04 	addi	r6,r6,-27908
    90c8:	e1fffd17 	ldw	r7,-12(fp)
    90cc:	000991c0 	call	991c <alt_alarm_start>
    90d0:	1000040e 	bge	r2,zero,90e4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    90d4:	e0fffd17 	ldw	r3,-12(fp)
    90d8:	00a00034 	movhi	r2,32768
    90dc:	10bfffc4 	addi	r2,r2,-1
    90e0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    90e4:	e037883a 	mov	sp,fp
    90e8:	dfc00117 	ldw	ra,4(sp)
    90ec:	df000017 	ldw	fp,0(sp)
    90f0:	dec00204 	addi	sp,sp,8
    90f4:	f800283a 	ret

000090f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    90f8:	defff804 	addi	sp,sp,-32
    90fc:	df000715 	stw	fp,28(sp)
    9100:	df000704 	addi	fp,sp,28
    9104:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    9108:	e0bfff17 	ldw	r2,-4(fp)
    910c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    9110:	e0bffb17 	ldw	r2,-20(fp)
    9114:	10800017 	ldw	r2,0(r2)
    9118:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    911c:	e0bffc17 	ldw	r2,-16(fp)
    9120:	10800104 	addi	r2,r2,4
    9124:	10800037 	ldwio	r2,0(r2)
    9128:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    912c:	e0bffd17 	ldw	r2,-12(fp)
    9130:	1080c00c 	andi	r2,r2,768
    9134:	1000011e 	bne	r2,zero,913c <altera_avalon_jtag_uart_irq+0x44>
      break;
    9138:	00006c06 	br	92ec <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    913c:	e0bffd17 	ldw	r2,-12(fp)
    9140:	1080400c 	andi	r2,r2,256
    9144:	10003426 	beq	r2,zero,9218 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    9148:	00800074 	movhi	r2,1
    914c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9150:	e0bffb17 	ldw	r2,-20(fp)
    9154:	10800a17 	ldw	r2,40(r2)
    9158:	10800044 	addi	r2,r2,1
    915c:	1081ffcc 	andi	r2,r2,2047
    9160:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    9164:	e0bffb17 	ldw	r2,-20(fp)
    9168:	10c00b17 	ldw	r3,44(r2)
    916c:	e0bffe17 	ldw	r2,-8(fp)
    9170:	1880011e 	bne	r3,r2,9178 <altera_avalon_jtag_uart_irq+0x80>
          break;
    9174:	00001606 	br	91d0 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9178:	e0bffc17 	ldw	r2,-16(fp)
    917c:	10800037 	ldwio	r2,0(r2)
    9180:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    9184:	e0bff917 	ldw	r2,-28(fp)
    9188:	10a0000c 	andi	r2,r2,32768
    918c:	1000011e 	bne	r2,zero,9194 <altera_avalon_jtag_uart_irq+0x9c>
          break;
    9190:	00000f06 	br	91d0 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9194:	e0bffb17 	ldw	r2,-20(fp)
    9198:	10800a17 	ldw	r2,40(r2)
    919c:	e0fff917 	ldw	r3,-28(fp)
    91a0:	1809883a 	mov	r4,r3
    91a4:	e0fffb17 	ldw	r3,-20(fp)
    91a8:	1885883a 	add	r2,r3,r2
    91ac:	10800e04 	addi	r2,r2,56
    91b0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    91b4:	e0bffb17 	ldw	r2,-20(fp)
    91b8:	10800a17 	ldw	r2,40(r2)
    91bc:	10800044 	addi	r2,r2,1
    91c0:	10c1ffcc 	andi	r3,r2,2047
    91c4:	e0bffb17 	ldw	r2,-20(fp)
    91c8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    91cc:	003fe006 	br	9150 <_gp+0xffff43c4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    91d0:	e0bff917 	ldw	r2,-28(fp)
    91d4:	10bfffec 	andhi	r2,r2,65535
    91d8:	10000f26 	beq	r2,zero,9218 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    91dc:	e0bffb17 	ldw	r2,-20(fp)
    91e0:	10c00817 	ldw	r3,32(r2)
    91e4:	00bfff84 	movi	r2,-2
    91e8:	1886703a 	and	r3,r3,r2
    91ec:	e0bffb17 	ldw	r2,-20(fp)
    91f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    91f4:	e0bffc17 	ldw	r2,-16(fp)
    91f8:	10800104 	addi	r2,r2,4
    91fc:	1007883a 	mov	r3,r2
    9200:	e0bffb17 	ldw	r2,-20(fp)
    9204:	10800817 	ldw	r2,32(r2)
    9208:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    920c:	e0bffc17 	ldw	r2,-16(fp)
    9210:	10800104 	addi	r2,r2,4
    9214:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    9218:	e0bffd17 	ldw	r2,-12(fp)
    921c:	1080800c 	andi	r2,r2,512
    9220:	10003126 	beq	r2,zero,92e8 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    9224:	e0bffd17 	ldw	r2,-12(fp)
    9228:	1004d43a 	srli	r2,r2,16
    922c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    9230:	00001406 	br	9284 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    9234:	e0bffc17 	ldw	r2,-16(fp)
    9238:	e0fffb17 	ldw	r3,-20(fp)
    923c:	18c00d17 	ldw	r3,52(r3)
    9240:	e13ffb17 	ldw	r4,-20(fp)
    9244:	20c7883a 	add	r3,r4,r3
    9248:	18c20e04 	addi	r3,r3,2104
    924c:	18c00003 	ldbu	r3,0(r3)
    9250:	18c03fcc 	andi	r3,r3,255
    9254:	18c0201c 	xori	r3,r3,128
    9258:	18ffe004 	addi	r3,r3,-128
    925c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9260:	e0bffb17 	ldw	r2,-20(fp)
    9264:	10800d17 	ldw	r2,52(r2)
    9268:	10800044 	addi	r2,r2,1
    926c:	10c1ffcc 	andi	r3,r2,2047
    9270:	e0bffb17 	ldw	r2,-20(fp)
    9274:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    9278:	e0bffa17 	ldw	r2,-24(fp)
    927c:	10bfffc4 	addi	r2,r2,-1
    9280:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    9284:	e0bffa17 	ldw	r2,-24(fp)
    9288:	10000526 	beq	r2,zero,92a0 <altera_avalon_jtag_uart_irq+0x1a8>
    928c:	e0bffb17 	ldw	r2,-20(fp)
    9290:	10c00d17 	ldw	r3,52(r2)
    9294:	e0bffb17 	ldw	r2,-20(fp)
    9298:	10800c17 	ldw	r2,48(r2)
    929c:	18bfe51e 	bne	r3,r2,9234 <_gp+0xffff44a8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    92a0:	e0bffa17 	ldw	r2,-24(fp)
    92a4:	10001026 	beq	r2,zero,92e8 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    92a8:	e0bffb17 	ldw	r2,-20(fp)
    92ac:	10c00817 	ldw	r3,32(r2)
    92b0:	00bfff44 	movi	r2,-3
    92b4:	1886703a 	and	r3,r3,r2
    92b8:	e0bffb17 	ldw	r2,-20(fp)
    92bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    92c0:	e0bffb17 	ldw	r2,-20(fp)
    92c4:	10800017 	ldw	r2,0(r2)
    92c8:	10800104 	addi	r2,r2,4
    92cc:	1007883a 	mov	r3,r2
    92d0:	e0bffb17 	ldw	r2,-20(fp)
    92d4:	10800817 	ldw	r2,32(r2)
    92d8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    92dc:	e0bffc17 	ldw	r2,-16(fp)
    92e0:	10800104 	addi	r2,r2,4
    92e4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    92e8:	003f8c06 	br	911c <_gp+0xffff4390>
}
    92ec:	e037883a 	mov	sp,fp
    92f0:	df000017 	ldw	fp,0(sp)
    92f4:	dec00104 	addi	sp,sp,4
    92f8:	f800283a 	ret

000092fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    92fc:	defff804 	addi	sp,sp,-32
    9300:	df000715 	stw	fp,28(sp)
    9304:	df000704 	addi	fp,sp,28
    9308:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    930c:	e0bffb17 	ldw	r2,-20(fp)
    9310:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    9314:	e0bff917 	ldw	r2,-28(fp)
    9318:	10800017 	ldw	r2,0(r2)
    931c:	10800104 	addi	r2,r2,4
    9320:	10800037 	ldwio	r2,0(r2)
    9324:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    9328:	e0bffa17 	ldw	r2,-24(fp)
    932c:	1081000c 	andi	r2,r2,1024
    9330:	10000b26 	beq	r2,zero,9360 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    9334:	e0bff917 	ldw	r2,-28(fp)
    9338:	10800017 	ldw	r2,0(r2)
    933c:	10800104 	addi	r2,r2,4
    9340:	1007883a 	mov	r3,r2
    9344:	e0bff917 	ldw	r2,-28(fp)
    9348:	10800817 	ldw	r2,32(r2)
    934c:	10810014 	ori	r2,r2,1024
    9350:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    9354:	e0bff917 	ldw	r2,-28(fp)
    9358:	10000915 	stw	zero,36(r2)
    935c:	00000a06 	br	9388 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    9360:	e0bff917 	ldw	r2,-28(fp)
    9364:	10c00917 	ldw	r3,36(r2)
    9368:	00a00034 	movhi	r2,32768
    936c:	10bfff04 	addi	r2,r2,-4
    9370:	10c00536 	bltu	r2,r3,9388 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    9374:	e0bff917 	ldw	r2,-28(fp)
    9378:	10800917 	ldw	r2,36(r2)
    937c:	10c00044 	addi	r3,r2,1
    9380:	e0bff917 	ldw	r2,-28(fp)
    9384:	10c00915 	stw	r3,36(r2)
    9388:	00800074 	movhi	r2,1
    938c:	10b91204 	addi	r2,r2,-7096
    9390:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    9394:	e037883a 	mov	sp,fp
    9398:	df000017 	ldw	fp,0(sp)
    939c:	dec00104 	addi	sp,sp,4
    93a0:	f800283a 	ret

000093a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    93a4:	defffd04 	addi	sp,sp,-12
    93a8:	df000215 	stw	fp,8(sp)
    93ac:	df000204 	addi	fp,sp,8
    93b0:	e13ffe15 	stw	r4,-8(fp)
    93b4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    93b8:	00000506 	br	93d0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    93bc:	e0bfff17 	ldw	r2,-4(fp)
    93c0:	1090000c 	andi	r2,r2,16384
    93c4:	10000226 	beq	r2,zero,93d0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    93c8:	00bffd44 	movi	r2,-11
    93cc:	00000b06 	br	93fc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    93d0:	e0bffe17 	ldw	r2,-8(fp)
    93d4:	10c00d17 	ldw	r3,52(r2)
    93d8:	e0bffe17 	ldw	r2,-8(fp)
    93dc:	10800c17 	ldw	r2,48(r2)
    93e0:	18800526 	beq	r3,r2,93f8 <altera_avalon_jtag_uart_close+0x54>
    93e4:	e0bffe17 	ldw	r2,-8(fp)
    93e8:	10c00917 	ldw	r3,36(r2)
    93ec:	e0bffe17 	ldw	r2,-8(fp)
    93f0:	10800117 	ldw	r2,4(r2)
    93f4:	18bff136 	bltu	r3,r2,93bc <_gp+0xffff4630>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    93f8:	0005883a 	mov	r2,zero
}
    93fc:	e037883a 	mov	sp,fp
    9400:	df000017 	ldw	fp,0(sp)
    9404:	dec00104 	addi	sp,sp,4
    9408:	f800283a 	ret

0000940c <altera_avalon_jtag_uart_ioctl>:
    940c:	defffa04 	addi	sp,sp,-24
    9410:	df000515 	stw	fp,20(sp)
    9414:	df000504 	addi	fp,sp,20
    9418:	e13ffd15 	stw	r4,-12(fp)
    941c:	e17ffe15 	stw	r5,-8(fp)
    9420:	e1bfff15 	stw	r6,-4(fp)
    9424:	00bff9c4 	movi	r2,-25
    9428:	e0bffb15 	stw	r2,-20(fp)
    942c:	e0bffe17 	ldw	r2,-8(fp)
    9430:	10da8060 	cmpeqi	r3,r2,27137
    9434:	1800031e 	bne	r3,zero,9444 <altera_avalon_jtag_uart_ioctl+0x38>
    9438:	109a80a0 	cmpeqi	r2,r2,27138
    943c:	1000191e 	bne	r2,zero,94a4 <altera_avalon_jtag_uart_ioctl+0x98>
    9440:	00002806 	br	94e4 <altera_avalon_jtag_uart_ioctl+0xd8>
    9444:	e0bffd17 	ldw	r2,-12(fp)
    9448:	10c00117 	ldw	r3,4(r2)
    944c:	00a00034 	movhi	r2,32768
    9450:	10bfffc4 	addi	r2,r2,-1
    9454:	18801226 	beq	r3,r2,94a0 <altera_avalon_jtag_uart_ioctl+0x94>
    9458:	e0bfff17 	ldw	r2,-4(fp)
    945c:	10800017 	ldw	r2,0(r2)
    9460:	e0bffc15 	stw	r2,-16(fp)
    9464:	e0bffc17 	ldw	r2,-16(fp)
    9468:	10800090 	cmplti	r2,r2,2
    946c:	1000061e 	bne	r2,zero,9488 <altera_avalon_jtag_uart_ioctl+0x7c>
    9470:	e0fffc17 	ldw	r3,-16(fp)
    9474:	00a00034 	movhi	r2,32768
    9478:	10bfffc4 	addi	r2,r2,-1
    947c:	18800226 	beq	r3,r2,9488 <altera_avalon_jtag_uart_ioctl+0x7c>
    9480:	e0bffc17 	ldw	r2,-16(fp)
    9484:	00000206 	br	9490 <altera_avalon_jtag_uart_ioctl+0x84>
    9488:	00a00034 	movhi	r2,32768
    948c:	10bfff84 	addi	r2,r2,-2
    9490:	e0fffd17 	ldw	r3,-12(fp)
    9494:	18800115 	stw	r2,4(r3)
    9498:	e03ffb15 	stw	zero,-20(fp)
    949c:	00001106 	br	94e4 <altera_avalon_jtag_uart_ioctl+0xd8>
    94a0:	00001006 	br	94e4 <altera_avalon_jtag_uart_ioctl+0xd8>
    94a4:	e0bffd17 	ldw	r2,-12(fp)
    94a8:	10c00117 	ldw	r3,4(r2)
    94ac:	00a00034 	movhi	r2,32768
    94b0:	10bfffc4 	addi	r2,r2,-1
    94b4:	18800a26 	beq	r3,r2,94e0 <altera_avalon_jtag_uart_ioctl+0xd4>
    94b8:	e0bffd17 	ldw	r2,-12(fp)
    94bc:	10c00917 	ldw	r3,36(r2)
    94c0:	e0bffd17 	ldw	r2,-12(fp)
    94c4:	10800117 	ldw	r2,4(r2)
    94c8:	1885803a 	cmpltu	r2,r3,r2
    94cc:	10c03fcc 	andi	r3,r2,255
    94d0:	e0bfff17 	ldw	r2,-4(fp)
    94d4:	10c00015 	stw	r3,0(r2)
    94d8:	e03ffb15 	stw	zero,-20(fp)
    94dc:	00000006 	br	94e0 <altera_avalon_jtag_uart_ioctl+0xd4>
    94e0:	0001883a 	nop
    94e4:	e0bffb17 	ldw	r2,-20(fp)
    94e8:	e037883a 	mov	sp,fp
    94ec:	df000017 	ldw	fp,0(sp)
    94f0:	dec00104 	addi	sp,sp,4
    94f4:	f800283a 	ret

000094f8 <altera_avalon_jtag_uart_read>:
    94f8:	defff304 	addi	sp,sp,-52
    94fc:	dfc00c15 	stw	ra,48(sp)
    9500:	df000b15 	stw	fp,44(sp)
    9504:	df000b04 	addi	fp,sp,44
    9508:	e13ffc15 	stw	r4,-16(fp)
    950c:	e17ffd15 	stw	r5,-12(fp)
    9510:	e1bffe15 	stw	r6,-8(fp)
    9514:	e1ffff15 	stw	r7,-4(fp)
    9518:	e0bffd17 	ldw	r2,-12(fp)
    951c:	e0bff515 	stw	r2,-44(fp)
    9520:	00004906 	br	9648 <altera_avalon_jtag_uart_read+0x150>
    9524:	e0bffc17 	ldw	r2,-16(fp)
    9528:	10800a17 	ldw	r2,40(r2)
    952c:	e0bff715 	stw	r2,-36(fp)
    9530:	e0bffc17 	ldw	r2,-16(fp)
    9534:	10800b17 	ldw	r2,44(r2)
    9538:	e0bff815 	stw	r2,-32(fp)
    953c:	e0fff717 	ldw	r3,-36(fp)
    9540:	e0bff817 	ldw	r2,-32(fp)
    9544:	18800536 	bltu	r3,r2,955c <altera_avalon_jtag_uart_read+0x64>
    9548:	e0fff717 	ldw	r3,-36(fp)
    954c:	e0bff817 	ldw	r2,-32(fp)
    9550:	1885c83a 	sub	r2,r3,r2
    9554:	e0bff615 	stw	r2,-40(fp)
    9558:	00000406 	br	956c <altera_avalon_jtag_uart_read+0x74>
    955c:	00c20004 	movi	r3,2048
    9560:	e0bff817 	ldw	r2,-32(fp)
    9564:	1885c83a 	sub	r2,r3,r2
    9568:	e0bff615 	stw	r2,-40(fp)
    956c:	e0bff617 	ldw	r2,-40(fp)
    9570:	1000011e 	bne	r2,zero,9578 <altera_avalon_jtag_uart_read+0x80>
    9574:	00001d06 	br	95ec <altera_avalon_jtag_uart_read+0xf4>
    9578:	e0fffe17 	ldw	r3,-8(fp)
    957c:	e0bff617 	ldw	r2,-40(fp)
    9580:	1880022e 	bgeu	r3,r2,958c <altera_avalon_jtag_uart_read+0x94>
    9584:	e0bffe17 	ldw	r2,-8(fp)
    9588:	e0bff615 	stw	r2,-40(fp)
    958c:	e0bff817 	ldw	r2,-32(fp)
    9590:	10800e04 	addi	r2,r2,56
    9594:	e0fffc17 	ldw	r3,-16(fp)
    9598:	1885883a 	add	r2,r3,r2
    959c:	e13ff517 	ldw	r4,-44(fp)
    95a0:	100b883a 	mov	r5,r2
    95a4:	e1bff617 	ldw	r6,-40(fp)
    95a8:	000aa340 	call	aa34 <memcpy>
    95ac:	e0fff517 	ldw	r3,-44(fp)
    95b0:	e0bff617 	ldw	r2,-40(fp)
    95b4:	1885883a 	add	r2,r3,r2
    95b8:	e0bff515 	stw	r2,-44(fp)
    95bc:	e0fffe17 	ldw	r3,-8(fp)
    95c0:	e0bff617 	ldw	r2,-40(fp)
    95c4:	1885c83a 	sub	r2,r3,r2
    95c8:	e0bffe15 	stw	r2,-8(fp)
    95cc:	e0fff817 	ldw	r3,-32(fp)
    95d0:	e0bff617 	ldw	r2,-40(fp)
    95d4:	1885883a 	add	r2,r3,r2
    95d8:	10c1ffcc 	andi	r3,r2,2047
    95dc:	e0bffc17 	ldw	r2,-16(fp)
    95e0:	10c00b15 	stw	r3,44(r2)
    95e4:	e0bffe17 	ldw	r2,-8(fp)
    95e8:	00bfce16 	blt	zero,r2,9524 <_gp+0xffff4798>
    95ec:	e0fff517 	ldw	r3,-44(fp)
    95f0:	e0bffd17 	ldw	r2,-12(fp)
    95f4:	18800126 	beq	r3,r2,95fc <altera_avalon_jtag_uart_read+0x104>
    95f8:	00001506 	br	9650 <altera_avalon_jtag_uart_read+0x158>
    95fc:	e0bfff17 	ldw	r2,-4(fp)
    9600:	1090000c 	andi	r2,r2,16384
    9604:	10000126 	beq	r2,zero,960c <altera_avalon_jtag_uart_read+0x114>
    9608:	00001106 	br	9650 <altera_avalon_jtag_uart_read+0x158>
    960c:	0001883a 	nop
    9610:	e0bffc17 	ldw	r2,-16(fp)
    9614:	10c00a17 	ldw	r3,40(r2)
    9618:	e0bff717 	ldw	r2,-36(fp)
    961c:	1880051e 	bne	r3,r2,9634 <altera_avalon_jtag_uart_read+0x13c>
    9620:	e0bffc17 	ldw	r2,-16(fp)
    9624:	10c00917 	ldw	r3,36(r2)
    9628:	e0bffc17 	ldw	r2,-16(fp)
    962c:	10800117 	ldw	r2,4(r2)
    9630:	18bff736 	bltu	r3,r2,9610 <_gp+0xffff4884>
    9634:	e0bffc17 	ldw	r2,-16(fp)
    9638:	10c00a17 	ldw	r3,40(r2)
    963c:	e0bff717 	ldw	r2,-36(fp)
    9640:	1880011e 	bne	r3,r2,9648 <altera_avalon_jtag_uart_read+0x150>
    9644:	00000206 	br	9650 <altera_avalon_jtag_uart_read+0x158>
    9648:	e0bffe17 	ldw	r2,-8(fp)
    964c:	00bfb516 	blt	zero,r2,9524 <_gp+0xffff4798>
    9650:	e0fff517 	ldw	r3,-44(fp)
    9654:	e0bffd17 	ldw	r2,-12(fp)
    9658:	18801826 	beq	r3,r2,96bc <altera_avalon_jtag_uart_read+0x1c4>
    965c:	0005303a 	rdctl	r2,status
    9660:	e0bffa15 	stw	r2,-24(fp)
    9664:	e0fffa17 	ldw	r3,-24(fp)
    9668:	00bfff84 	movi	r2,-2
    966c:	1884703a 	and	r2,r3,r2
    9670:	1001703a 	wrctl	status,r2
    9674:	e0bffa17 	ldw	r2,-24(fp)
    9678:	e0bff915 	stw	r2,-28(fp)
    967c:	e0bffc17 	ldw	r2,-16(fp)
    9680:	10800817 	ldw	r2,32(r2)
    9684:	10c00054 	ori	r3,r2,1
    9688:	e0bffc17 	ldw	r2,-16(fp)
    968c:	10c00815 	stw	r3,32(r2)
    9690:	e0bffc17 	ldw	r2,-16(fp)
    9694:	10800017 	ldw	r2,0(r2)
    9698:	10800104 	addi	r2,r2,4
    969c:	1007883a 	mov	r3,r2
    96a0:	e0bffc17 	ldw	r2,-16(fp)
    96a4:	10800817 	ldw	r2,32(r2)
    96a8:	18800035 	stwio	r2,0(r3)
    96ac:	e0bff917 	ldw	r2,-28(fp)
    96b0:	e0bffb15 	stw	r2,-20(fp)
    96b4:	e0bffb17 	ldw	r2,-20(fp)
    96b8:	1001703a 	wrctl	status,r2
    96bc:	e0fff517 	ldw	r3,-44(fp)
    96c0:	e0bffd17 	ldw	r2,-12(fp)
    96c4:	18800426 	beq	r3,r2,96d8 <altera_avalon_jtag_uart_read+0x1e0>
    96c8:	e0fff517 	ldw	r3,-44(fp)
    96cc:	e0bffd17 	ldw	r2,-12(fp)
    96d0:	1885c83a 	sub	r2,r3,r2
    96d4:	00000606 	br	96f0 <altera_avalon_jtag_uart_read+0x1f8>
    96d8:	e0bfff17 	ldw	r2,-4(fp)
    96dc:	1090000c 	andi	r2,r2,16384
    96e0:	10000226 	beq	r2,zero,96ec <altera_avalon_jtag_uart_read+0x1f4>
    96e4:	00bffd44 	movi	r2,-11
    96e8:	00000106 	br	96f0 <altera_avalon_jtag_uart_read+0x1f8>
    96ec:	00bffec4 	movi	r2,-5
    96f0:	e037883a 	mov	sp,fp
    96f4:	dfc00117 	ldw	ra,4(sp)
    96f8:	df000017 	ldw	fp,0(sp)
    96fc:	dec00204 	addi	sp,sp,8
    9700:	f800283a 	ret

00009704 <altera_avalon_jtag_uart_write>:
    9704:	defff304 	addi	sp,sp,-52
    9708:	dfc00c15 	stw	ra,48(sp)
    970c:	df000b15 	stw	fp,44(sp)
    9710:	df000b04 	addi	fp,sp,44
    9714:	e13ffc15 	stw	r4,-16(fp)
    9718:	e17ffd15 	stw	r5,-12(fp)
    971c:	e1bffe15 	stw	r6,-8(fp)
    9720:	e1ffff15 	stw	r7,-4(fp)
    9724:	e03ff515 	stw	zero,-44(fp)
    9728:	e0bffd17 	ldw	r2,-12(fp)
    972c:	e0bff715 	stw	r2,-36(fp)
    9730:	00003806 	br	9814 <altera_avalon_jtag_uart_write+0x110>
    9734:	e0bffc17 	ldw	r2,-16(fp)
    9738:	10800c17 	ldw	r2,48(r2)
    973c:	e0bff815 	stw	r2,-32(fp)
    9740:	e0bffc17 	ldw	r2,-16(fp)
    9744:	10800d17 	ldw	r2,52(r2)
    9748:	e0bff515 	stw	r2,-44(fp)
    974c:	e0fff817 	ldw	r3,-32(fp)
    9750:	e0bff517 	ldw	r2,-44(fp)
    9754:	1880062e 	bgeu	r3,r2,9770 <altera_avalon_jtag_uart_write+0x6c>
    9758:	e0fff517 	ldw	r3,-44(fp)
    975c:	e0bff817 	ldw	r2,-32(fp)
    9760:	1885c83a 	sub	r2,r3,r2
    9764:	10bfffc4 	addi	r2,r2,-1
    9768:	e0bff615 	stw	r2,-40(fp)
    976c:	00000b06 	br	979c <altera_avalon_jtag_uart_write+0x98>
    9770:	e0bff517 	ldw	r2,-44(fp)
    9774:	10000526 	beq	r2,zero,978c <altera_avalon_jtag_uart_write+0x88>
    9778:	00c20004 	movi	r3,2048
    977c:	e0bff817 	ldw	r2,-32(fp)
    9780:	1885c83a 	sub	r2,r3,r2
    9784:	e0bff615 	stw	r2,-40(fp)
    9788:	00000406 	br	979c <altera_avalon_jtag_uart_write+0x98>
    978c:	00c1ffc4 	movi	r3,2047
    9790:	e0bff817 	ldw	r2,-32(fp)
    9794:	1885c83a 	sub	r2,r3,r2
    9798:	e0bff615 	stw	r2,-40(fp)
    979c:	e0bff617 	ldw	r2,-40(fp)
    97a0:	1000011e 	bne	r2,zero,97a8 <altera_avalon_jtag_uart_write+0xa4>
    97a4:	00001d06 	br	981c <altera_avalon_jtag_uart_write+0x118>
    97a8:	e0fffe17 	ldw	r3,-8(fp)
    97ac:	e0bff617 	ldw	r2,-40(fp)
    97b0:	1880022e 	bgeu	r3,r2,97bc <altera_avalon_jtag_uart_write+0xb8>
    97b4:	e0bffe17 	ldw	r2,-8(fp)
    97b8:	e0bff615 	stw	r2,-40(fp)
    97bc:	e0bff817 	ldw	r2,-32(fp)
    97c0:	10820e04 	addi	r2,r2,2104
    97c4:	e0fffc17 	ldw	r3,-16(fp)
    97c8:	1885883a 	add	r2,r3,r2
    97cc:	1009883a 	mov	r4,r2
    97d0:	e17ffd17 	ldw	r5,-12(fp)
    97d4:	e1bff617 	ldw	r6,-40(fp)
    97d8:	000aa340 	call	aa34 <memcpy>
    97dc:	e0fffd17 	ldw	r3,-12(fp)
    97e0:	e0bff617 	ldw	r2,-40(fp)
    97e4:	1885883a 	add	r2,r3,r2
    97e8:	e0bffd15 	stw	r2,-12(fp)
    97ec:	e0fffe17 	ldw	r3,-8(fp)
    97f0:	e0bff617 	ldw	r2,-40(fp)
    97f4:	1885c83a 	sub	r2,r3,r2
    97f8:	e0bffe15 	stw	r2,-8(fp)
    97fc:	e0fff817 	ldw	r3,-32(fp)
    9800:	e0bff617 	ldw	r2,-40(fp)
    9804:	1885883a 	add	r2,r3,r2
    9808:	10c1ffcc 	andi	r3,r2,2047
    980c:	e0bffc17 	ldw	r2,-16(fp)
    9810:	10c00c15 	stw	r3,48(r2)
    9814:	e0bffe17 	ldw	r2,-8(fp)
    9818:	00bfc616 	blt	zero,r2,9734 <_gp+0xffff49a8>
    981c:	0005303a 	rdctl	r2,status
    9820:	e0bffa15 	stw	r2,-24(fp)
    9824:	e0fffa17 	ldw	r3,-24(fp)
    9828:	00bfff84 	movi	r2,-2
    982c:	1884703a 	and	r2,r3,r2
    9830:	1001703a 	wrctl	status,r2
    9834:	e0bffa17 	ldw	r2,-24(fp)
    9838:	e0bff915 	stw	r2,-28(fp)
    983c:	e0bffc17 	ldw	r2,-16(fp)
    9840:	10800817 	ldw	r2,32(r2)
    9844:	10c00094 	ori	r3,r2,2
    9848:	e0bffc17 	ldw	r2,-16(fp)
    984c:	10c00815 	stw	r3,32(r2)
    9850:	e0bffc17 	ldw	r2,-16(fp)
    9854:	10800017 	ldw	r2,0(r2)
    9858:	10800104 	addi	r2,r2,4
    985c:	1007883a 	mov	r3,r2
    9860:	e0bffc17 	ldw	r2,-16(fp)
    9864:	10800817 	ldw	r2,32(r2)
    9868:	18800035 	stwio	r2,0(r3)
    986c:	e0bff917 	ldw	r2,-28(fp)
    9870:	e0bffb15 	stw	r2,-20(fp)
    9874:	e0bffb17 	ldw	r2,-20(fp)
    9878:	1001703a 	wrctl	status,r2
    987c:	e0bffe17 	ldw	r2,-8(fp)
    9880:	0080120e 	bge	zero,r2,98cc <altera_avalon_jtag_uart_write+0x1c8>
    9884:	e0bfff17 	ldw	r2,-4(fp)
    9888:	1090000c 	andi	r2,r2,16384
    988c:	10000126 	beq	r2,zero,9894 <altera_avalon_jtag_uart_write+0x190>
    9890:	00001006 	br	98d4 <altera_avalon_jtag_uart_write+0x1d0>
    9894:	0001883a 	nop
    9898:	e0bffc17 	ldw	r2,-16(fp)
    989c:	10c00d17 	ldw	r3,52(r2)
    98a0:	e0bff517 	ldw	r2,-44(fp)
    98a4:	1880051e 	bne	r3,r2,98bc <altera_avalon_jtag_uart_write+0x1b8>
    98a8:	e0bffc17 	ldw	r2,-16(fp)
    98ac:	10c00917 	ldw	r3,36(r2)
    98b0:	e0bffc17 	ldw	r2,-16(fp)
    98b4:	10800117 	ldw	r2,4(r2)
    98b8:	18bff736 	bltu	r3,r2,9898 <_gp+0xffff4b0c>
    98bc:	e0bffc17 	ldw	r2,-16(fp)
    98c0:	10800917 	ldw	r2,36(r2)
    98c4:	10000126 	beq	r2,zero,98cc <altera_avalon_jtag_uart_write+0x1c8>
    98c8:	00000206 	br	98d4 <altera_avalon_jtag_uart_write+0x1d0>
    98cc:	e0bffe17 	ldw	r2,-8(fp)
    98d0:	00bf9716 	blt	zero,r2,9730 <_gp+0xffff49a4>
    98d4:	e0fffd17 	ldw	r3,-12(fp)
    98d8:	e0bff717 	ldw	r2,-36(fp)
    98dc:	18800426 	beq	r3,r2,98f0 <altera_avalon_jtag_uart_write+0x1ec>
    98e0:	e0fffd17 	ldw	r3,-12(fp)
    98e4:	e0bff717 	ldw	r2,-36(fp)
    98e8:	1885c83a 	sub	r2,r3,r2
    98ec:	00000606 	br	9908 <altera_avalon_jtag_uart_write+0x204>
    98f0:	e0bfff17 	ldw	r2,-4(fp)
    98f4:	1090000c 	andi	r2,r2,16384
    98f8:	10000226 	beq	r2,zero,9904 <altera_avalon_jtag_uart_write+0x200>
    98fc:	00bffd44 	movi	r2,-11
    9900:	00000106 	br	9908 <altera_avalon_jtag_uart_write+0x204>
    9904:	00bffec4 	movi	r2,-5
    9908:	e037883a 	mov	sp,fp
    990c:	dfc00117 	ldw	ra,4(sp)
    9910:	df000017 	ldw	fp,0(sp)
    9914:	dec00204 	addi	sp,sp,8
    9918:	f800283a 	ret

0000991c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    991c:	defff504 	addi	sp,sp,-44
    9920:	df000a15 	stw	fp,40(sp)
    9924:	df000a04 	addi	fp,sp,40
    9928:	e13ffc15 	stw	r4,-16(fp)
    992c:	e17ffd15 	stw	r5,-12(fp)
    9930:	e1bffe15 	stw	r6,-8(fp)
    9934:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    9938:	e03ff615 	stw	zero,-40(fp)
    993c:	00800074 	movhi	r2,1
    9940:	10b91204 	addi	r2,r2,-7096
    9944:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    9948:	10003f26 	beq	r2,zero,9a48 <alt_alarm_start+0x12c>
  {
    if (alarm)
    994c:	e0bffc17 	ldw	r2,-16(fp)
    9950:	10003b26 	beq	r2,zero,9a40 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    9954:	e0bffc17 	ldw	r2,-16(fp)
    9958:	e0fffe17 	ldw	r3,-8(fp)
    995c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    9960:	e0bffc17 	ldw	r2,-16(fp)
    9964:	e0ffff17 	ldw	r3,-4(fp)
    9968:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    996c:	0005303a 	rdctl	r2,status
    9970:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9974:	e0fff817 	ldw	r3,-32(fp)
    9978:	00bfff84 	movi	r2,-2
    997c:	1884703a 	and	r2,r3,r2
    9980:	1001703a 	wrctl	status,r2
  
  return context;
    9984:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    9988:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    998c:	00800074 	movhi	r2,1
    9990:	10b91304 	addi	r2,r2,-7092
    9994:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    9998:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    999c:	e0fffd17 	ldw	r3,-12(fp)
    99a0:	e0bff617 	ldw	r2,-40(fp)
    99a4:	1885883a 	add	r2,r3,r2
    99a8:	10c00044 	addi	r3,r2,1
    99ac:	e0bffc17 	ldw	r2,-16(fp)
    99b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    99b4:	e0bffc17 	ldw	r2,-16(fp)
    99b8:	10c00217 	ldw	r3,8(r2)
    99bc:	e0bff617 	ldw	r2,-40(fp)
    99c0:	1880042e 	bgeu	r3,r2,99d4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    99c4:	e0bffc17 	ldw	r2,-16(fp)
    99c8:	00c00044 	movi	r3,1
    99cc:	10c00405 	stb	r3,16(r2)
    99d0:	00000206 	br	99dc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    99d4:	e0bffc17 	ldw	r2,-16(fp)
    99d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    99dc:	e0fffc17 	ldw	r3,-16(fp)
    99e0:	00800074 	movhi	r2,1
    99e4:	10b36704 	addi	r2,r2,-12900
    99e8:	e0bff915 	stw	r2,-28(fp)
    99ec:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    99f0:	e0bffa17 	ldw	r2,-24(fp)
    99f4:	e0fff917 	ldw	r3,-28(fp)
    99f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    99fc:	e0bff917 	ldw	r2,-28(fp)
    9a00:	10c00017 	ldw	r3,0(r2)
    9a04:	e0bffa17 	ldw	r2,-24(fp)
    9a08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9a0c:	e0bff917 	ldw	r2,-28(fp)
    9a10:	10800017 	ldw	r2,0(r2)
    9a14:	e0fffa17 	ldw	r3,-24(fp)
    9a18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9a1c:	e0bff917 	ldw	r2,-28(fp)
    9a20:	e0fffa17 	ldw	r3,-24(fp)
    9a24:	10c00015 	stw	r3,0(r2)
    9a28:	e0bff717 	ldw	r2,-36(fp)
    9a2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a30:	e0bffb17 	ldw	r2,-20(fp)
    9a34:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    9a38:	0005883a 	mov	r2,zero
    9a3c:	00000306 	br	9a4c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    9a40:	00bffa84 	movi	r2,-22
    9a44:	00000106 	br	9a4c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    9a48:	00bfde84 	movi	r2,-134
  }
}
    9a4c:	e037883a 	mov	sp,fp
    9a50:	df000017 	ldw	fp,0(sp)
    9a54:	dec00104 	addi	sp,sp,4
    9a58:	f800283a 	ret

00009a5c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9a5c:	defffa04 	addi	sp,sp,-24
    9a60:	dfc00515 	stw	ra,20(sp)
    9a64:	df000415 	stw	fp,16(sp)
    9a68:	df000404 	addi	fp,sp,16
    9a6c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    9a70:	00800244 	movi	r2,9
    9a74:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    9a78:	e13ffd17 	ldw	r4,-12(fp)
    9a7c:	014003f4 	movhi	r5,15
    9a80:	29509004 	addi	r5,r5,16960
    9a84:	00088b80 	call	88b8 <__mulsi3>
    9a88:	0100bef4 	movhi	r4,763
    9a8c:	213c2004 	addi	r4,r4,-3968
    9a90:	100b883a 	mov	r5,r2
    9a94:	000b5e40 	call	b5e4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    9a98:	01200034 	movhi	r4,32768
    9a9c:	213fffc4 	addi	r4,r4,-1
    9aa0:	100b883a 	mov	r5,r2
    9aa4:	000b5e40 	call	b5e4 <__udivsi3>
    9aa8:	e13fff17 	ldw	r4,-4(fp)
    9aac:	100b883a 	mov	r5,r2
    9ab0:	000b5e40 	call	b5e4 <__udivsi3>
    9ab4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    9ab8:	e0bffe17 	ldw	r2,-8(fp)
    9abc:	10002a26 	beq	r2,zero,9b68 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    9ac0:	e03ffc15 	stw	zero,-16(fp)
    9ac4:	00001706 	br	9b24 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9ac8:	00a00034 	movhi	r2,32768
    9acc:	10bfffc4 	addi	r2,r2,-1
    9ad0:	10bfffc4 	addi	r2,r2,-1
    9ad4:	103ffe1e 	bne	r2,zero,9ad0 <_gp+0xffff4d44>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    9ad8:	e13ffd17 	ldw	r4,-12(fp)
    9adc:	014003f4 	movhi	r5,15
    9ae0:	29509004 	addi	r5,r5,16960
    9ae4:	00088b80 	call	88b8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9ae8:	0100bef4 	movhi	r4,763
    9aec:	213c2004 	addi	r4,r4,-3968
    9af0:	100b883a 	mov	r5,r2
    9af4:	000b5e40 	call	b5e4 <__udivsi3>
    9af8:	01200034 	movhi	r4,32768
    9afc:	213fffc4 	addi	r4,r4,-1
    9b00:	100b883a 	mov	r5,r2
    9b04:	000b5e40 	call	b5e4 <__udivsi3>
    9b08:	1007883a 	mov	r3,r2
    9b0c:	e0bfff17 	ldw	r2,-4(fp)
    9b10:	10c5c83a 	sub	r2,r2,r3
    9b14:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9b18:	e0bffc17 	ldw	r2,-16(fp)
    9b1c:	10800044 	addi	r2,r2,1
    9b20:	e0bffc15 	stw	r2,-16(fp)
    9b24:	e0fffc17 	ldw	r3,-16(fp)
    9b28:	e0bffe17 	ldw	r2,-8(fp)
    9b2c:	18bfe616 	blt	r3,r2,9ac8 <_gp+0xffff4d3c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9b30:	e13ffd17 	ldw	r4,-12(fp)
    9b34:	014003f4 	movhi	r5,15
    9b38:	29509004 	addi	r5,r5,16960
    9b3c:	00088b80 	call	88b8 <__mulsi3>
    9b40:	0100bef4 	movhi	r4,763
    9b44:	213c2004 	addi	r4,r4,-3968
    9b48:	100b883a 	mov	r5,r2
    9b4c:	000b5e40 	call	b5e4 <__udivsi3>
    9b50:	1009883a 	mov	r4,r2
    9b54:	e17fff17 	ldw	r5,-4(fp)
    9b58:	00088b80 	call	88b8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9b5c:	10bfffc4 	addi	r2,r2,-1
    9b60:	103ffe1e 	bne	r2,zero,9b5c <_gp+0xffff4dd0>
    9b64:	00000d06 	br	9b9c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9b68:	e13ffd17 	ldw	r4,-12(fp)
    9b6c:	014003f4 	movhi	r5,15
    9b70:	29509004 	addi	r5,r5,16960
    9b74:	00088b80 	call	88b8 <__mulsi3>
    9b78:	0100bef4 	movhi	r4,763
    9b7c:	213c2004 	addi	r4,r4,-3968
    9b80:	100b883a 	mov	r5,r2
    9b84:	000b5e40 	call	b5e4 <__udivsi3>
    9b88:	1009883a 	mov	r4,r2
    9b8c:	e17fff17 	ldw	r5,-4(fp)
    9b90:	00088b80 	call	88b8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9b94:	10bfffc4 	addi	r2,r2,-1
    9b98:	00bffe16 	blt	zero,r2,9b94 <_gp+0xffff4e08>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    9b9c:	0005883a 	mov	r2,zero
}
    9ba0:	e037883a 	mov	sp,fp
    9ba4:	dfc00117 	ldw	ra,4(sp)
    9ba8:	df000017 	ldw	fp,0(sp)
    9bac:	dec00204 	addi	sp,sp,8
    9bb0:	f800283a 	ret

00009bb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9bb4:	defffe04 	addi	sp,sp,-8
    9bb8:	dfc00115 	stw	ra,4(sp)
    9bbc:	df000015 	stw	fp,0(sp)
    9bc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9bc4:	00800074 	movhi	r2,1
    9bc8:	10b36e04 	addi	r2,r2,-12872
    9bcc:	10800017 	ldw	r2,0(r2)
    9bd0:	10000526 	beq	r2,zero,9be8 <alt_get_errno+0x34>
    9bd4:	00800074 	movhi	r2,1
    9bd8:	10b36e04 	addi	r2,r2,-12872
    9bdc:	10800017 	ldw	r2,0(r2)
    9be0:	103ee83a 	callr	r2
    9be4:	00000206 	br	9bf0 <alt_get_errno+0x3c>
    9be8:	00800074 	movhi	r2,1
    9bec:	10b90a04 	addi	r2,r2,-7128
}
    9bf0:	e037883a 	mov	sp,fp
    9bf4:	dfc00117 	ldw	ra,4(sp)
    9bf8:	df000017 	ldw	fp,0(sp)
    9bfc:	dec00204 	addi	sp,sp,8
    9c00:	f800283a 	ret

00009c04 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9c04:	defffb04 	addi	sp,sp,-20
    9c08:	dfc00415 	stw	ra,16(sp)
    9c0c:	df000315 	stw	fp,12(sp)
    9c10:	df000304 	addi	fp,sp,12
    9c14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9c18:	e0bfff17 	ldw	r2,-4(fp)
    9c1c:	10000816 	blt	r2,zero,9c40 <close+0x3c>
    9c20:	e13fff17 	ldw	r4,-4(fp)
    9c24:	01400304 	movi	r5,12
    9c28:	00088b80 	call	88b8 <__mulsi3>
    9c2c:	1007883a 	mov	r3,r2
    9c30:	00800074 	movhi	r2,1
    9c34:	10b30304 	addi	r2,r2,-13300
    9c38:	1885883a 	add	r2,r3,r2
    9c3c:	00000106 	br	9c44 <close+0x40>
    9c40:	0005883a 	mov	r2,zero
    9c44:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9c48:	e0bffd17 	ldw	r2,-12(fp)
    9c4c:	10001926 	beq	r2,zero,9cb4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9c50:	e0bffd17 	ldw	r2,-12(fp)
    9c54:	10800017 	ldw	r2,0(r2)
    9c58:	10800417 	ldw	r2,16(r2)
    9c5c:	10000626 	beq	r2,zero,9c78 <close+0x74>
    9c60:	e0bffd17 	ldw	r2,-12(fp)
    9c64:	10800017 	ldw	r2,0(r2)
    9c68:	10800417 	ldw	r2,16(r2)
    9c6c:	e13ffd17 	ldw	r4,-12(fp)
    9c70:	103ee83a 	callr	r2
    9c74:	00000106 	br	9c7c <close+0x78>
    9c78:	0005883a 	mov	r2,zero
    9c7c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9c80:	e13fff17 	ldw	r4,-4(fp)
    9c84:	000a5b80 	call	a5b8 <alt_release_fd>
    if (rval < 0)
    9c88:	e0bffe17 	ldw	r2,-8(fp)
    9c8c:	1000070e 	bge	r2,zero,9cac <close+0xa8>
    {
      ALT_ERRNO = -rval;
    9c90:	0009bb40 	call	9bb4 <alt_get_errno>
    9c94:	1007883a 	mov	r3,r2
    9c98:	e0bffe17 	ldw	r2,-8(fp)
    9c9c:	0085c83a 	sub	r2,zero,r2
    9ca0:	18800015 	stw	r2,0(r3)
      return -1;
    9ca4:	00bfffc4 	movi	r2,-1
    9ca8:	00000706 	br	9cc8 <close+0xc4>
    }
    return 0;
    9cac:	0005883a 	mov	r2,zero
    9cb0:	00000506 	br	9cc8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9cb4:	0009bb40 	call	9bb4 <alt_get_errno>
    9cb8:	1007883a 	mov	r3,r2
    9cbc:	00801444 	movi	r2,81
    9cc0:	18800015 	stw	r2,0(r3)
    return -1;
    9cc4:	00bfffc4 	movi	r2,-1
  }
}
    9cc8:	e037883a 	mov	sp,fp
    9ccc:	dfc00117 	ldw	ra,4(sp)
    9cd0:	df000017 	ldw	fp,0(sp)
    9cd4:	dec00204 	addi	sp,sp,8
    9cd8:	f800283a 	ret

00009cdc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9cdc:	deffff04 	addi	sp,sp,-4
    9ce0:	df000015 	stw	fp,0(sp)
    9ce4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9ce8:	e037883a 	mov	sp,fp
    9cec:	df000017 	ldw	fp,0(sp)
    9cf0:	dec00104 	addi	sp,sp,4
    9cf4:	f800283a 	ret

00009cf8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9cf8:	defffc04 	addi	sp,sp,-16
    9cfc:	df000315 	stw	fp,12(sp)
    9d00:	df000304 	addi	fp,sp,12
    9d04:	e13ffd15 	stw	r4,-12(fp)
    9d08:	e17ffe15 	stw	r5,-8(fp)
    9d0c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9d10:	e0bfff17 	ldw	r2,-4(fp)
}
    9d14:	e037883a 	mov	sp,fp
    9d18:	df000017 	ldw	fp,0(sp)
    9d1c:	dec00104 	addi	sp,sp,4
    9d20:	f800283a 	ret

00009d24 <alt_get_errno>:
    9d24:	defffe04 	addi	sp,sp,-8
    9d28:	dfc00115 	stw	ra,4(sp)
    9d2c:	df000015 	stw	fp,0(sp)
    9d30:	d839883a 	mov	fp,sp
    9d34:	00800074 	movhi	r2,1
    9d38:	10b36e04 	addi	r2,r2,-12872
    9d3c:	10800017 	ldw	r2,0(r2)
    9d40:	10000526 	beq	r2,zero,9d58 <alt_get_errno+0x34>
    9d44:	00800074 	movhi	r2,1
    9d48:	10b36e04 	addi	r2,r2,-12872
    9d4c:	10800017 	ldw	r2,0(r2)
    9d50:	103ee83a 	callr	r2
    9d54:	00000206 	br	9d60 <alt_get_errno+0x3c>
    9d58:	00800074 	movhi	r2,1
    9d5c:	10b90a04 	addi	r2,r2,-7128
    9d60:	e037883a 	mov	sp,fp
    9d64:	dfc00117 	ldw	ra,4(sp)
    9d68:	df000017 	ldw	fp,0(sp)
    9d6c:	dec00204 	addi	sp,sp,8
    9d70:	f800283a 	ret

00009d74 <alt_dev_llist_insert>:
    9d74:	defffa04 	addi	sp,sp,-24
    9d78:	dfc00515 	stw	ra,20(sp)
    9d7c:	df000415 	stw	fp,16(sp)
    9d80:	df000404 	addi	fp,sp,16
    9d84:	e13ffe15 	stw	r4,-8(fp)
    9d88:	e17fff15 	stw	r5,-4(fp)
    9d8c:	e0bffe17 	ldw	r2,-8(fp)
    9d90:	10000326 	beq	r2,zero,9da0 <alt_dev_llist_insert+0x2c>
    9d94:	e0bffe17 	ldw	r2,-8(fp)
    9d98:	10800217 	ldw	r2,8(r2)
    9d9c:	1000061e 	bne	r2,zero,9db8 <alt_dev_llist_insert+0x44>
    9da0:	0009d240 	call	9d24 <alt_get_errno>
    9da4:	1007883a 	mov	r3,r2
    9da8:	00800584 	movi	r2,22
    9dac:	18800015 	stw	r2,0(r3)
    9db0:	00bffa84 	movi	r2,-22
    9db4:	00001306 	br	9e04 <alt_dev_llist_insert+0x90>
    9db8:	e0bffe17 	ldw	r2,-8(fp)
    9dbc:	e0ffff17 	ldw	r3,-4(fp)
    9dc0:	e0fffc15 	stw	r3,-16(fp)
    9dc4:	e0bffd15 	stw	r2,-12(fp)
    9dc8:	e0bffd17 	ldw	r2,-12(fp)
    9dcc:	e0fffc17 	ldw	r3,-16(fp)
    9dd0:	10c00115 	stw	r3,4(r2)
    9dd4:	e0bffc17 	ldw	r2,-16(fp)
    9dd8:	10c00017 	ldw	r3,0(r2)
    9ddc:	e0bffd17 	ldw	r2,-12(fp)
    9de0:	10c00015 	stw	r3,0(r2)
    9de4:	e0bffc17 	ldw	r2,-16(fp)
    9de8:	10800017 	ldw	r2,0(r2)
    9dec:	e0fffd17 	ldw	r3,-12(fp)
    9df0:	10c00115 	stw	r3,4(r2)
    9df4:	e0bffc17 	ldw	r2,-16(fp)
    9df8:	e0fffd17 	ldw	r3,-12(fp)
    9dfc:	10c00015 	stw	r3,0(r2)
    9e00:	0005883a 	mov	r2,zero
    9e04:	e037883a 	mov	sp,fp
    9e08:	dfc00117 	ldw	ra,4(sp)
    9e0c:	df000017 	ldw	fp,0(sp)
    9e10:	dec00204 	addi	sp,sp,8
    9e14:	f800283a 	ret

00009e18 <_do_ctors>:
    9e18:	defffd04 	addi	sp,sp,-12
    9e1c:	dfc00215 	stw	ra,8(sp)
    9e20:	df000115 	stw	fp,4(sp)
    9e24:	df000104 	addi	fp,sp,4
    9e28:	00800074 	movhi	r2,1
    9e2c:	10ad8904 	addi	r2,r2,-18908
    9e30:	e0bfff15 	stw	r2,-4(fp)
    9e34:	00000606 	br	9e50 <_do_ctors+0x38>
    9e38:	e0bfff17 	ldw	r2,-4(fp)
    9e3c:	10800017 	ldw	r2,0(r2)
    9e40:	103ee83a 	callr	r2
    9e44:	e0bfff17 	ldw	r2,-4(fp)
    9e48:	10bfff04 	addi	r2,r2,-4
    9e4c:	e0bfff15 	stw	r2,-4(fp)
    9e50:	e0ffff17 	ldw	r3,-4(fp)
    9e54:	00800074 	movhi	r2,1
    9e58:	10ad8a04 	addi	r2,r2,-18904
    9e5c:	18bff62e 	bgeu	r3,r2,9e38 <_gp+0xffff50ac>
    9e60:	e037883a 	mov	sp,fp
    9e64:	dfc00117 	ldw	ra,4(sp)
    9e68:	df000017 	ldw	fp,0(sp)
    9e6c:	dec00204 	addi	sp,sp,8
    9e70:	f800283a 	ret

00009e74 <_do_dtors>:
    9e74:	defffd04 	addi	sp,sp,-12
    9e78:	dfc00215 	stw	ra,8(sp)
    9e7c:	df000115 	stw	fp,4(sp)
    9e80:	df000104 	addi	fp,sp,4
    9e84:	00800074 	movhi	r2,1
    9e88:	10ad8904 	addi	r2,r2,-18908
    9e8c:	e0bfff15 	stw	r2,-4(fp)
    9e90:	00000606 	br	9eac <_do_dtors+0x38>
    9e94:	e0bfff17 	ldw	r2,-4(fp)
    9e98:	10800017 	ldw	r2,0(r2)
    9e9c:	103ee83a 	callr	r2
    9ea0:	e0bfff17 	ldw	r2,-4(fp)
    9ea4:	10bfff04 	addi	r2,r2,-4
    9ea8:	e0bfff15 	stw	r2,-4(fp)
    9eac:	e0ffff17 	ldw	r3,-4(fp)
    9eb0:	00800074 	movhi	r2,1
    9eb4:	10ad8a04 	addi	r2,r2,-18904
    9eb8:	18bff62e 	bgeu	r3,r2,9e94 <_gp+0xffff5108>
    9ebc:	e037883a 	mov	sp,fp
    9ec0:	dfc00117 	ldw	ra,4(sp)
    9ec4:	df000017 	ldw	fp,0(sp)
    9ec8:	dec00204 	addi	sp,sp,8
    9ecc:	f800283a 	ret

00009ed0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9ed0:	deffff04 	addi	sp,sp,-4
    9ed4:	df000015 	stw	fp,0(sp)
    9ed8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    9edc:	e037883a 	mov	sp,fp
    9ee0:	df000017 	ldw	fp,0(sp)
    9ee4:	dec00104 	addi	sp,sp,4
    9ee8:	f800283a 	ret

00009eec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9eec:	defff904 	addi	sp,sp,-28
    9ef0:	dfc00615 	stw	ra,24(sp)
    9ef4:	df000515 	stw	fp,20(sp)
    9ef8:	df000504 	addi	fp,sp,20
    9efc:	e13ffc15 	stw	r4,-16(fp)
    9f00:	e17ffd15 	stw	r5,-12(fp)
    9f04:	e1bffe15 	stw	r6,-8(fp)
    9f08:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9f0c:	e0800217 	ldw	r2,8(fp)
    9f10:	d8800015 	stw	r2,0(sp)
    9f14:	e13ffc17 	ldw	r4,-16(fp)
    9f18:	e17ffd17 	ldw	r5,-12(fp)
    9f1c:	e1bffe17 	ldw	r6,-8(fp)
    9f20:	e1ffff17 	ldw	r7,-4(fp)
    9f24:	000a0cc0 	call	a0cc <alt_iic_isr_register>
}  
    9f28:	e037883a 	mov	sp,fp
    9f2c:	dfc00117 	ldw	ra,4(sp)
    9f30:	df000017 	ldw	fp,0(sp)
    9f34:	dec00204 	addi	sp,sp,8
    9f38:	f800283a 	ret

00009f3c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9f3c:	defff904 	addi	sp,sp,-28
    9f40:	df000615 	stw	fp,24(sp)
    9f44:	df000604 	addi	fp,sp,24
    9f48:	e13ffe15 	stw	r4,-8(fp)
    9f4c:	e17fff15 	stw	r5,-4(fp)
    9f50:	e0bfff17 	ldw	r2,-4(fp)
    9f54:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f58:	0005303a 	rdctl	r2,status
    9f5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f60:	e0fffb17 	ldw	r3,-20(fp)
    9f64:	00bfff84 	movi	r2,-2
    9f68:	1884703a 	and	r2,r3,r2
    9f6c:	1001703a 	wrctl	status,r2
  
  return context;
    9f70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9f74:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    9f78:	e0bffa17 	ldw	r2,-24(fp)
    9f7c:	00c00044 	movi	r3,1
    9f80:	1884983a 	sll	r2,r3,r2
    9f84:	1007883a 	mov	r3,r2
    9f88:	00800074 	movhi	r2,1
    9f8c:	10b91404 	addi	r2,r2,-7088
    9f90:	10800017 	ldw	r2,0(r2)
    9f94:	1886b03a 	or	r3,r3,r2
    9f98:	00800074 	movhi	r2,1
    9f9c:	10b91404 	addi	r2,r2,-7088
    9fa0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9fa4:	00800074 	movhi	r2,1
    9fa8:	10b91404 	addi	r2,r2,-7088
    9fac:	10800017 	ldw	r2,0(r2)
    9fb0:	100170fa 	wrctl	ienable,r2
    9fb4:	e0bffc17 	ldw	r2,-16(fp)
    9fb8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9fbc:	e0bffd17 	ldw	r2,-12(fp)
    9fc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9fc4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    9fc8:	0001883a 	nop
}
    9fcc:	e037883a 	mov	sp,fp
    9fd0:	df000017 	ldw	fp,0(sp)
    9fd4:	dec00104 	addi	sp,sp,4
    9fd8:	f800283a 	ret

00009fdc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9fdc:	defff904 	addi	sp,sp,-28
    9fe0:	df000615 	stw	fp,24(sp)
    9fe4:	df000604 	addi	fp,sp,24
    9fe8:	e13ffe15 	stw	r4,-8(fp)
    9fec:	e17fff15 	stw	r5,-4(fp)
    9ff0:	e0bfff17 	ldw	r2,-4(fp)
    9ff4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9ff8:	0005303a 	rdctl	r2,status
    9ffc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a000:	e0fffb17 	ldw	r3,-20(fp)
    a004:	00bfff84 	movi	r2,-2
    a008:	1884703a 	and	r2,r3,r2
    a00c:	1001703a 	wrctl	status,r2
  
  return context;
    a010:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a014:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    a018:	e0bffa17 	ldw	r2,-24(fp)
    a01c:	00c00044 	movi	r3,1
    a020:	1884983a 	sll	r2,r3,r2
    a024:	0084303a 	nor	r2,zero,r2
    a028:	1007883a 	mov	r3,r2
    a02c:	00800074 	movhi	r2,1
    a030:	10b91404 	addi	r2,r2,-7088
    a034:	10800017 	ldw	r2,0(r2)
    a038:	1886703a 	and	r3,r3,r2
    a03c:	00800074 	movhi	r2,1
    a040:	10b91404 	addi	r2,r2,-7088
    a044:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a048:	00800074 	movhi	r2,1
    a04c:	10b91404 	addi	r2,r2,-7088
    a050:	10800017 	ldw	r2,0(r2)
    a054:	100170fa 	wrctl	ienable,r2
    a058:	e0bffc17 	ldw	r2,-16(fp)
    a05c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a060:	e0bffd17 	ldw	r2,-12(fp)
    a064:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a068:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    a06c:	0001883a 	nop
}
    a070:	e037883a 	mov	sp,fp
    a074:	df000017 	ldw	fp,0(sp)
    a078:	dec00104 	addi	sp,sp,4
    a07c:	f800283a 	ret

0000a080 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    a080:	defffc04 	addi	sp,sp,-16
    a084:	df000315 	stw	fp,12(sp)
    a088:	df000304 	addi	fp,sp,12
    a08c:	e13ffe15 	stw	r4,-8(fp)
    a090:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a094:	000530fa 	rdctl	r2,ienable
    a098:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a09c:	e0bfff17 	ldw	r2,-4(fp)
    a0a0:	00c00044 	movi	r3,1
    a0a4:	1884983a 	sll	r2,r3,r2
    a0a8:	1007883a 	mov	r3,r2
    a0ac:	e0bffd17 	ldw	r2,-12(fp)
    a0b0:	1884703a 	and	r2,r3,r2
    a0b4:	1004c03a 	cmpne	r2,r2,zero
    a0b8:	10803fcc 	andi	r2,r2,255
}
    a0bc:	e037883a 	mov	sp,fp
    a0c0:	df000017 	ldw	fp,0(sp)
    a0c4:	dec00104 	addi	sp,sp,4
    a0c8:	f800283a 	ret

0000a0cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a0cc:	defff504 	addi	sp,sp,-44
    a0d0:	dfc00a15 	stw	ra,40(sp)
    a0d4:	df000915 	stw	fp,36(sp)
    a0d8:	df000904 	addi	fp,sp,36
    a0dc:	e13ffc15 	stw	r4,-16(fp)
    a0e0:	e17ffd15 	stw	r5,-12(fp)
    a0e4:	e1bffe15 	stw	r6,-8(fp)
    a0e8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    a0ec:	00bffa84 	movi	r2,-22
    a0f0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    a0f4:	e0bffd17 	ldw	r2,-12(fp)
    a0f8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a0fc:	e0bff817 	ldw	r2,-32(fp)
    a100:	10800808 	cmpgei	r2,r2,32
    a104:	1000271e 	bne	r2,zero,a1a4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a108:	0005303a 	rdctl	r2,status
    a10c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a110:	e0fffa17 	ldw	r3,-24(fp)
    a114:	00bfff84 	movi	r2,-2
    a118:	1884703a 	and	r2,r3,r2
    a11c:	1001703a 	wrctl	status,r2
  
  return context;
    a120:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a124:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    a128:	00800074 	movhi	r2,1
    a12c:	10b91604 	addi	r2,r2,-7080
    a130:	e0fff817 	ldw	r3,-32(fp)
    a134:	180690fa 	slli	r3,r3,3
    a138:	10c5883a 	add	r2,r2,r3
    a13c:	e0fffe17 	ldw	r3,-8(fp)
    a140:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    a144:	00800074 	movhi	r2,1
    a148:	10b91604 	addi	r2,r2,-7080
    a14c:	e0fff817 	ldw	r3,-32(fp)
    a150:	180690fa 	slli	r3,r3,3
    a154:	18c00104 	addi	r3,r3,4
    a158:	10c5883a 	add	r2,r2,r3
    a15c:	e0ffff17 	ldw	r3,-4(fp)
    a160:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a164:	e0bffe17 	ldw	r2,-8(fp)
    a168:	10000526 	beq	r2,zero,a180 <alt_iic_isr_register+0xb4>
    a16c:	e0bff817 	ldw	r2,-32(fp)
    a170:	e13ffc17 	ldw	r4,-16(fp)
    a174:	100b883a 	mov	r5,r2
    a178:	0009f3c0 	call	9f3c <alt_ic_irq_enable>
    a17c:	00000406 	br	a190 <alt_iic_isr_register+0xc4>
    a180:	e0bff817 	ldw	r2,-32(fp)
    a184:	e13ffc17 	ldw	r4,-16(fp)
    a188:	100b883a 	mov	r5,r2
    a18c:	0009fdc0 	call	9fdc <alt_ic_irq_disable>
    a190:	e0bff715 	stw	r2,-36(fp)
    a194:	e0bff917 	ldw	r2,-28(fp)
    a198:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a19c:	e0bffb17 	ldw	r2,-20(fp)
    a1a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    a1a4:	e0bff717 	ldw	r2,-36(fp)
}
    a1a8:	e037883a 	mov	sp,fp
    a1ac:	dfc00117 	ldw	ra,4(sp)
    a1b0:	df000017 	ldw	fp,0(sp)
    a1b4:	dec00204 	addi	sp,sp,8
    a1b8:	f800283a 	ret

0000a1bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a1bc:	defff804 	addi	sp,sp,-32
    a1c0:	dfc00715 	stw	ra,28(sp)
    a1c4:	df000615 	stw	fp,24(sp)
    a1c8:	dc000515 	stw	r16,20(sp)
    a1cc:	df000604 	addi	fp,sp,24
    a1d0:	e13ffb15 	stw	r4,-20(fp)
    a1d4:	e17ffc15 	stw	r5,-16(fp)
    a1d8:	e1bffd15 	stw	r6,-12(fp)
    a1dc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    a1e0:	e13ffc17 	ldw	r4,-16(fp)
    a1e4:	e17ffd17 	ldw	r5,-12(fp)
    a1e8:	e1bffe17 	ldw	r6,-8(fp)
    a1ec:	000a4580 	call	a458 <open>
    a1f0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    a1f4:	e0bffa17 	ldw	r2,-24(fp)
    a1f8:	10002216 	blt	r2,zero,a284 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    a1fc:	04000074 	movhi	r16,1
    a200:	84330304 	addi	r16,r16,-13300
    a204:	e0bffa17 	ldw	r2,-24(fp)
    a208:	1009883a 	mov	r4,r2
    a20c:	01400304 	movi	r5,12
    a210:	00088b80 	call	88b8 <__mulsi3>
    a214:	8085883a 	add	r2,r16,r2
    a218:	10c00017 	ldw	r3,0(r2)
    a21c:	e0bffb17 	ldw	r2,-20(fp)
    a220:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a224:	04000074 	movhi	r16,1
    a228:	84330304 	addi	r16,r16,-13300
    a22c:	e0bffa17 	ldw	r2,-24(fp)
    a230:	1009883a 	mov	r4,r2
    a234:	01400304 	movi	r5,12
    a238:	00088b80 	call	88b8 <__mulsi3>
    a23c:	10800104 	addi	r2,r2,4
    a240:	8085883a 	add	r2,r16,r2
    a244:	10c00017 	ldw	r3,0(r2)
    a248:	e0bffb17 	ldw	r2,-20(fp)
    a24c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a250:	04000074 	movhi	r16,1
    a254:	84330304 	addi	r16,r16,-13300
    a258:	e0bffa17 	ldw	r2,-24(fp)
    a25c:	1009883a 	mov	r4,r2
    a260:	01400304 	movi	r5,12
    a264:	00088b80 	call	88b8 <__mulsi3>
    a268:	10800204 	addi	r2,r2,8
    a26c:	8085883a 	add	r2,r16,r2
    a270:	10c00017 	ldw	r3,0(r2)
    a274:	e0bffb17 	ldw	r2,-20(fp)
    a278:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a27c:	e13ffa17 	ldw	r4,-24(fp)
    a280:	000a5b80 	call	a5b8 <alt_release_fd>
  }
} 
    a284:	e6ffff04 	addi	sp,fp,-4
    a288:	dfc00217 	ldw	ra,8(sp)
    a28c:	df000117 	ldw	fp,4(sp)
    a290:	dc000017 	ldw	r16,0(sp)
    a294:	dec00304 	addi	sp,sp,12
    a298:	f800283a 	ret

0000a29c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a29c:	defffb04 	addi	sp,sp,-20
    a2a0:	dfc00415 	stw	ra,16(sp)
    a2a4:	df000315 	stw	fp,12(sp)
    a2a8:	df000304 	addi	fp,sp,12
    a2ac:	e13ffd15 	stw	r4,-12(fp)
    a2b0:	e17ffe15 	stw	r5,-8(fp)
    a2b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a2b8:	01000074 	movhi	r4,1
    a2bc:	21330604 	addi	r4,r4,-13288
    a2c0:	e17ffd17 	ldw	r5,-12(fp)
    a2c4:	01800044 	movi	r6,1
    a2c8:	01c07fc4 	movi	r7,511
    a2cc:	000a1bc0 	call	a1bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a2d0:	01000074 	movhi	r4,1
    a2d4:	21330304 	addi	r4,r4,-13300
    a2d8:	e17ffe17 	ldw	r5,-8(fp)
    a2dc:	000d883a 	mov	r6,zero
    a2e0:	01c07fc4 	movi	r7,511
    a2e4:	000a1bc0 	call	a1bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a2e8:	01000074 	movhi	r4,1
    a2ec:	21330904 	addi	r4,r4,-13276
    a2f0:	e17fff17 	ldw	r5,-4(fp)
    a2f4:	01800044 	movi	r6,1
    a2f8:	01c07fc4 	movi	r7,511
    a2fc:	000a1bc0 	call	a1bc <alt_open_fd>
}  
    a300:	e037883a 	mov	sp,fp
    a304:	dfc00117 	ldw	ra,4(sp)
    a308:	df000017 	ldw	fp,0(sp)
    a30c:	dec00204 	addi	sp,sp,8
    a310:	f800283a 	ret

0000a314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a314:	defffe04 	addi	sp,sp,-8
    a318:	dfc00115 	stw	ra,4(sp)
    a31c:	df000015 	stw	fp,0(sp)
    a320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a324:	00800074 	movhi	r2,1
    a328:	10b36e04 	addi	r2,r2,-12872
    a32c:	10800017 	ldw	r2,0(r2)
    a330:	10000526 	beq	r2,zero,a348 <alt_get_errno+0x34>
    a334:	00800074 	movhi	r2,1
    a338:	10b36e04 	addi	r2,r2,-12872
    a33c:	10800017 	ldw	r2,0(r2)
    a340:	103ee83a 	callr	r2
    a344:	00000206 	br	a350 <alt_get_errno+0x3c>
    a348:	00800074 	movhi	r2,1
    a34c:	10b90a04 	addi	r2,r2,-7128
}
    a350:	e037883a 	mov	sp,fp
    a354:	dfc00117 	ldw	ra,4(sp)
    a358:	df000017 	ldw	fp,0(sp)
    a35c:	dec00204 	addi	sp,sp,8
    a360:	f800283a 	ret

0000a364 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    a364:	defffb04 	addi	sp,sp,-20
    a368:	dfc00415 	stw	ra,16(sp)
    a36c:	df000315 	stw	fp,12(sp)
    a370:	dc000215 	stw	r16,8(sp)
    a374:	df000304 	addi	fp,sp,12
    a378:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    a37c:	e0bffe17 	ldw	r2,-8(fp)
    a380:	10800217 	ldw	r2,8(r2)
    a384:	10d00034 	orhi	r3,r2,16384
    a388:	e0bffe17 	ldw	r2,-8(fp)
    a38c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a390:	e03ffd15 	stw	zero,-12(fp)
    a394:	00002306 	br	a424 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a398:	04000074 	movhi	r16,1
    a39c:	84330304 	addi	r16,r16,-13300
    a3a0:	e0bffd17 	ldw	r2,-12(fp)
    a3a4:	1009883a 	mov	r4,r2
    a3a8:	01400304 	movi	r5,12
    a3ac:	00088b80 	call	88b8 <__mulsi3>
    a3b0:	8085883a 	add	r2,r16,r2
    a3b4:	10c00017 	ldw	r3,0(r2)
    a3b8:	e0bffe17 	ldw	r2,-8(fp)
    a3bc:	10800017 	ldw	r2,0(r2)
    a3c0:	1880151e 	bne	r3,r2,a418 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a3c4:	04000074 	movhi	r16,1
    a3c8:	84330304 	addi	r16,r16,-13300
    a3cc:	e0bffd17 	ldw	r2,-12(fp)
    a3d0:	1009883a 	mov	r4,r2
    a3d4:	01400304 	movi	r5,12
    a3d8:	00088b80 	call	88b8 <__mulsi3>
    a3dc:	10800204 	addi	r2,r2,8
    a3e0:	8085883a 	add	r2,r16,r2
    a3e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a3e8:	10000b0e 	bge	r2,zero,a418 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    a3ec:	e13ffd17 	ldw	r4,-12(fp)
    a3f0:	01400304 	movi	r5,12
    a3f4:	00088b80 	call	88b8 <__mulsi3>
    a3f8:	1007883a 	mov	r3,r2
    a3fc:	00800074 	movhi	r2,1
    a400:	10b30304 	addi	r2,r2,-13300
    a404:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a408:	e0bffe17 	ldw	r2,-8(fp)
    a40c:	18800226 	beq	r3,r2,a418 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a410:	00bffcc4 	movi	r2,-13
    a414:	00000a06 	br	a440 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a418:	e0bffd17 	ldw	r2,-12(fp)
    a41c:	10800044 	addi	r2,r2,1
    a420:	e0bffd15 	stw	r2,-12(fp)
    a424:	00800074 	movhi	r2,1
    a428:	10b36d04 	addi	r2,r2,-12876
    a42c:	10800017 	ldw	r2,0(r2)
    a430:	1007883a 	mov	r3,r2
    a434:	e0bffd17 	ldw	r2,-12(fp)
    a438:	18bfd72e 	bgeu	r3,r2,a398 <_gp+0xffff560c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a43c:	0005883a 	mov	r2,zero
}
    a440:	e6ffff04 	addi	sp,fp,-4
    a444:	dfc00217 	ldw	ra,8(sp)
    a448:	df000117 	ldw	fp,4(sp)
    a44c:	dc000017 	ldw	r16,0(sp)
    a450:	dec00304 	addi	sp,sp,12
    a454:	f800283a 	ret

0000a458 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a458:	defff604 	addi	sp,sp,-40
    a45c:	dfc00915 	stw	ra,36(sp)
    a460:	df000815 	stw	fp,32(sp)
    a464:	df000804 	addi	fp,sp,32
    a468:	e13ffd15 	stw	r4,-12(fp)
    a46c:	e17ffe15 	stw	r5,-8(fp)
    a470:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a474:	00bfffc4 	movi	r2,-1
    a478:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a47c:	00bffb44 	movi	r2,-19
    a480:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a484:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a488:	e13ffd17 	ldw	r4,-12(fp)
    a48c:	01400074 	movhi	r5,1
    a490:	29736b04 	addi	r5,r5,-12884
    a494:	000a6580 	call	a658 <alt_find_dev>
    a498:	e0bff815 	stw	r2,-32(fp)
    a49c:	e0bff817 	ldw	r2,-32(fp)
    a4a0:	1000051e 	bne	r2,zero,a4b8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a4a4:	e13ffd17 	ldw	r4,-12(fp)
    a4a8:	000a6e80 	call	a6e8 <alt_find_file>
    a4ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a4b0:	00800044 	movi	r2,1
    a4b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a4b8:	e0bff817 	ldw	r2,-32(fp)
    a4bc:	10002b26 	beq	r2,zero,a56c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a4c0:	e13ff817 	ldw	r4,-32(fp)
    a4c4:	000a7fc0 	call	a7fc <alt_get_fd>
    a4c8:	e0bff915 	stw	r2,-28(fp)
    a4cc:	e0bff917 	ldw	r2,-28(fp)
    a4d0:	1000030e 	bge	r2,zero,a4e0 <open+0x88>
    {
      status = index;
    a4d4:	e0bff917 	ldw	r2,-28(fp)
    a4d8:	e0bffa15 	stw	r2,-24(fp)
    a4dc:	00002506 	br	a574 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    a4e0:	e13ff917 	ldw	r4,-28(fp)
    a4e4:	01400304 	movi	r5,12
    a4e8:	00088b80 	call	88b8 <__mulsi3>
    a4ec:	1007883a 	mov	r3,r2
    a4f0:	00800074 	movhi	r2,1
    a4f4:	10b30304 	addi	r2,r2,-13300
    a4f8:	1885883a 	add	r2,r3,r2
    a4fc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a500:	e0fffe17 	ldw	r3,-8(fp)
    a504:	00900034 	movhi	r2,16384
    a508:	10bfffc4 	addi	r2,r2,-1
    a50c:	1886703a 	and	r3,r3,r2
    a510:	e0bffc17 	ldw	r2,-16(fp)
    a514:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a518:	e0bffb17 	ldw	r2,-20(fp)
    a51c:	1000051e 	bne	r2,zero,a534 <open+0xdc>
    a520:	e13ffc17 	ldw	r4,-16(fp)
    a524:	000a3640 	call	a364 <alt_file_locked>
    a528:	e0bffa15 	stw	r2,-24(fp)
    a52c:	e0bffa17 	ldw	r2,-24(fp)
    a530:	10001016 	blt	r2,zero,a574 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a534:	e0bff817 	ldw	r2,-32(fp)
    a538:	10800317 	ldw	r2,12(r2)
    a53c:	10000826 	beq	r2,zero,a560 <open+0x108>
    a540:	e0bff817 	ldw	r2,-32(fp)
    a544:	10800317 	ldw	r2,12(r2)
    a548:	e13ffc17 	ldw	r4,-16(fp)
    a54c:	e17ffd17 	ldw	r5,-12(fp)
    a550:	e1bffe17 	ldw	r6,-8(fp)
    a554:	e1ffff17 	ldw	r7,-4(fp)
    a558:	103ee83a 	callr	r2
    a55c:	00000106 	br	a564 <open+0x10c>
    a560:	0005883a 	mov	r2,zero
    a564:	e0bffa15 	stw	r2,-24(fp)
    a568:	00000206 	br	a574 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a56c:	00bffb44 	movi	r2,-19
    a570:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a574:	e0bffa17 	ldw	r2,-24(fp)
    a578:	1000090e 	bge	r2,zero,a5a0 <open+0x148>
  {
    alt_release_fd (index);  
    a57c:	e13ff917 	ldw	r4,-28(fp)
    a580:	000a5b80 	call	a5b8 <alt_release_fd>
    ALT_ERRNO = -status;
    a584:	000a3140 	call	a314 <alt_get_errno>
    a588:	1007883a 	mov	r3,r2
    a58c:	e0bffa17 	ldw	r2,-24(fp)
    a590:	0085c83a 	sub	r2,zero,r2
    a594:	18800015 	stw	r2,0(r3)
    return -1;
    a598:	00bfffc4 	movi	r2,-1
    a59c:	00000106 	br	a5a4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    a5a0:	e0bff917 	ldw	r2,-28(fp)
}
    a5a4:	e037883a 	mov	sp,fp
    a5a8:	dfc00117 	ldw	ra,4(sp)
    a5ac:	df000017 	ldw	fp,0(sp)
    a5b0:	dec00204 	addi	sp,sp,8
    a5b4:	f800283a 	ret

0000a5b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a5b8:	defffc04 	addi	sp,sp,-16
    a5bc:	dfc00315 	stw	ra,12(sp)
    a5c0:	df000215 	stw	fp,8(sp)
    a5c4:	dc000115 	stw	r16,4(sp)
    a5c8:	df000204 	addi	fp,sp,8
    a5cc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    a5d0:	e0bffe17 	ldw	r2,-8(fp)
    a5d4:	108000d0 	cmplti	r2,r2,3
    a5d8:	1000111e 	bne	r2,zero,a620 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    a5dc:	04000074 	movhi	r16,1
    a5e0:	84330304 	addi	r16,r16,-13300
    a5e4:	e0bffe17 	ldw	r2,-8(fp)
    a5e8:	1009883a 	mov	r4,r2
    a5ec:	01400304 	movi	r5,12
    a5f0:	00088b80 	call	88b8 <__mulsi3>
    a5f4:	10800204 	addi	r2,r2,8
    a5f8:	8085883a 	add	r2,r16,r2
    a5fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a600:	04000074 	movhi	r16,1
    a604:	84330304 	addi	r16,r16,-13300
    a608:	e0bffe17 	ldw	r2,-8(fp)
    a60c:	1009883a 	mov	r4,r2
    a610:	01400304 	movi	r5,12
    a614:	00088b80 	call	88b8 <__mulsi3>
    a618:	8085883a 	add	r2,r16,r2
    a61c:	10000015 	stw	zero,0(r2)
  }
}
    a620:	e6ffff04 	addi	sp,fp,-4
    a624:	dfc00217 	ldw	ra,8(sp)
    a628:	df000117 	ldw	fp,4(sp)
    a62c:	dc000017 	ldw	r16,0(sp)
    a630:	dec00304 	addi	sp,sp,12
    a634:	f800283a 	ret

0000a638 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a638:	deffff04 	addi	sp,sp,-4
    a63c:	df000015 	stw	fp,0(sp)
    a640:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a644:	000170fa 	wrctl	ienable,zero
}
    a648:	e037883a 	mov	sp,fp
    a64c:	df000017 	ldw	fp,0(sp)
    a650:	dec00104 	addi	sp,sp,4
    a654:	f800283a 	ret

0000a658 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a658:	defffa04 	addi	sp,sp,-24
    a65c:	dfc00515 	stw	ra,20(sp)
    a660:	df000415 	stw	fp,16(sp)
    a664:	df000404 	addi	fp,sp,16
    a668:	e13ffe15 	stw	r4,-8(fp)
    a66c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a670:	e0bfff17 	ldw	r2,-4(fp)
    a674:	10800017 	ldw	r2,0(r2)
    a678:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a67c:	e13ffe17 	ldw	r4,-8(fp)
    a680:	000ab6c0 	call	ab6c <strlen>
    a684:	10800044 	addi	r2,r2,1
    a688:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a68c:	00000d06 	br	a6c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a690:	e0bffc17 	ldw	r2,-16(fp)
    a694:	10c00217 	ldw	r3,8(r2)
    a698:	e0bffd17 	ldw	r2,-12(fp)
    a69c:	1809883a 	mov	r4,r3
    a6a0:	e17ffe17 	ldw	r5,-8(fp)
    a6a4:	100d883a 	mov	r6,r2
    a6a8:	000a9b80 	call	a9b8 <memcmp>
    a6ac:	1000021e 	bne	r2,zero,a6b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a6b0:	e0bffc17 	ldw	r2,-16(fp)
    a6b4:	00000706 	br	a6d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a6b8:	e0bffc17 	ldw	r2,-16(fp)
    a6bc:	10800017 	ldw	r2,0(r2)
    a6c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a6c4:	e0fffc17 	ldw	r3,-16(fp)
    a6c8:	e0bfff17 	ldw	r2,-4(fp)
    a6cc:	18bff01e 	bne	r3,r2,a690 <_gp+0xffff5904>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a6d0:	0005883a 	mov	r2,zero
}
    a6d4:	e037883a 	mov	sp,fp
    a6d8:	dfc00117 	ldw	ra,4(sp)
    a6dc:	df000017 	ldw	fp,0(sp)
    a6e0:	dec00204 	addi	sp,sp,8
    a6e4:	f800283a 	ret

0000a6e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a6e8:	defffb04 	addi	sp,sp,-20
    a6ec:	dfc00415 	stw	ra,16(sp)
    a6f0:	df000315 	stw	fp,12(sp)
    a6f4:	df000304 	addi	fp,sp,12
    a6f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a6fc:	00800074 	movhi	r2,1
    a700:	10b36904 	addi	r2,r2,-12892
    a704:	10800017 	ldw	r2,0(r2)
    a708:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a70c:	00003106 	br	a7d4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    a710:	e0bffd17 	ldw	r2,-12(fp)
    a714:	10800217 	ldw	r2,8(r2)
    a718:	1009883a 	mov	r4,r2
    a71c:	000ab6c0 	call	ab6c <strlen>
    a720:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a724:	e0bffd17 	ldw	r2,-12(fp)
    a728:	10c00217 	ldw	r3,8(r2)
    a72c:	e0bffe17 	ldw	r2,-8(fp)
    a730:	10bfffc4 	addi	r2,r2,-1
    a734:	1885883a 	add	r2,r3,r2
    a738:	10800003 	ldbu	r2,0(r2)
    a73c:	10803fcc 	andi	r2,r2,255
    a740:	1080201c 	xori	r2,r2,128
    a744:	10bfe004 	addi	r2,r2,-128
    a748:	10800bd8 	cmpnei	r2,r2,47
    a74c:	1000031e 	bne	r2,zero,a75c <alt_find_file+0x74>
    {
      len -= 1;
    a750:	e0bffe17 	ldw	r2,-8(fp)
    a754:	10bfffc4 	addi	r2,r2,-1
    a758:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a75c:	e0bffe17 	ldw	r2,-8(fp)
    a760:	e0ffff17 	ldw	r3,-4(fp)
    a764:	1885883a 	add	r2,r3,r2
    a768:	10800003 	ldbu	r2,0(r2)
    a76c:	10803fcc 	andi	r2,r2,255
    a770:	1080201c 	xori	r2,r2,128
    a774:	10bfe004 	addi	r2,r2,-128
    a778:	10800be0 	cmpeqi	r2,r2,47
    a77c:	1000081e 	bne	r2,zero,a7a0 <alt_find_file+0xb8>
    a780:	e0bffe17 	ldw	r2,-8(fp)
    a784:	e0ffff17 	ldw	r3,-4(fp)
    a788:	1885883a 	add	r2,r3,r2
    a78c:	10800003 	ldbu	r2,0(r2)
    a790:	10803fcc 	andi	r2,r2,255
    a794:	1080201c 	xori	r2,r2,128
    a798:	10bfe004 	addi	r2,r2,-128
    a79c:	10000a1e 	bne	r2,zero,a7c8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    a7a0:	e0bffd17 	ldw	r2,-12(fp)
    a7a4:	10c00217 	ldw	r3,8(r2)
    a7a8:	e0bffe17 	ldw	r2,-8(fp)
    a7ac:	1809883a 	mov	r4,r3
    a7b0:	e17fff17 	ldw	r5,-4(fp)
    a7b4:	100d883a 	mov	r6,r2
    a7b8:	000a9b80 	call	a9b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a7bc:	1000021e 	bne	r2,zero,a7c8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a7c0:	e0bffd17 	ldw	r2,-12(fp)
    a7c4:	00000806 	br	a7e8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    a7c8:	e0bffd17 	ldw	r2,-12(fp)
    a7cc:	10800017 	ldw	r2,0(r2)
    a7d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a7d4:	e0fffd17 	ldw	r3,-12(fp)
    a7d8:	00800074 	movhi	r2,1
    a7dc:	10b36904 	addi	r2,r2,-12892
    a7e0:	18bfcb1e 	bne	r3,r2,a710 <_gp+0xffff5984>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a7e4:	0005883a 	mov	r2,zero
}
    a7e8:	e037883a 	mov	sp,fp
    a7ec:	dfc00117 	ldw	ra,4(sp)
    a7f0:	df000017 	ldw	fp,0(sp)
    a7f4:	dec00204 	addi	sp,sp,8
    a7f8:	f800283a 	ret

0000a7fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a7fc:	defffa04 	addi	sp,sp,-24
    a800:	dfc00515 	stw	ra,20(sp)
    a804:	df000415 	stw	fp,16(sp)
    a808:	dc000315 	stw	r16,12(sp)
    a80c:	df000404 	addi	fp,sp,16
    a810:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    a814:	00bffa04 	movi	r2,-24
    a818:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a81c:	e03ffc15 	stw	zero,-16(fp)
    a820:	00002106 	br	a8a8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    a824:	04000074 	movhi	r16,1
    a828:	84330304 	addi	r16,r16,-13300
    a82c:	e0bffc17 	ldw	r2,-16(fp)
    a830:	1009883a 	mov	r4,r2
    a834:	01400304 	movi	r5,12
    a838:	00088b80 	call	88b8 <__mulsi3>
    a83c:	8085883a 	add	r2,r16,r2
    a840:	10800017 	ldw	r2,0(r2)
    a844:	1000151e 	bne	r2,zero,a89c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    a848:	04000074 	movhi	r16,1
    a84c:	84330304 	addi	r16,r16,-13300
    a850:	e0bffc17 	ldw	r2,-16(fp)
    a854:	1009883a 	mov	r4,r2
    a858:	01400304 	movi	r5,12
    a85c:	00088b80 	call	88b8 <__mulsi3>
    a860:	8085883a 	add	r2,r16,r2
    a864:	e0fffe17 	ldw	r3,-8(fp)
    a868:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a86c:	00800074 	movhi	r2,1
    a870:	10b36d04 	addi	r2,r2,-12876
    a874:	10c00017 	ldw	r3,0(r2)
    a878:	e0bffc17 	ldw	r2,-16(fp)
    a87c:	1880040e 	bge	r3,r2,a890 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    a880:	00800074 	movhi	r2,1
    a884:	10b36d04 	addi	r2,r2,-12876
    a888:	e0fffc17 	ldw	r3,-16(fp)
    a88c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    a890:	e0bffc17 	ldw	r2,-16(fp)
    a894:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a898:	00000606 	br	a8b4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a89c:	e0bffc17 	ldw	r2,-16(fp)
    a8a0:	10800044 	addi	r2,r2,1
    a8a4:	e0bffc15 	stw	r2,-16(fp)
    a8a8:	e0bffc17 	ldw	r2,-16(fp)
    a8ac:	10800810 	cmplti	r2,r2,32
    a8b0:	103fdc1e 	bne	r2,zero,a824 <_gp+0xffff5a98>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a8b4:	e0bffd17 	ldw	r2,-12(fp)
}
    a8b8:	e6ffff04 	addi	sp,fp,-4
    a8bc:	dfc00217 	ldw	ra,8(sp)
    a8c0:	df000117 	ldw	fp,4(sp)
    a8c4:	dc000017 	ldw	r16,0(sp)
    a8c8:	dec00304 	addi	sp,sp,12
    a8cc:	f800283a 	ret

0000a8d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a8d0:	defffe04 	addi	sp,sp,-8
    a8d4:	df000115 	stw	fp,4(sp)
    a8d8:	df000104 	addi	fp,sp,4
    a8dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    a8e0:	e0bfff17 	ldw	r2,-4(fp)
    a8e4:	10bffe84 	addi	r2,r2,-6
    a8e8:	10c00428 	cmpgeui	r3,r2,16
    a8ec:	18001a1e 	bne	r3,zero,a958 <alt_exception_cause_generated_bad_addr+0x88>
    a8f0:	100690ba 	slli	r3,r2,2
    a8f4:	00800074 	movhi	r2,1
    a8f8:	10aa4204 	addi	r2,r2,-22264
    a8fc:	1885883a 	add	r2,r3,r2
    a900:	10800017 	ldw	r2,0(r2)
    a904:	1000683a 	jmp	r2
    a908:	0000a948 	cmpgei	zero,zero,677
    a90c:	0000a948 	cmpgei	zero,zero,677
    a910:	0000a958 	cmpnei	zero,zero,677
    a914:	0000a958 	cmpnei	zero,zero,677
    a918:	0000a958 	cmpnei	zero,zero,677
    a91c:	0000a948 	cmpgei	zero,zero,677
    a920:	0000a950 	cmplti	zero,zero,677
    a924:	0000a958 	cmpnei	zero,zero,677
    a928:	0000a948 	cmpgei	zero,zero,677
    a92c:	0000a948 	cmpgei	zero,zero,677
    a930:	0000a958 	cmpnei	zero,zero,677
    a934:	0000a948 	cmpgei	zero,zero,677
    a938:	0000a950 	cmplti	zero,zero,677
    a93c:	0000a958 	cmpnei	zero,zero,677
    a940:	0000a958 	cmpnei	zero,zero,677
    a944:	0000a948 	cmpgei	zero,zero,677
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a948:	00800044 	movi	r2,1
    a94c:	00000306 	br	a95c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a950:	0005883a 	mov	r2,zero
    a954:	00000106 	br	a95c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    a958:	0005883a 	mov	r2,zero
  }
}
    a95c:	e037883a 	mov	sp,fp
    a960:	df000017 	ldw	fp,0(sp)
    a964:	dec00104 	addi	sp,sp,4
    a968:	f800283a 	ret

0000a96c <atexit>:
    a96c:	200b883a 	mov	r5,r4
    a970:	000d883a 	mov	r6,zero
    a974:	0009883a 	mov	r4,zero
    a978:	000f883a 	mov	r7,zero
    a97c:	000ac041 	jmpi	ac04 <__register_exitproc>

0000a980 <exit>:
    a980:	defffe04 	addi	sp,sp,-8
    a984:	000b883a 	mov	r5,zero
    a988:	dc000015 	stw	r16,0(sp)
    a98c:	dfc00115 	stw	ra,4(sp)
    a990:	2021883a 	mov	r16,r4
    a994:	000ad180 	call	ad18 <__call_exitprocs>
    a998:	00800074 	movhi	r2,1
    a99c:	10b36504 	addi	r2,r2,-12908
    a9a0:	11000017 	ldw	r4,0(r2)
    a9a4:	20800f17 	ldw	r2,60(r4)
    a9a8:	10000126 	beq	r2,zero,a9b0 <exit+0x30>
    a9ac:	103ee83a 	callr	r2
    a9b0:	8009883a 	mov	r4,r16
    a9b4:	000b5f40 	call	b5f4 <_exit>

0000a9b8 <memcmp>:
    a9b8:	01c000c4 	movi	r7,3
    a9bc:	3980192e 	bgeu	r7,r6,aa24 <memcmp+0x6c>
    a9c0:	2144b03a 	or	r2,r4,r5
    a9c4:	11c4703a 	and	r2,r2,r7
    a9c8:	10000f26 	beq	r2,zero,aa08 <memcmp+0x50>
    a9cc:	20800003 	ldbu	r2,0(r4)
    a9d0:	28c00003 	ldbu	r3,0(r5)
    a9d4:	10c0151e 	bne	r2,r3,aa2c <memcmp+0x74>
    a9d8:	31bfff84 	addi	r6,r6,-2
    a9dc:	01ffffc4 	movi	r7,-1
    a9e0:	00000406 	br	a9f4 <memcmp+0x3c>
    a9e4:	20800003 	ldbu	r2,0(r4)
    a9e8:	28c00003 	ldbu	r3,0(r5)
    a9ec:	31bfffc4 	addi	r6,r6,-1
    a9f0:	10c00e1e 	bne	r2,r3,aa2c <memcmp+0x74>
    a9f4:	21000044 	addi	r4,r4,1
    a9f8:	29400044 	addi	r5,r5,1
    a9fc:	31fff91e 	bne	r6,r7,a9e4 <_gp+0xffff5c58>
    aa00:	0005883a 	mov	r2,zero
    aa04:	f800283a 	ret
    aa08:	20c00017 	ldw	r3,0(r4)
    aa0c:	28800017 	ldw	r2,0(r5)
    aa10:	1880041e 	bne	r3,r2,aa24 <memcmp+0x6c>
    aa14:	31bfff04 	addi	r6,r6,-4
    aa18:	21000104 	addi	r4,r4,4
    aa1c:	29400104 	addi	r5,r5,4
    aa20:	39bff936 	bltu	r7,r6,aa08 <_gp+0xffff5c7c>
    aa24:	303fe91e 	bne	r6,zero,a9cc <_gp+0xffff5c40>
    aa28:	003ff506 	br	aa00 <_gp+0xffff5c74>
    aa2c:	10c5c83a 	sub	r2,r2,r3
    aa30:	f800283a 	ret

0000aa34 <memcpy>:
    aa34:	deffff04 	addi	sp,sp,-4
    aa38:	dc000015 	stw	r16,0(sp)
    aa3c:	00c003c4 	movi	r3,15
    aa40:	2005883a 	mov	r2,r4
    aa44:	1980432e 	bgeu	r3,r6,ab54 <memcpy+0x120>
    aa48:	2146b03a 	or	r3,r4,r5
    aa4c:	18c000cc 	andi	r3,r3,3
    aa50:	1800421e 	bne	r3,zero,ab5c <memcpy+0x128>
    aa54:	343ffc04 	addi	r16,r6,-16
    aa58:	8020d13a 	srli	r16,r16,4
    aa5c:	28c00104 	addi	r3,r5,4
    aa60:	23400104 	addi	r13,r4,4
    aa64:	801e913a 	slli	r15,r16,4
    aa68:	2b000204 	addi	r12,r5,8
    aa6c:	22c00204 	addi	r11,r4,8
    aa70:	7bc00504 	addi	r15,r15,20
    aa74:	2a800304 	addi	r10,r5,12
    aa78:	22400304 	addi	r9,r4,12
    aa7c:	2bdf883a 	add	r15,r5,r15
    aa80:	2811883a 	mov	r8,r5
    aa84:	200f883a 	mov	r7,r4
    aa88:	41000017 	ldw	r4,0(r8)
    aa8c:	39c00404 	addi	r7,r7,16
    aa90:	18c00404 	addi	r3,r3,16
    aa94:	393ffc15 	stw	r4,-16(r7)
    aa98:	1bbffc17 	ldw	r14,-16(r3)
    aa9c:	6b400404 	addi	r13,r13,16
    aaa0:	5ac00404 	addi	r11,r11,16
    aaa4:	6bbffc15 	stw	r14,-16(r13)
    aaa8:	63800017 	ldw	r14,0(r12)
    aaac:	4a400404 	addi	r9,r9,16
    aab0:	42000404 	addi	r8,r8,16
    aab4:	5bbffc15 	stw	r14,-16(r11)
    aab8:	53800017 	ldw	r14,0(r10)
    aabc:	63000404 	addi	r12,r12,16
    aac0:	52800404 	addi	r10,r10,16
    aac4:	4bbffc15 	stw	r14,-16(r9)
    aac8:	1bffef1e 	bne	r3,r15,aa88 <_gp+0xffff5cfc>
    aacc:	81c00044 	addi	r7,r16,1
    aad0:	380e913a 	slli	r7,r7,4
    aad4:	310003cc 	andi	r4,r6,15
    aad8:	02c000c4 	movi	r11,3
    aadc:	11c7883a 	add	r3,r2,r7
    aae0:	29cb883a 	add	r5,r5,r7
    aae4:	59001f2e 	bgeu	r11,r4,ab64 <memcpy+0x130>
    aae8:	1813883a 	mov	r9,r3
    aaec:	2811883a 	mov	r8,r5
    aaf0:	200f883a 	mov	r7,r4
    aaf4:	42800017 	ldw	r10,0(r8)
    aaf8:	4a400104 	addi	r9,r9,4
    aafc:	39ffff04 	addi	r7,r7,-4
    ab00:	4abfff15 	stw	r10,-4(r9)
    ab04:	42000104 	addi	r8,r8,4
    ab08:	59fffa36 	bltu	r11,r7,aaf4 <_gp+0xffff5d68>
    ab0c:	213fff04 	addi	r4,r4,-4
    ab10:	2008d0ba 	srli	r4,r4,2
    ab14:	318000cc 	andi	r6,r6,3
    ab18:	21000044 	addi	r4,r4,1
    ab1c:	2109883a 	add	r4,r4,r4
    ab20:	2109883a 	add	r4,r4,r4
    ab24:	1907883a 	add	r3,r3,r4
    ab28:	290b883a 	add	r5,r5,r4
    ab2c:	30000626 	beq	r6,zero,ab48 <memcpy+0x114>
    ab30:	198d883a 	add	r6,r3,r6
    ab34:	29c00003 	ldbu	r7,0(r5)
    ab38:	18c00044 	addi	r3,r3,1
    ab3c:	29400044 	addi	r5,r5,1
    ab40:	19ffffc5 	stb	r7,-1(r3)
    ab44:	19bffb1e 	bne	r3,r6,ab34 <_gp+0xffff5da8>
    ab48:	dc000017 	ldw	r16,0(sp)
    ab4c:	dec00104 	addi	sp,sp,4
    ab50:	f800283a 	ret
    ab54:	2007883a 	mov	r3,r4
    ab58:	003ff406 	br	ab2c <_gp+0xffff5da0>
    ab5c:	2007883a 	mov	r3,r4
    ab60:	003ff306 	br	ab30 <_gp+0xffff5da4>
    ab64:	200d883a 	mov	r6,r4
    ab68:	003ff006 	br	ab2c <_gp+0xffff5da0>

0000ab6c <strlen>:
    ab6c:	208000cc 	andi	r2,r4,3
    ab70:	10002026 	beq	r2,zero,abf4 <strlen+0x88>
    ab74:	20800007 	ldb	r2,0(r4)
    ab78:	10002026 	beq	r2,zero,abfc <strlen+0x90>
    ab7c:	2005883a 	mov	r2,r4
    ab80:	00000206 	br	ab8c <strlen+0x20>
    ab84:	10c00007 	ldb	r3,0(r2)
    ab88:	18001826 	beq	r3,zero,abec <strlen+0x80>
    ab8c:	10800044 	addi	r2,r2,1
    ab90:	10c000cc 	andi	r3,r2,3
    ab94:	183ffb1e 	bne	r3,zero,ab84 <_gp+0xffff5df8>
    ab98:	10c00017 	ldw	r3,0(r2)
    ab9c:	01ffbff4 	movhi	r7,65279
    aba0:	39ffbfc4 	addi	r7,r7,-257
    aba4:	00ca303a 	nor	r5,zero,r3
    aba8:	01a02074 	movhi	r6,32897
    abac:	19c7883a 	add	r3,r3,r7
    abb0:	31a02004 	addi	r6,r6,-32640
    abb4:	1946703a 	and	r3,r3,r5
    abb8:	1986703a 	and	r3,r3,r6
    abbc:	1800091e 	bne	r3,zero,abe4 <strlen+0x78>
    abc0:	10800104 	addi	r2,r2,4
    abc4:	10c00017 	ldw	r3,0(r2)
    abc8:	19cb883a 	add	r5,r3,r7
    abcc:	00c6303a 	nor	r3,zero,r3
    abd0:	28c6703a 	and	r3,r5,r3
    abd4:	1986703a 	and	r3,r3,r6
    abd8:	183ff926 	beq	r3,zero,abc0 <_gp+0xffff5e34>
    abdc:	00000106 	br	abe4 <strlen+0x78>
    abe0:	10800044 	addi	r2,r2,1
    abe4:	10c00007 	ldb	r3,0(r2)
    abe8:	183ffd1e 	bne	r3,zero,abe0 <_gp+0xffff5e54>
    abec:	1105c83a 	sub	r2,r2,r4
    abf0:	f800283a 	ret
    abf4:	2005883a 	mov	r2,r4
    abf8:	003fe706 	br	ab98 <_gp+0xffff5e0c>
    abfc:	0005883a 	mov	r2,zero
    ac00:	f800283a 	ret

0000ac04 <__register_exitproc>:
    ac04:	00800074 	movhi	r2,1
    ac08:	defffa04 	addi	sp,sp,-24
    ac0c:	10b36504 	addi	r2,r2,-12908
    ac10:	dc000315 	stw	r16,12(sp)
    ac14:	14000017 	ldw	r16,0(r2)
    ac18:	dc400415 	stw	r17,16(sp)
    ac1c:	dfc00515 	stw	ra,20(sp)
    ac20:	80805217 	ldw	r2,328(r16)
    ac24:	2023883a 	mov	r17,r4
    ac28:	10003626 	beq	r2,zero,ad04 <__register_exitproc+0x100>
    ac2c:	10c00117 	ldw	r3,4(r2)
    ac30:	010007c4 	movi	r4,31
    ac34:	20c00e16 	blt	r4,r3,ac70 <__register_exitproc+0x6c>
    ac38:	1a400044 	addi	r9,r3,1
    ac3c:	8800211e 	bne	r17,zero,acc4 <__register_exitproc+0xc0>
    ac40:	18c00084 	addi	r3,r3,2
    ac44:	18c7883a 	add	r3,r3,r3
    ac48:	18c7883a 	add	r3,r3,r3
    ac4c:	12400115 	stw	r9,4(r2)
    ac50:	10c7883a 	add	r3,r2,r3
    ac54:	19400015 	stw	r5,0(r3)
    ac58:	0005883a 	mov	r2,zero
    ac5c:	dfc00517 	ldw	ra,20(sp)
    ac60:	dc400417 	ldw	r17,16(sp)
    ac64:	dc000317 	ldw	r16,12(sp)
    ac68:	dec00604 	addi	sp,sp,24
    ac6c:	f800283a 	ret
    ac70:	00800034 	movhi	r2,0
    ac74:	10800004 	addi	r2,r2,0
    ac78:	10002526 	beq	r2,zero,ad10 <__register_exitproc+0x10c>
    ac7c:	01006404 	movi	r4,400
    ac80:	d9400015 	stw	r5,0(sp)
    ac84:	d9800115 	stw	r6,4(sp)
    ac88:	d9c00215 	stw	r7,8(sp)
    ac8c:	00000000 	call	0 <__reset-0x8000>
    ac90:	d9400017 	ldw	r5,0(sp)
    ac94:	d9800117 	ldw	r6,4(sp)
    ac98:	d9c00217 	ldw	r7,8(sp)
    ac9c:	10001c26 	beq	r2,zero,ad10 <__register_exitproc+0x10c>
    aca0:	80c05217 	ldw	r3,328(r16)
    aca4:	10000115 	stw	zero,4(r2)
    aca8:	02400044 	movi	r9,1
    acac:	10c00015 	stw	r3,0(r2)
    acb0:	80805215 	stw	r2,328(r16)
    acb4:	10006215 	stw	zero,392(r2)
    acb8:	10006315 	stw	zero,396(r2)
    acbc:	0007883a 	mov	r3,zero
    acc0:	883fdf26 	beq	r17,zero,ac40 <_gp+0xffff5eb4>
    acc4:	18d1883a 	add	r8,r3,r3
    acc8:	4211883a 	add	r8,r8,r8
    accc:	1211883a 	add	r8,r2,r8
    acd0:	41802215 	stw	r6,136(r8)
    acd4:	01000044 	movi	r4,1
    acd8:	11806217 	ldw	r6,392(r2)
    acdc:	20c8983a 	sll	r4,r4,r3
    ace0:	310cb03a 	or	r6,r6,r4
    ace4:	11806215 	stw	r6,392(r2)
    ace8:	41c04215 	stw	r7,264(r8)
    acec:	01800084 	movi	r6,2
    acf0:	89bfd31e 	bne	r17,r6,ac40 <_gp+0xffff5eb4>
    acf4:	11806317 	ldw	r6,396(r2)
    acf8:	3108b03a 	or	r4,r6,r4
    acfc:	11006315 	stw	r4,396(r2)
    ad00:	003fcf06 	br	ac40 <_gp+0xffff5eb4>
    ad04:	80805304 	addi	r2,r16,332
    ad08:	80805215 	stw	r2,328(r16)
    ad0c:	003fc706 	br	ac2c <_gp+0xffff5ea0>
    ad10:	00bfffc4 	movi	r2,-1
    ad14:	003fd106 	br	ac5c <_gp+0xffff5ed0>

0000ad18 <__call_exitprocs>:
    ad18:	00800074 	movhi	r2,1
    ad1c:	10b36504 	addi	r2,r2,-12908
    ad20:	10800017 	ldw	r2,0(r2)
    ad24:	defff404 	addi	sp,sp,-48
    ad28:	dd800815 	stw	r22,32(sp)
    ad2c:	d8800015 	stw	r2,0(sp)
    ad30:	10805204 	addi	r2,r2,328
    ad34:	dd000615 	stw	r20,24(sp)
    ad38:	dc800415 	stw	r18,16(sp)
    ad3c:	dfc00b15 	stw	ra,44(sp)
    ad40:	df000a15 	stw	fp,40(sp)
    ad44:	ddc00915 	stw	r23,36(sp)
    ad48:	dd400715 	stw	r21,28(sp)
    ad4c:	dcc00515 	stw	r19,20(sp)
    ad50:	dc400315 	stw	r17,12(sp)
    ad54:	dc000215 	stw	r16,8(sp)
    ad58:	2025883a 	mov	r18,r4
    ad5c:	2829883a 	mov	r20,r5
    ad60:	d8800115 	stw	r2,4(sp)
    ad64:	05bfffc4 	movi	r22,-1
    ad68:	d8800017 	ldw	r2,0(sp)
    ad6c:	14c05217 	ldw	r19,328(r2)
    ad70:	98001d26 	beq	r19,zero,ade8 <__call_exitprocs+0xd0>
    ad74:	dd400117 	ldw	r21,4(sp)
    ad78:	98800117 	ldw	r2,4(r19)
    ad7c:	173fffc4 	addi	fp,r2,-1
    ad80:	e0000d16 	blt	fp,zero,adb8 <__call_exitprocs+0xa0>
    ad84:	14000044 	addi	r16,r2,1
    ad88:	8421883a 	add	r16,r16,r16
    ad8c:	8421883a 	add	r16,r16,r16
    ad90:	84402004 	addi	r17,r16,128
    ad94:	9c63883a 	add	r17,r19,r17
    ad98:	9c21883a 	add	r16,r19,r16
    ad9c:	a0001e26 	beq	r20,zero,ae18 <__call_exitprocs+0x100>
    ada0:	80804017 	ldw	r2,256(r16)
    ada4:	15001c26 	beq	r2,r20,ae18 <__call_exitprocs+0x100>
    ada8:	e73fffc4 	addi	fp,fp,-1
    adac:	843fff04 	addi	r16,r16,-4
    adb0:	8c7fff04 	addi	r17,r17,-4
    adb4:	e5bff91e 	bne	fp,r22,ad9c <_gp+0xffff6010>
    adb8:	00800034 	movhi	r2,0
    adbc:	10800004 	addi	r2,r2,0
    adc0:	10000926 	beq	r2,zero,ade8 <__call_exitprocs+0xd0>
    adc4:	98800117 	ldw	r2,4(r19)
    adc8:	1000311e 	bne	r2,zero,ae90 <__call_exitprocs+0x178>
    adcc:	98800017 	ldw	r2,0(r19)
    add0:	10003426 	beq	r2,zero,aea4 <__call_exitprocs+0x18c>
    add4:	9809883a 	mov	r4,r19
    add8:	a8800015 	stw	r2,0(r21)
    addc:	00000000 	call	0 <__reset-0x8000>
    ade0:	acc00017 	ldw	r19,0(r21)
    ade4:	983fe41e 	bne	r19,zero,ad78 <_gp+0xffff5fec>
    ade8:	dfc00b17 	ldw	ra,44(sp)
    adec:	df000a17 	ldw	fp,40(sp)
    adf0:	ddc00917 	ldw	r23,36(sp)
    adf4:	dd800817 	ldw	r22,32(sp)
    adf8:	dd400717 	ldw	r21,28(sp)
    adfc:	dd000617 	ldw	r20,24(sp)
    ae00:	dcc00517 	ldw	r19,20(sp)
    ae04:	dc800417 	ldw	r18,16(sp)
    ae08:	dc400317 	ldw	r17,12(sp)
    ae0c:	dc000217 	ldw	r16,8(sp)
    ae10:	dec00c04 	addi	sp,sp,48
    ae14:	f800283a 	ret
    ae18:	98800117 	ldw	r2,4(r19)
    ae1c:	80c00017 	ldw	r3,0(r16)
    ae20:	10bfffc4 	addi	r2,r2,-1
    ae24:	17001526 	beq	r2,fp,ae7c <__call_exitprocs+0x164>
    ae28:	80000015 	stw	zero,0(r16)
    ae2c:	183fde26 	beq	r3,zero,ada8 <_gp+0xffff601c>
    ae30:	00800044 	movi	r2,1
    ae34:	1708983a 	sll	r4,r2,fp
    ae38:	98806217 	ldw	r2,392(r19)
    ae3c:	9dc00117 	ldw	r23,4(r19)
    ae40:	2084703a 	and	r2,r4,r2
    ae44:	1000061e 	bne	r2,zero,ae60 <__call_exitprocs+0x148>
    ae48:	183ee83a 	callr	r3
    ae4c:	98800117 	ldw	r2,4(r19)
    ae50:	15ffc51e 	bne	r2,r23,ad68 <_gp+0xffff5fdc>
    ae54:	a8800017 	ldw	r2,0(r21)
    ae58:	14ffd326 	beq	r2,r19,ada8 <_gp+0xffff601c>
    ae5c:	003fc206 	br	ad68 <_gp+0xffff5fdc>
    ae60:	98806317 	ldw	r2,396(r19)
    ae64:	2084703a 	and	r2,r4,r2
    ae68:	1000061e 	bne	r2,zero,ae84 <__call_exitprocs+0x16c>
    ae6c:	89400017 	ldw	r5,0(r17)
    ae70:	9009883a 	mov	r4,r18
    ae74:	183ee83a 	callr	r3
    ae78:	003ff406 	br	ae4c <_gp+0xffff60c0>
    ae7c:	9f000115 	stw	fp,4(r19)
    ae80:	003fea06 	br	ae2c <_gp+0xffff60a0>
    ae84:	89000017 	ldw	r4,0(r17)
    ae88:	183ee83a 	callr	r3
    ae8c:	003fef06 	br	ae4c <_gp+0xffff60c0>
    ae90:	98800017 	ldw	r2,0(r19)
    ae94:	982b883a 	mov	r21,r19
    ae98:	1027883a 	mov	r19,r2
    ae9c:	983fb61e 	bne	r19,zero,ad78 <_gp+0xffff5fec>
    aea0:	003fd106 	br	ade8 <_gp+0xffff605c>
    aea4:	0005883a 	mov	r2,zero
    aea8:	003ffa06 	br	ae94 <_gp+0xffff6108>

0000aeac <__umoddi3>:
    aeac:	defff404 	addi	sp,sp,-48
    aeb0:	dd800815 	stw	r22,32(sp)
    aeb4:	dc400315 	stw	r17,12(sp)
    aeb8:	dc000215 	stw	r16,8(sp)
    aebc:	dfc00b15 	stw	ra,44(sp)
    aec0:	df000a15 	stw	fp,40(sp)
    aec4:	ddc00915 	stw	r23,36(sp)
    aec8:	dd400715 	stw	r21,28(sp)
    aecc:	dd000615 	stw	r20,24(sp)
    aed0:	dcc00515 	stw	r19,20(sp)
    aed4:	dc800415 	stw	r18,16(sp)
    aed8:	2021883a 	mov	r16,r4
    aedc:	2823883a 	mov	r17,r5
    aee0:	282d883a 	mov	r22,r5
    aee4:	38003c1e 	bne	r7,zero,afd8 <__umoddi3+0x12c>
    aee8:	3027883a 	mov	r19,r6
    aeec:	2029883a 	mov	r20,r4
    aef0:	2980522e 	bgeu	r5,r6,b03c <__umoddi3+0x190>
    aef4:	00bfffd4 	movui	r2,65535
    aef8:	1180a436 	bltu	r2,r6,b18c <__umoddi3+0x2e0>
    aefc:	00803fc4 	movi	r2,255
    af00:	11815e2e 	bgeu	r2,r6,b47c <__umoddi3+0x5d0>
    af04:	01400204 	movi	r5,8
    af08:	2805883a 	mov	r2,r5
    af0c:	314ad83a 	srl	r5,r6,r5
    af10:	00c00074 	movhi	r3,1
    af14:	18ed9804 	addi	r3,r3,-18848
    af18:	194b883a 	add	r5,r3,r5
    af1c:	29000003 	ldbu	r4,0(r5)
    af20:	2089883a 	add	r4,r4,r2
    af24:	00800804 	movi	r2,32
    af28:	1105c83a 	sub	r2,r2,r4
    af2c:	10010c26 	beq	r2,zero,b360 <__umoddi3+0x4b4>
    af30:	88a2983a 	sll	r17,r17,r2
    af34:	8108d83a 	srl	r4,r16,r4
    af38:	30a6983a 	sll	r19,r6,r2
    af3c:	80a8983a 	sll	r20,r16,r2
    af40:	1025883a 	mov	r18,r2
    af44:	892cb03a 	or	r22,r17,r4
    af48:	9822d43a 	srli	r17,r19,16
    af4c:	b009883a 	mov	r4,r22
    af50:	9d7fffcc 	andi	r21,r19,65535
    af54:	880b883a 	mov	r5,r17
    af58:	000b5ec0 	call	b5ec <__umodsi3>
    af5c:	b009883a 	mov	r4,r22
    af60:	880b883a 	mov	r5,r17
    af64:	102f883a 	mov	r23,r2
    af68:	000b5e40 	call	b5e4 <__udivsi3>
    af6c:	1009883a 	mov	r4,r2
    af70:	a80b883a 	mov	r5,r21
    af74:	00088b80 	call	88b8 <__mulsi3>
    af78:	b82e943a 	slli	r23,r23,16
    af7c:	a008d43a 	srli	r4,r20,16
    af80:	b906b03a 	or	r3,r23,r4
    af84:	1880042e 	bgeu	r3,r2,af98 <__umoddi3+0xec>
    af88:	1cc7883a 	add	r3,r3,r19
    af8c:	1cc00236 	bltu	r3,r19,af98 <__umoddi3+0xec>
    af90:	1880012e 	bgeu	r3,r2,af98 <__umoddi3+0xec>
    af94:	1cc7883a 	add	r3,r3,r19
    af98:	18a1c83a 	sub	r16,r3,r2
    af9c:	8009883a 	mov	r4,r16
    afa0:	880b883a 	mov	r5,r17
    afa4:	000b5ec0 	call	b5ec <__umodsi3>
    afa8:	8009883a 	mov	r4,r16
    afac:	880b883a 	mov	r5,r17
    afb0:	102d883a 	mov	r22,r2
    afb4:	000b5e40 	call	b5e4 <__udivsi3>
    afb8:	1009883a 	mov	r4,r2
    afbc:	a80b883a 	mov	r5,r21
    afc0:	b02c943a 	slli	r22,r22,16
    afc4:	00088b80 	call	88b8 <__mulsi3>
    afc8:	a13fffcc 	andi	r4,r20,65535
    afcc:	b106b03a 	or	r3,r22,r4
    afd0:	1880572e 	bgeu	r3,r2,b130 <__umoddi3+0x284>
    afd4:	00005206 	br	b120 <__umoddi3+0x274>
    afd8:	29c05936 	bltu	r5,r7,b140 <__umoddi3+0x294>
    afdc:	00bfffd4 	movui	r2,65535
    afe0:	11c0652e 	bgeu	r2,r7,b178 <__umoddi3+0x2cc>
    afe4:	00804034 	movhi	r2,256
    afe8:	10bfffc4 	addi	r2,r2,-1
    afec:	11c1172e 	bgeu	r2,r7,b44c <__umoddi3+0x5a0>
    aff0:	01400604 	movi	r5,24
    aff4:	282b883a 	mov	r21,r5
    aff8:	394ad83a 	srl	r5,r7,r5
    affc:	00c00074 	movhi	r3,1
    b000:	18ed9804 	addi	r3,r3,-18848
    b004:	194b883a 	add	r5,r3,r5
    b008:	28800003 	ldbu	r2,0(r5)
    b00c:	00c00804 	movi	r3,32
    b010:	156b883a 	add	r21,r2,r21
    b014:	1d69c83a 	sub	r20,r3,r21
    b018:	a000671e 	bne	r20,zero,b1b8 <__umoddi3+0x30c>
    b01c:	3c400136 	bltu	r7,r17,b024 <__umoddi3+0x178>
    b020:	81812336 	bltu	r16,r6,b4b0 <__umoddi3+0x604>
    b024:	8185c83a 	sub	r2,r16,r6
    b028:	89e3c83a 	sub	r17,r17,r7
    b02c:	8087803a 	cmpltu	r3,r16,r2
    b030:	88edc83a 	sub	r22,r17,r3
    b034:	b007883a 	mov	r3,r22
    b038:	00004306 	br	b148 <__umoddi3+0x29c>
    b03c:	3000041e 	bne	r6,zero,b050 <__umoddi3+0x1a4>
    b040:	01000044 	movi	r4,1
    b044:	000b883a 	mov	r5,zero
    b048:	000b5e40 	call	b5e4 <__udivsi3>
    b04c:	1027883a 	mov	r19,r2
    b050:	00bfffd4 	movui	r2,65535
    b054:	14c0532e 	bgeu	r2,r19,b1a4 <__umoddi3+0x2f8>
    b058:	00804034 	movhi	r2,256
    b05c:	10bfffc4 	addi	r2,r2,-1
    b060:	14c1032e 	bgeu	r2,r19,b470 <__umoddi3+0x5c4>
    b064:	00800604 	movi	r2,24
    b068:	1007883a 	mov	r3,r2
    b06c:	9884d83a 	srl	r2,r19,r2
    b070:	01000074 	movhi	r4,1
    b074:	212d9804 	addi	r4,r4,-18848
    b078:	2085883a 	add	r2,r4,r2
    b07c:	11000003 	ldbu	r4,0(r2)
    b080:	00800804 	movi	r2,32
    b084:	20c7883a 	add	r3,r4,r3
    b088:	10c5c83a 	sub	r2,r2,r3
    b08c:	1000b61e 	bne	r2,zero,b368 <__umoddi3+0x4bc>
    b090:	982ad43a 	srli	r21,r19,16
    b094:	8ce3c83a 	sub	r17,r17,r19
    b098:	9dbfffcc 	andi	r22,r19,65535
    b09c:	0025883a 	mov	r18,zero
    b0a0:	8809883a 	mov	r4,r17
    b0a4:	a80b883a 	mov	r5,r21
    b0a8:	000b5ec0 	call	b5ec <__umodsi3>
    b0ac:	8809883a 	mov	r4,r17
    b0b0:	a80b883a 	mov	r5,r21
    b0b4:	102f883a 	mov	r23,r2
    b0b8:	000b5e40 	call	b5e4 <__udivsi3>
    b0bc:	1009883a 	mov	r4,r2
    b0c0:	b00b883a 	mov	r5,r22
    b0c4:	00088b80 	call	88b8 <__mulsi3>
    b0c8:	b82e943a 	slli	r23,r23,16
    b0cc:	a008d43a 	srli	r4,r20,16
    b0d0:	b906b03a 	or	r3,r23,r4
    b0d4:	1880032e 	bgeu	r3,r2,b0e4 <__umoddi3+0x238>
    b0d8:	1cc7883a 	add	r3,r3,r19
    b0dc:	1cc00136 	bltu	r3,r19,b0e4 <__umoddi3+0x238>
    b0e0:	1880f136 	bltu	r3,r2,b4a8 <__umoddi3+0x5fc>
    b0e4:	18a1c83a 	sub	r16,r3,r2
    b0e8:	8009883a 	mov	r4,r16
    b0ec:	a80b883a 	mov	r5,r21
    b0f0:	000b5ec0 	call	b5ec <__umodsi3>
    b0f4:	8009883a 	mov	r4,r16
    b0f8:	a80b883a 	mov	r5,r21
    b0fc:	1023883a 	mov	r17,r2
    b100:	000b5e40 	call	b5e4 <__udivsi3>
    b104:	1009883a 	mov	r4,r2
    b108:	b00b883a 	mov	r5,r22
    b10c:	8822943a 	slli	r17,r17,16
    b110:	00088b80 	call	88b8 <__mulsi3>
    b114:	a13fffcc 	andi	r4,r20,65535
    b118:	8906b03a 	or	r3,r17,r4
    b11c:	1880042e 	bgeu	r3,r2,b130 <__umoddi3+0x284>
    b120:	1cc7883a 	add	r3,r3,r19
    b124:	1cc00236 	bltu	r3,r19,b130 <__umoddi3+0x284>
    b128:	1880012e 	bgeu	r3,r2,b130 <__umoddi3+0x284>
    b12c:	1cc7883a 	add	r3,r3,r19
    b130:	1887c83a 	sub	r3,r3,r2
    b134:	1c84d83a 	srl	r2,r3,r18
    b138:	0007883a 	mov	r3,zero
    b13c:	00000206 	br	b148 <__umoddi3+0x29c>
    b140:	2005883a 	mov	r2,r4
    b144:	2807883a 	mov	r3,r5
    b148:	dfc00b17 	ldw	ra,44(sp)
    b14c:	df000a17 	ldw	fp,40(sp)
    b150:	ddc00917 	ldw	r23,36(sp)
    b154:	dd800817 	ldw	r22,32(sp)
    b158:	dd400717 	ldw	r21,28(sp)
    b15c:	dd000617 	ldw	r20,24(sp)
    b160:	dcc00517 	ldw	r19,20(sp)
    b164:	dc800417 	ldw	r18,16(sp)
    b168:	dc400317 	ldw	r17,12(sp)
    b16c:	dc000217 	ldw	r16,8(sp)
    b170:	dec00c04 	addi	sp,sp,48
    b174:	f800283a 	ret
    b178:	00803fc4 	movi	r2,255
    b17c:	11c0b02e 	bgeu	r2,r7,b440 <__umoddi3+0x594>
    b180:	01400204 	movi	r5,8
    b184:	282b883a 	mov	r21,r5
    b188:	003f9b06 	br	aff8 <_gp+0xffff626c>
    b18c:	00804034 	movhi	r2,256
    b190:	10bfffc4 	addi	r2,r2,-1
    b194:	1180b02e 	bgeu	r2,r6,b458 <__umoddi3+0x5ac>
    b198:	01400604 	movi	r5,24
    b19c:	2805883a 	mov	r2,r5
    b1a0:	003f5a06 	br	af0c <_gp+0xffff6180>
    b1a4:	00803fc4 	movi	r2,255
    b1a8:	14c0ae2e 	bgeu	r2,r19,b464 <__umoddi3+0x5b8>
    b1ac:	00800204 	movi	r2,8
    b1b0:	1007883a 	mov	r3,r2
    b1b4:	003fad06 	br	b06c <_gp+0xffff62e0>
    b1b8:	3d0a983a 	sll	r5,r7,r20
    b1bc:	356cd83a 	srl	r22,r6,r21
    b1c0:	8d78d83a 	srl	fp,r17,r21
    b1c4:	8d10983a 	sll	r8,r17,r20
    b1c8:	2dacb03a 	or	r22,r5,r22
    b1cc:	b02ed43a 	srli	r23,r22,16
    b1d0:	8564d83a 	srl	r18,r16,r21
    b1d4:	e009883a 	mov	r4,fp
    b1d8:	b80b883a 	mov	r5,r23
    b1dc:	44a4b03a 	or	r18,r8,r18
    b1e0:	3526983a 	sll	r19,r6,r20
    b1e4:	000b5ec0 	call	b5ec <__umodsi3>
    b1e8:	e009883a 	mov	r4,fp
    b1ec:	b80b883a 	mov	r5,r23
    b1f0:	b47fffcc 	andi	r17,r22,65535
    b1f4:	d8800015 	stw	r2,0(sp)
    b1f8:	000b5e40 	call	b5e4 <__udivsi3>
    b1fc:	1009883a 	mov	r4,r2
    b200:	880b883a 	mov	r5,r17
    b204:	1039883a 	mov	fp,r2
    b208:	00088b80 	call	88b8 <__mulsi3>
    b20c:	d9800017 	ldw	r6,0(sp)
    b210:	9008d43a 	srli	r4,r18,16
    b214:	8520983a 	sll	r16,r16,r20
    b218:	300c943a 	slli	r6,r6,16
    b21c:	3106b03a 	or	r3,r6,r4
    b220:	1880042e 	bgeu	r3,r2,b234 <__umoddi3+0x388>
    b224:	1d87883a 	add	r3,r3,r22
    b228:	e13fffc4 	addi	r4,fp,-1
    b22c:	1d809a2e 	bgeu	r3,r22,b498 <__umoddi3+0x5ec>
    b230:	2039883a 	mov	fp,r4
    b234:	1887c83a 	sub	r3,r3,r2
    b238:	1809883a 	mov	r4,r3
    b23c:	b80b883a 	mov	r5,r23
    b240:	d8c00115 	stw	r3,4(sp)
    b244:	000b5ec0 	call	b5ec <__umodsi3>
    b248:	d8c00117 	ldw	r3,4(sp)
    b24c:	b80b883a 	mov	r5,r23
    b250:	d8800015 	stw	r2,0(sp)
    b254:	1809883a 	mov	r4,r3
    b258:	000b5e40 	call	b5e4 <__udivsi3>
    b25c:	880b883a 	mov	r5,r17
    b260:	1009883a 	mov	r4,r2
    b264:	102f883a 	mov	r23,r2
    b268:	00088b80 	call	88b8 <__mulsi3>
    b26c:	d9800017 	ldw	r6,0(sp)
    b270:	947fffcc 	andi	r17,r18,65535
    b274:	300c943a 	slli	r6,r6,16
    b278:	3464b03a 	or	r18,r6,r17
    b27c:	9080042e 	bgeu	r18,r2,b290 <__umoddi3+0x3e4>
    b280:	95a5883a 	add	r18,r18,r22
    b284:	b8ffffc4 	addi	r3,r23,-1
    b288:	95807f2e 	bgeu	r18,r22,b488 <__umoddi3+0x5dc>
    b28c:	182f883a 	mov	r23,r3
    b290:	e038943a 	slli	fp,fp,16
    b294:	980cd43a 	srli	r6,r19,16
    b298:	98ffffcc 	andi	r3,r19,65535
    b29c:	bf38b03a 	or	fp,r23,fp
    b2a0:	e02ed43a 	srli	r23,fp,16
    b2a4:	e73fffcc 	andi	fp,fp,65535
    b2a8:	180b883a 	mov	r5,r3
    b2ac:	e009883a 	mov	r4,fp
    b2b0:	d9800015 	stw	r6,0(sp)
    b2b4:	d8c00115 	stw	r3,4(sp)
    b2b8:	90a5c83a 	sub	r18,r18,r2
    b2bc:	00088b80 	call	88b8 <__mulsi3>
    b2c0:	d8c00117 	ldw	r3,4(sp)
    b2c4:	b809883a 	mov	r4,r23
    b2c8:	1023883a 	mov	r17,r2
    b2cc:	180b883a 	mov	r5,r3
    b2d0:	00088b80 	call	88b8 <__mulsi3>
    b2d4:	d9800017 	ldw	r6,0(sp)
    b2d8:	b809883a 	mov	r4,r23
    b2dc:	d8800115 	stw	r2,4(sp)
    b2e0:	300b883a 	mov	r5,r6
    b2e4:	302f883a 	mov	r23,r6
    b2e8:	00088b80 	call	88b8 <__mulsi3>
    b2ec:	e009883a 	mov	r4,fp
    b2f0:	b80b883a 	mov	r5,r23
    b2f4:	d8800015 	stw	r2,0(sp)
    b2f8:	00088b80 	call	88b8 <__mulsi3>
    b2fc:	d8c00117 	ldw	r3,4(sp)
    b300:	880cd43a 	srli	r6,r17,16
    b304:	d9c00017 	ldw	r7,0(sp)
    b308:	1885883a 	add	r2,r3,r2
    b30c:	118d883a 	add	r6,r2,r6
    b310:	30c0022e 	bgeu	r6,r3,b31c <__umoddi3+0x470>
    b314:	00800074 	movhi	r2,1
    b318:	388f883a 	add	r7,r7,r2
    b31c:	3006d43a 	srli	r3,r6,16
    b320:	300c943a 	slli	r6,r6,16
    b324:	8c7fffcc 	andi	r17,r17,65535
    b328:	38c7883a 	add	r3,r7,r3
    b32c:	3463883a 	add	r17,r6,r17
    b330:	90c03d36 	bltu	r18,r3,b428 <__umoddi3+0x57c>
    b334:	90c06026 	beq	r18,r3,b4b8 <__umoddi3+0x60c>
    b338:	90c9c83a 	sub	r4,r18,r3
    b33c:	880f883a 	mov	r7,r17
    b340:	81cfc83a 	sub	r7,r16,r7
    b344:	81c7803a 	cmpltu	r3,r16,r7
    b348:	20c7c83a 	sub	r3,r4,r3
    b34c:	1d44983a 	sll	r2,r3,r21
    b350:	3d0ed83a 	srl	r7,r7,r20
    b354:	1d06d83a 	srl	r3,r3,r20
    b358:	11c4b03a 	or	r2,r2,r7
    b35c:	003f7a06 	br	b148 <_gp+0xffff63bc>
    b360:	0025883a 	mov	r18,zero
    b364:	003ef806 	br	af48 <_gp+0xffff61bc>
    b368:	98a6983a 	sll	r19,r19,r2
    b36c:	88e8d83a 	srl	r20,r17,r3
    b370:	80c6d83a 	srl	r3,r16,r3
    b374:	982ad43a 	srli	r21,r19,16
    b378:	88a2983a 	sll	r17,r17,r2
    b37c:	a009883a 	mov	r4,r20
    b380:	a80b883a 	mov	r5,r21
    b384:	88eeb03a 	or	r23,r17,r3
    b388:	1025883a 	mov	r18,r2
    b38c:	000b5ec0 	call	b5ec <__umodsi3>
    b390:	a009883a 	mov	r4,r20
    b394:	a80b883a 	mov	r5,r21
    b398:	1023883a 	mov	r17,r2
    b39c:	9dbfffcc 	andi	r22,r19,65535
    b3a0:	000b5e40 	call	b5e4 <__udivsi3>
    b3a4:	1009883a 	mov	r4,r2
    b3a8:	b00b883a 	mov	r5,r22
    b3ac:	00088b80 	call	88b8 <__mulsi3>
    b3b0:	8822943a 	slli	r17,r17,16
    b3b4:	b808d43a 	srli	r4,r23,16
    b3b8:	84a8983a 	sll	r20,r16,r18
    b3bc:	8906b03a 	or	r3,r17,r4
    b3c0:	1880042e 	bgeu	r3,r2,b3d4 <__umoddi3+0x528>
    b3c4:	1cc7883a 	add	r3,r3,r19
    b3c8:	1cc00236 	bltu	r3,r19,b3d4 <__umoddi3+0x528>
    b3cc:	1880012e 	bgeu	r3,r2,b3d4 <__umoddi3+0x528>
    b3d0:	1cc7883a 	add	r3,r3,r19
    b3d4:	18a1c83a 	sub	r16,r3,r2
    b3d8:	8009883a 	mov	r4,r16
    b3dc:	a80b883a 	mov	r5,r21
    b3e0:	000b5ec0 	call	b5ec <__umodsi3>
    b3e4:	8009883a 	mov	r4,r16
    b3e8:	a80b883a 	mov	r5,r21
    b3ec:	1039883a 	mov	fp,r2
    b3f0:	000b5e40 	call	b5e4 <__udivsi3>
    b3f4:	1009883a 	mov	r4,r2
    b3f8:	b00b883a 	mov	r5,r22
    b3fc:	00088b80 	call	88b8 <__mulsi3>
    b400:	e006943a 	slli	r3,fp,16
    b404:	b93fffcc 	andi	r4,r23,65535
    b408:	1906b03a 	or	r3,r3,r4
    b40c:	1880042e 	bgeu	r3,r2,b420 <__umoddi3+0x574>
    b410:	1cc7883a 	add	r3,r3,r19
    b414:	1cc00236 	bltu	r3,r19,b420 <__umoddi3+0x574>
    b418:	1880012e 	bgeu	r3,r2,b420 <__umoddi3+0x574>
    b41c:	1cc7883a 	add	r3,r3,r19
    b420:	18a3c83a 	sub	r17,r3,r2
    b424:	003f1e06 	br	b0a0 <_gp+0xffff6314>
    b428:	8ccfc83a 	sub	r7,r17,r19
    b42c:	1d89c83a 	sub	r4,r3,r22
    b430:	89e3803a 	cmpltu	r17,r17,r7
    b434:	2463c83a 	sub	r17,r4,r17
    b438:	9449c83a 	sub	r4,r18,r17
    b43c:	003fc006 	br	b340 <_gp+0xffff65b4>
    b440:	000b883a 	mov	r5,zero
    b444:	002b883a 	mov	r21,zero
    b448:	003eeb06 	br	aff8 <_gp+0xffff626c>
    b44c:	01400404 	movi	r5,16
    b450:	282b883a 	mov	r21,r5
    b454:	003ee806 	br	aff8 <_gp+0xffff626c>
    b458:	01400404 	movi	r5,16
    b45c:	2805883a 	mov	r2,r5
    b460:	003eaa06 	br	af0c <_gp+0xffff6180>
    b464:	0005883a 	mov	r2,zero
    b468:	0007883a 	mov	r3,zero
    b46c:	003eff06 	br	b06c <_gp+0xffff62e0>
    b470:	00800404 	movi	r2,16
    b474:	1007883a 	mov	r3,r2
    b478:	003efc06 	br	b06c <_gp+0xffff62e0>
    b47c:	000b883a 	mov	r5,zero
    b480:	0005883a 	mov	r2,zero
    b484:	003ea106 	br	af0c <_gp+0xffff6180>
    b488:	90bf802e 	bgeu	r18,r2,b28c <_gp+0xffff6500>
    b48c:	bdffff84 	addi	r23,r23,-2
    b490:	95a5883a 	add	r18,r18,r22
    b494:	003f7e06 	br	b290 <_gp+0xffff6504>
    b498:	18bf652e 	bgeu	r3,r2,b230 <_gp+0xffff64a4>
    b49c:	e73fff84 	addi	fp,fp,-2
    b4a0:	1d87883a 	add	r3,r3,r22
    b4a4:	003f6306 	br	b234 <_gp+0xffff64a8>
    b4a8:	1cc7883a 	add	r3,r3,r19
    b4ac:	003f0d06 	br	b0e4 <_gp+0xffff6358>
    b4b0:	8005883a 	mov	r2,r16
    b4b4:	003edf06 	br	b034 <_gp+0xffff62a8>
    b4b8:	847fdb36 	bltu	r16,r17,b428 <_gp+0xffff669c>
    b4bc:	880f883a 	mov	r7,r17
    b4c0:	0009883a 	mov	r4,zero
    b4c4:	003f9e06 	br	b340 <_gp+0xffff65b4>

0000b4c8 <udivmodsi4>:
    b4c8:	2900182e 	bgeu	r5,r4,b52c <udivmodsi4+0x64>
    b4cc:	28001716 	blt	r5,zero,b52c <udivmodsi4+0x64>
    b4d0:	00800804 	movi	r2,32
    b4d4:	00c00044 	movi	r3,1
    b4d8:	00000206 	br	b4e4 <udivmodsi4+0x1c>
    b4dc:	10001126 	beq	r2,zero,b524 <udivmodsi4+0x5c>
    b4e0:	28000516 	blt	r5,zero,b4f8 <udivmodsi4+0x30>
    b4e4:	294b883a 	add	r5,r5,r5
    b4e8:	10bfffc4 	addi	r2,r2,-1
    b4ec:	18c7883a 	add	r3,r3,r3
    b4f0:	293ffa36 	bltu	r5,r4,b4dc <_gp+0xffff6750>
    b4f4:	18000b26 	beq	r3,zero,b524 <udivmodsi4+0x5c>
    b4f8:	0005883a 	mov	r2,zero
    b4fc:	21400236 	bltu	r4,r5,b508 <udivmodsi4+0x40>
    b500:	2149c83a 	sub	r4,r4,r5
    b504:	10c4b03a 	or	r2,r2,r3
    b508:	1806d07a 	srli	r3,r3,1
    b50c:	280ad07a 	srli	r5,r5,1
    b510:	183ffa1e 	bne	r3,zero,b4fc <_gp+0xffff6770>
    b514:	3000011e 	bne	r6,zero,b51c <udivmodsi4+0x54>
    b518:	f800283a 	ret
    b51c:	2005883a 	mov	r2,r4
    b520:	f800283a 	ret
    b524:	0005883a 	mov	r2,zero
    b528:	003ffa06 	br	b514 <_gp+0xffff6788>
    b52c:	00c00044 	movi	r3,1
    b530:	003ff106 	br	b4f8 <_gp+0xffff676c>

0000b534 <__divsi3>:
    b534:	defffe04 	addi	sp,sp,-8
    b538:	dfc00115 	stw	ra,4(sp)
    b53c:	dc000015 	stw	r16,0(sp)
    b540:	20000b16 	blt	r4,zero,b570 <__divsi3+0x3c>
    b544:	0021883a 	mov	r16,zero
    b548:	28000c16 	blt	r5,zero,b57c <__divsi3+0x48>
    b54c:	000d883a 	mov	r6,zero
    b550:	000b4c80 	call	b4c8 <udivmodsi4>
    b554:	0407c83a 	sub	r3,zero,r16
    b558:	1884f03a 	xor	r2,r3,r2
    b55c:	1405883a 	add	r2,r2,r16
    b560:	dfc00117 	ldw	ra,4(sp)
    b564:	dc000017 	ldw	r16,0(sp)
    b568:	dec00204 	addi	sp,sp,8
    b56c:	f800283a 	ret
    b570:	0109c83a 	sub	r4,zero,r4
    b574:	04000044 	movi	r16,1
    b578:	283ff40e 	bge	r5,zero,b54c <_gp+0xffff67c0>
    b57c:	014bc83a 	sub	r5,zero,r5
    b580:	8400005c 	xori	r16,r16,1
    b584:	003ff106 	br	b54c <_gp+0xffff67c0>

0000b588 <__modsi3>:
    b588:	defffd04 	addi	sp,sp,-12
    b58c:	dfc00215 	stw	ra,8(sp)
    b590:	dc400115 	stw	r17,4(sp)
    b594:	dc000015 	stw	r16,0(sp)
    b598:	20000c16 	blt	r4,zero,b5cc <__modsi3+0x44>
    b59c:	0023883a 	mov	r17,zero
    b5a0:	0021883a 	mov	r16,zero
    b5a4:	28000d16 	blt	r5,zero,b5dc <__modsi3+0x54>
    b5a8:	01800044 	movi	r6,1
    b5ac:	000b4c80 	call	b4c8 <udivmodsi4>
    b5b0:	1404f03a 	xor	r2,r2,r16
    b5b4:	8885883a 	add	r2,r17,r2
    b5b8:	dfc00217 	ldw	ra,8(sp)
    b5bc:	dc400117 	ldw	r17,4(sp)
    b5c0:	dc000017 	ldw	r16,0(sp)
    b5c4:	dec00304 	addi	sp,sp,12
    b5c8:	f800283a 	ret
    b5cc:	0109c83a 	sub	r4,zero,r4
    b5d0:	04400044 	movi	r17,1
    b5d4:	043fffc4 	movi	r16,-1
    b5d8:	283ff30e 	bge	r5,zero,b5a8 <_gp+0xffff681c>
    b5dc:	014bc83a 	sub	r5,zero,r5
    b5e0:	003ff106 	br	b5a8 <_gp+0xffff681c>

0000b5e4 <__udivsi3>:
    b5e4:	000d883a 	mov	r6,zero
    b5e8:	000b4c81 	jmpi	b4c8 <udivmodsi4>

0000b5ec <__umodsi3>:
    b5ec:	01800044 	movi	r6,1
    b5f0:	000b4c81 	jmpi	b4c8 <udivmodsi4>

0000b5f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b5f4:	defffd04 	addi	sp,sp,-12
    b5f8:	df000215 	stw	fp,8(sp)
    b5fc:	df000204 	addi	fp,sp,8
    b600:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    b604:	0001883a 	nop
    b608:	e0bfff17 	ldw	r2,-4(fp)
    b60c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    b610:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b614:	10000226 	beq	r2,zero,b620 <_exit+0x2c>
    ALT_SIM_FAIL();
    b618:	002af070 	cmpltui	zero,zero,43969
    b61c:	00000106 	br	b624 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    b620:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b624:	003fff06 	br	b624 <_gp+0xffff6898>
